<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $location, $window) {

    /* widget controller */
    var c = this;
    c.data.readStatus = true;
    // Function to get URL parameters
    c.getUrlParameter = function(param) {
        return $location.search()[param];
    };
    // Function to handle click event
    $scope.handleClick = function() {
        if (c.data.budget_key) {
            window.location.href = "/ybpm?id=epic_03_ui_init&number=" + c.data.number + "&table=x_yergb_bpm_budget_plan&sys_id=" + c.data.budget_key; // Redirect to the URL
        }
    };
    // Example: Retrieve a specific parameter
    var paramValue = c.getUrlParameter('number');
    c.data.paramValue = paramValue;

    $scope.clickYProd = function() {
        window.location.href = "/ybpm?id=epic_03_ui_budget_y_product&number=" + c.data.paramValue;
    };
    $scope.clickBOP = function() {
        window.location.href = "/ybpm?id=epic_03_ui_budget_bop&number=" + c.data.paramValue;
    };
    $scope.clickManHour = function() {
        window.location.href = "/ybpm?id=epic_03_ui_budget_man_hour&number=" + c.data.paramValue;
    };
    $scope.clickOther = function() {
        window.location.href = "/ybpm?id=epic_03_ui_budget_other&number=" + c.data.paramValue;
    };
    $scope.clickSave = function() {

    };

    $scope.clickLoadData = function() {
        // Call the server script
        c.server.update($scope).then(function(response) {
            location.reload();
        });
        window.location.href = "/ybpm?id=epic_03_ui_init&number=" + c.data.number + "&table=x_yergb_bpm_budget_plan&sys_id=" + c.data.budget_key;
    };
    $scope.clickApproval = function() {
        alert("승인관련 팝업 작업 개발중...");
    };
    $scope.clickClose = function() {
        alert("Working..... In progress develop..Close");
    };
    $scope.clickMSF = function() {
        alert("Working..... In progress develop..MSF");
    };

	$scope.gridDetailBtnClick = function(idx) {
		var v = {
			'sys_id' : '',
			'wbs_id' : '',
			'month1' : '',
			'month2' : '',
			'month3' : '',
			'month4' : '',
			'month5' : '',
			'month6' : '',
			'month7' : '',
			'month8' : '',
			'month9' : '',
			'month10' : '',
			'month11' : '',
			'month12' : '',
			'month13' : '',
			'month14' : '',
			'month15' : '',
			'month16' : '',
			'month17' : '',
			'month18' : '',
			'beyond18' : '',
			'forecast_ptc' : '',
			'base_month' : c.data.base_month,
			'project' : c.data.project_key,
		}
		
		c.data.gridBtnType = '';
		if(idx == 1) {
			c.data.gridBtnType = 'add';
			dp.addRow(v);
		} else if(idx == 2) {
			c.data.gridBtnType = 'insert';
			dp.insertRow(0, v);
		} else if(idx == 3) {
			c.data.gridBtnType = 'delete';
			//gvDetail.deleteSelection(true);
			var curr = gvDetail.getCurrent();
  			dp.removeRow(curr.dataRow);
		} else if(idx == 4) {
			c.data.gridBtnType = 'save';
			var dataSets = [];
      var updateSets = [];

      let urows = dp.getStateRows('updated');
      let crows = dp.getStateRows('created');

			for (var i = 0 ;  crows.length > i ;i++){
				dataSets.push(dp.getValues(crows[i]));
			}

			if(crows.length || urows.length){
				var result = confirm("데이터를 저장 하시겠습니까");
			}else{
				alert('수정된 데이터가 없습니다.');
				return;
			}

			for (var n = 0 ;  urows.length > n ;n++){
				updateSets.push(dp.getValues(urows[n]));
			}

			if(result){
				if(crows.length){
					//createRecord(dataSets, fields);      
				}
				if(urows.length){
					//updateRecord(updateSets, fields);      
			}
			c.data.dataSets = dataSets;
			c.data.operation = 'saveField';
			debugger

      c.server.update().then(function(response) {
      	location.reload();
      }).catch(function(error) {
      	console.error('Error saving field:', error);
       	alert('Error saving field');
     	});
		}
		
		
		
		console.log(dp.getRowCount());
		
		
		c.server.update().then(function(response) {
			console.log('Server response:', response);
		});
	}

	}
    // --------------------------------------------------------------------------------------------------
    // --------------------------------------------------------------------------------------------------
var gv;
	var dp;
	function grid() {
		// async, import 지원안함
	    //import('https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid.2.7.2.min.js').then(s => console.log(s)).catch(console.log);
		//console.log('mc-1 : grid');

		const gvFields = [
            'sys_id',
						'wbs_id',
            'wbs',
            'wbs_description',
            'month1',
            'month2',
            'month3',
            'month4',
            'month5',
            'month6',
            'month7',
            'month8',
            'month9',
            'month10',
            'month11',
            'month12',
            'month13',
            'month14',
            'month15',
            'month16',
            'month17',
            'month18',
            'beyond18',
            'forecast_ptc',
            'base_month',
            'project'
        ];

		const gvColumns =  [{
                "name": "sys_id",
                "fieldName": "sys_id",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "sysid"
                },
            },
						{
                "name": "wbs_id",
                "fieldName": "wbs_id",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "wbs_id"
                },
            },
            {
                "name": "wbs",
                "fieldName": "wbs",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "WBS"
                },
								"styleName": "ni-rg-align-left ni-rg-readonly",
								"readOnly": false,
								"editable": true,
								button: "action", 
								buttonVisibility: "always",
            },
            {
                "name": "wbs_description",
                "fieldName": "wbs_description",
                "type": "data",
                "width": 120,
                "header": {
                    "text": "WBS Description"
                },
            },
            {
                "name": "month1",
                "fieldName": "month1",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 1"
                },
            },
            {
                "name": "month2",
                "fieldName": "month2",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 2"
                },
            },
            {
                "name": "month3",
                "fieldName": "month3",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 3"
                },
            },
            {
                "name": "month4",
                "fieldName": "month4",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 4"
                },
            },
            {
                "name": "month5",
                "fieldName": "month5",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 5"
                },
            },
            {
                "name": "month6",
                "fieldName": "month6",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 6"
                },
            },
            {
                "name": "month7",
                "fieldName": "month7",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 7"
                },
            },
            {
                "name": "month8",
                "fieldName": "month8",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 8"
                },
            },
            {
                "name": "month9",
                "fieldName": "month9",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 9"
                },
            },
            {
                "name": "month10",
                "fieldName": "month10",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 10"
                },
            },
            {
                "name": "month11",
                "fieldName": "month11",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 11"
                },
            },
            {
                "name": "month12",
                "fieldName": "month12",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 12"
                },
            },
            {
                "name": "month13",
                "fieldName": "month13",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 13"
                },
            },
            {
                "name": "month14",
                "fieldName": "month14",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 14"
                },
            },
            {
                "name": "month15",
                "fieldName": "month15",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 15"
                },
            },
            {
                "name": "month16",
                "fieldName": "month16",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 16"
                },
            },
            {
                "name": "month17",
                "fieldName": "month17",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 17"
                },
            },
            {
                "name": "month18",
                "fieldName": "month18",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Month 18"
                },
            },
            {
                "name": "beyond18",
                "fieldName": "beyond18",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Beyond 18"
                },
            },
            {
                "name": "forecast_ptc",
                "fieldName": "forecast_ptc",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Forecast PTC"
                },
            },
            {
                "name": "base_month",
                "fieldName": "base_month",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Base Month"
                },
            },
            {
                "name": "project",
                "fieldName": "project",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Project"
                }
            }
        ];


		const gvLayouts = [
            'sys_id',
						'wbs_id',
            'wbs',
            'wbs_description',
            'month1',
            'month2',
            'month3',
            'month4',
            'month5',
            'month6',
            'month7',
            'month8',
            'month9',
            'month10',
            'month11',
            'month12',
            'month13',
            'month14',
            'month15',
            'month16',
            'month17',
            'month18',
            'beyond18',
            'forecast_ptc',
            'base_month',
            'project'
        ];

		function initGrid() {
			console.log(RealGrid);
			gv = new RealGrid.GridView('gridContainer');
			dp = new RealGrid.LocalDataProvider();

			dp.setFields(gvFields);
			gv.setDataSource(dp);
			gv.setColumns(gvColumns);
			gv.setColumnLayout(gvLayouts);

			gv.footers.visible = true;
			gv.commitEditor();
			gv.undoable = true;

			//gv.columnByName("sys_id").visible =  false;
			//gv.editOptions.commitWhenLeave = true;
			gv.editOptions.commitByCell = true;
			gv.editOptions.insertable = true;
			gv.setFixedOptions({
				colCount: 2,
				rightCount: 2,
				resizable: true,
				editable: true,
				movable: true,				
			});

			gv.columnByName("sys_id").visible =  false;
	  	gv.columnByName("project").visible =  false;
			gv.columnByName("wbs_id").visible =  false;
	  	gv.columnByName("base_month").visible =  false;		
			
			dp.softDeleting = false;
			console.log(c.data.gridData);
			dp.setRows(c.data.gridData);

		}
		
		initGrid();
	}
	
	function initFormEtc() {
		debugger
		$scope.closeDlgActivityType = function() {
			dlgActivityType.close();
		
		}   
		

	}
	
	    c.setActivityType = function(index) {
        const curr = gv.getCurrent();
        debugger;
        dp.setValue(curr.dataRow, 'wbs_id', c.data.items[index].sys_id);
        dp.setValue(curr.dataRow, 'wbs', c.data.items[index].code);
        dp.setValue(curr.dataRow, 'wbs_description', c.data.items[index].description);
        dlgActivityType.close();
    };

	function initGridEtc() {


		gv.onCellButtonClicked = function(grid, index, column) {
			if (['wbs',].includes(index.column)) {
				c.data.refer_wbs_modal = true;
				c.server.update().then(function(response) {
            console.log('Server response:', response);
        });

				dlgActivityType.showModal();
			}
		};
		
//refer_wbs_modal

		const btnIns = document.getElementById('bt-insert');
		

	};

	function gridSetColumnTitle(y, m) {
		var i = 0;
		var _y = y;
		var _m = m;
		for(var col of gv.getColumns()) {
			if (col.name.startsWith('month') && !col.name.includes("_amt")) {
				col.header.text = "" +  _y + "/" + _m;
				_m ++;
				if (_m > 12) {
					_y ++;
					_m = 1;
				}
			}
		}
	}

	function doGrid() {
		grid();
		gridSetColumnTitle(c.data.base_month.substring(0, 4), parseInt(c.data.base_month.substring(4), 10));
		initGridEtc();
		initFormEtc();
	}

	// 초기화 여러번 시도
	const gridTry = [200,300,400,500,750,1000,1250,1500,2000,2500,3000,3500,4000];
	for (const ms of gridTry) {
		setTimeout(function() {
			const logStr = 'doGrid[' + ms + 'ms]';
			console.log(logStr + ' : start');
			const g = document.querySelector('#gridContainer .rg-grid');
			if (g) {
				console.log(logStr + ' : already completed');
			} else {
				try {
					console.log(logStr + ' : try');
					doGrid();
					console.log(logStr + ' : done');
				} catch(e) {
					console.log(logStr + ' : fail');
				}
			}
		}, ms);
	}

}


document.addEventListener('DOMContentLoaded', function() {
    const buttons = document.querySelectorAll('.yoko-title-btn-wrap .yoko-btn-wrap button');

    buttons.forEach(button => {
        button.addEventListener('click', function() {
            buttons.forEach(btn => {
                btn.classList.remove('active');
            });
            this.classList.add('active');
        });
    });

    var wrapper = document.querySelector('.yoko-search-form-wrapper');
    if (wrapper) {
        var forms = wrapper.querySelectorAll('.yoko-search-form-wrap > .yoko-search-form');
        var maxHeight = 0;
        // 모든 .yoko-search-form 요소의 높이를 확인하여 최대 높이를 찾습니다.
        forms.forEach(function(form) {
            if (form.offsetHeight > maxHeight) {
                maxHeight = form.offsetHeight;
            }
        });
        // 최대 높이로 모든 .yoko-search-form 요소의 높이를 설정합니다.
        forms.forEach(function(form) {
            form.style.height = maxHeight + 'px';
        });
    }


    const toggleButtons = document.querySelectorAll(".yoko-btn-fold");

    toggleButtons.forEach(button => {
        button.addEventListener("click", function() {
            const targetId = this.getAttribute("data-target");
            const content = document.getElementById(targetId);
            if (content.style.display === "block" || content.style.display === "") {
                content.style.display = "none";
            } else {
                content.style.display = "block";
            }
            
            this.classList.toggle("active");
        });
    });

    
    // 슬림스크롤
    $(".yoko-scroll").slimscroll({
        height: 'auto',
        alwaysVisible: true
      }); 


});


$(document).ready(function() {
    // 상위 메뉴에 호버시 하위 메뉴 표시
    $('.yoko-menu').hover(function() {
        $(this).find('.yoko-depth').stop(true, true).slideDown(200);
    }, function() {
        $(this).find('.yoko-depth').stop(true, true).slideUp(200);
    });


    // 하위메뉴 펼침
    $('.yoko-dep-1').click(function(e) {
        e.preventDefault();

        const $targetWrap = $(this).children('.yoko-dep-2-wrap');
        $('.yoko-dep-2-wrap').not($targetWrap).slideUp('fast');
        $targetWrap.slideToggle('fast');
        $(this).find('a').toggleClass('rotate');
    });

    $('.yoko-depth').mouseleave(function() {
    $('.yoko-dep-2-wrap').slideUp('fast');
    });


    // 모달 열기
    $('.yoko-btn-upload').click(function() {
        $('.yoko-modal-normal').show();
    });

    // 모달 닫기
    $('.yoko-btn-cancel').click(function() {
        $('.yoko-modal-normal').hide();
    });
    
    
});
]]></client_script>
        <controller_as>c</controller_as>
        <css>@charset "UTF-8";


body {margin: 0; font-family: "Pretendard"; font-size: 14px; font-weight: 400; line-height: normal;}

ul {margin: 0; padding: 0;}
ul li {list-style: none; margin: 0; padding: 0;}
a {text-decoration: none;}
.blank {width: 100%; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); }
.yoko-container {margin: 40px auto 100px; min-width: 1400px; max-width: 1600px; font-family: "Pretendard"; font-size: 14px; font-weight: 400; letter-spacing: 0;}
.yoko-container * {box-sizing: border-box;}
.yoko-container .yoko-content {display: flex; gap: 30px; flex-direction: column;}
.yoko-breadcrumb {color: #425D78;}
.yoko-title-btn-wrap {display: flex; justify-content: space-between; align-items: center; margin: 8px 0 25px 0;}
.yoko-title-btn-wrap .yoko-title {margin:0; color: #1C3956; font-family: "Pretendard";font-size: 24px;  font-style: normal;  font-weight: 700; line-height: normal;}
.yoko-title-btn-wrap .yoko-btn-wrap {display: flex; gap: 4px; margin-bottom: 0;}

.yoko-btn-wrap {display: flex; justify-content: space-between; margin-bottom: 8px;}
.yoko-btn-wrap &gt; div {display: flex; gap: 4px;}

.yoko-btn {cursor: pointer; border-radius: 4px; text-align: center; font-family: "Pretendard";font-size: 14px;  font-style: normal; font-weight: 400;  padding: 8px 20px 8px 20px;}
.yoko-btn:disabled  {border: 1px solid #AABBD1; color: #C8CED4;}

.yoko-btn.yoko-btn-outline {background: #fff; border: 1px solid #B2B2B2;  color: #4B5E70; }
.yoko-btn.yoko-btn-outline:hover  {border: 1px solid #AABBD1;}

.yoko-btn.yoko-btn-fill {background-color: #68B3FC; border: 1px solid #4193E2; color: #fff;}
.yoko-btn.yoko-btn-fill:hover  {background-color: #4193E2; border: 1px solid #4193E2;}

.yoko-btn.yoko-btn-fill-red {background-color: #FF6D6D; border: 1px solid #E35050; color: #fff;}
.yoko-btn.yoko-btn-fill-red:hover  {background-color: #E35050; border: 1px solid #E35050;}


.yoko-btn-search {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(/icon_search.png) no-repeat center center !important;}
.yoko-btn-search:hover {background-color: #eaeaea;}
.yoko-btn-add {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(/icon_add.png) no-repeat center center !important;}
.yoko-btn-add:hover {background-color: #eaeaea;}
.yoko-btn-delete {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(/icon_delete.png) no-repeat center center !important;}
.yoko-btn-delete:hover {background-color: #eaeaea;}
.yoko-btn-info-fill {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(/icon_info_fill.png) no-repeat center center !important;}
.yoko-btn-info-fill:hover {background-color: #eaeaea;}
.yoko-btn-attach {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(/icon_attach.png) no-repeat center center !important;}
.yoko-btn-attach:hover {background-color: #eaeaea;}
.yoko-btn-load {border: 1px solid #4193E2; font-weight: 400; padding: 0; min-width: 58px; width: 28px; height: 28px; color: #fff; background-color: #68B3FC;}
.yoko-btn-load:hover {background-color: #4193E2; border: 1px solid #4193E2;}
.yoko-btn-fold {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(/icon_arrow_fold.png) no-repeat center center !important;}
.yoko-btn-fold:hover {background-color: #eaeaea;}
.yoko-btn-fold.active {background:#fff url(/icon_arrow_unfold.png) no-repeat center center !important;}


.yoko-search-form {display: flex; gap: 30px; padding: 16px 30px; max-width: 1600px;  background-color: #F7F7F7; border: 1px solid #B2B2B2; border-radius: 4px;}

.yoko-fold-btn-wrap {display: flex; align-items: center; gap: 10px;}

.yoko-form-group .yoko-btn {padding: 5px 10px 5px 10px;}
.yoko-search-form .yoko-form-group {display: flex; align-items: center; gap: 20px; /*width: 100%; min-width: 240px;*/}
.yoko-search-form .yoko-form-group label {width:130px; min-width: 130px; text-align: right;}
.yoko-search-form label {color: #1F3B55; font-family: 'Pretendard'; font-size: 14px; font-style: normal; font-weight: 500; line-height: normal;}
.yoko-search-form label.yoko-short {width: 80px; min-width: 80px;}
.yoko-search-form label.yoko-short-90 {width: 90px; min-width: 100px;}
.yoko-search-form label.yoko-short-100 {width: 100px; min-width: 100px;}
.yoko-search-form label.yoko-short-110 {width: 110px; min-width: 110px;}
.yoko-search-form label.yoko-short-120 {width: 120px; min-width: 120px;}
.yoko-search-form label.yoko-short-130 {width: 130px; min-width: 130px;}
.yoko-search-form label.yoko-short-135 {width: 135px; min-width: 130px;}
.yoko-search-form label.yoko-short-142 {width: 142px; min-width: 130px;}
.yoko-search-form label.yoko-middle {width: 170px; min-width: 170px;}
.yoko-search-form label.yoko-long {width: 200px; min-width: 200px;}
.yoko-search-form label.yoko-btn-fill {background-color: #68B3FC;text-align: center; color: #fff; font-weight: 400;  padding: 5px 10px 6px 10px; border-radius: 4px;}
.yoko-search-form label.yoko-long.yoko-btn-fill {width: calc(200px - 10px);}
.yoko-search-form label.yoko-middle.yoko-btn-fill {width: calc(170px - 10px);}

.yoko-search-form input,
.yoko-search-form select,
.yoko-search-form textarea {font-family: "Pretendard"; font-size: 14px; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); border-radius: 4px; border: 1px solid #B2B2B2; color: #7A8692;}
.yoko-search-form textarea {max-height: none; width: 100%; padding: 10px 10px 10px 10px; }
/* .yoko-search-form input[type=date] {width: 140px; } */
.yoko-search-form input[type=date]::-webkit-calendar-picker-indicator,
.yoko-search-form input[type=date]::-webkit-inner-spin-button {background: url('/icon_calendar.png') no-repeat right center; }

.yoko-search-form select {
  -moz-appearance:none; /* Firefox */
  -webkit-appearance:none; /* Safari and Chrome */
  appearance:none;
  background-image: url(/icon_arrow_down.png);
  background-repeat: no-repeat;
  background-position-x: 100%;
  background-position-y: 1px;
  line-height: 15px;
  padding: 6px 30px 5px 10px;

}

.yoko-form-inline {display: flex;gap: 4px; width: calc(100% - 4px); align-items: center;}
.yoko-form-group-title {padding: 4px 0 8px 0; color: #1C3956; font-family: "Pretendard"; font-size: 14px;font-style: normal;font-weight: 700; line-height: normal;}
.yoko-form-group-hori  {display: flex;gap: 0; /*width:100%;*/}
.yoko-flex-responsive {display: flex; gap: 30px;}
.yoko-form-col {/*width: 100%;*/ display: flex; gap: 8px; flex-direction: column;}
.yoko-form-col.yoko-gap7 {gap:7px ;}
.yoko-col100 {width: 100%;}
.yoko-col60 {width: 60%;}
.yoko-col50 {width: 50%;}
.yoko-col40 {width: 40%}
.yoko-col35 {width: 35%}
.yoko-col30 {width: 30%}
.yoko-col20 {width: 20%} 
.yoko-col15 {width: 15%} 
.yoko-col10 {width: 10%} 

.yoko-search-form label.checkbox-label {text-align: left;width: auto; min-width: auto; cursor: pointer; display: flex; gap: 10px; align-items: flex-start; justify-content: flex-start; color: #1F3B55; font-family: "Pretendard";  font-size: 14px; font-style: normal; font-weight: 400; line-height: normal;}
.custom-checkbox {position: relative;}
.custom-checkbox input { position: absolute;  opacity: 0;  cursor: pointer;  width: 18px; height: 18px; z-index: 1;}
.custom-checkbox .checkmark {position: relative;  top: 0;  left: 0;  display: block;  height: 18px;  width: 18px;  border-radius: 2px;border: 1px solid #DCE3EB;background: #FFF; overflow: hidden;}
.custom-checkbox:hover input ~ .checkmark {background-color: #FFF;}
.custom-checkbox input:checked ~ .checkmark {  background-color: #68B3FC;  border-radius: 2px;  border: 1px solid #68B3FC;}
.custom-checkbox .checkmark:after {  content: "";  position: absolute;  display: none;}
.custom-checkbox input:checked ~ .checkmark:after {  display: block;  left: 50%; top: 50%;  height: 16px;  width: 18px;  transform: translate(-50%, -50%);  background: url(/icon_checkbox.png) no-repeat center center;}

.custom-checkbox input:disabled ~ .checkmark {border: 1px solid #D1D1D1; background: #E2E2E2; cursor: not-allowed; }
.custom-checkbox input:checked:disabled ~ .checkmark {background:#E2E2E2 url(/icon_checkbox_dis.png) no-repeat center center; }
.custom-checkbox input:disabled ~ .checkmark:after {background: url(/icon_checkbox_dis.png) no-repeat center center;}

.yoko-wid100 {width: 100px !important;}
.yoko-wid103 {width: 103px !important;}
.yoko-wid127 {width: 127px !important;}
.yoko-wid134 {width: 134px !important;}
.yoko-wid140 {width: 140px !important;}
.yoko-wid147 {width: 147px !important;}
.yoko-wid154 {width: 154px !important;}
.yoko-wid158 {width: 158px !important;}
.yoko-wid172 {width: 172px !important;}
.yoko-wid247 {width: 247px !important;}
.yoko-wid308 {width: 308px !important;}
.yoko-wid425 {width: 425px !important;}
.yoko-wid559 {width: 559px !important;}
.yoko-wid717 {width: 717px !important;}

.yoko-ht100 {height: 100px !important;}
.yoko-ht200 {height: 200px !important;}

.yoko-mt-20 {margin-top: 20px;}
.yoko-mb-80 {margin-bottom: 80px;}

.yoko-padding-r20 {padding: 16px 20px 16px 30px;}
.yoko-scroll {padding-right: 15px;}
/* .yoko-form-inline select {width: calc(100% - 28px);} */
.yoko-btn-spacing {width: calc(100% - 32px);}
.yoko-text-right {text-align: right;}

.yoko-search-form-wrapper {display: flex; gap: 20px; }
.yoko-search-form-wrap .yoko-search-form-heading {margin-top: 10px; margin-bottom: 5px; font-size: 16px; font-weight: 600; color: #1F3B55;}

.yoko-governance-wrap .yoko-search-form button {width: 100%; min-width: 140px;}
.yoko-project-wrap .yoko-search-form input[type=text] {width: 100%;}

.yoko-form-group-heading-wrap {display: flex; gap: 9px; justify-content: space-between; align-items: center;}
.yoko-form-group-heading {font-size: 14px; font-weight: 700; color: #1F3B55;}
.yoko-form-group-line {flex-grow: 1; height: 1px; background-color: #E1E1E1;}
.yoko-padding24 {padding: 24px;}
.yoko-grid-btn-wrap {display: flex; gap: 7px; justify-content: right;}

.yoko-project-wrap {height: 255px;}
.yoko-project-wrap .yoko-search-form {height: 100%;}
.yoko-middle-text {width: 10px; text-align: center; color: #4B5E70;}

/* 헤더 */
.yoko-header-container {width: 100%; height: 59px; background-color: #00488D;}
.yoko-header-inner {margin: 0 auto; padding: 8px 30px 8px 16px; max-width: 1920px; min-width: 1280px;}
.yoko-nav-wrap {display: flex; align-items: center; gap: 97px;}
.yoko-nav ul {display: flex; gap: 60px;}
.yoko-menu a {display: block; height: 43px; line-height: 43px; font-size: 14px; font-weight: 600; color: #fff;}
.yoko-depth-arrow {position: relative;}
.yoko-depth-arrow::after {content: ''; display: block; width: 7px; height: 4px; background: url(.//icon_header_arrow.svg) no-repeat center center; background-size: contain; position: absolute; top: 50%; right: -12px; transform: translateY(-50%);}
.yoko-header-right {display: flex; margin-left: auto; align-items: center; gap: 24px;}
.yoko-header-icon-wrap {display: flex; align-items: center; gap: 15px;}
.yoko-header-user {display: flex; justify-content: center; align-items: center; width: 35px; height: 35px; border-radius: 50%; background-color: #fff; overflow: hidden;}
.yoko-header-search {display: flex; align-items: center;}
.yoko-header-search input {padding: 8px 10px; width: 156px; font-size: 14px; border: none; border-radius: 4px 0 0 4px; outline: none;}
.yoko-header-search input::placeholder {color: #A7B9CA;}
.yoko-header-search .yoko-arrow button {border: none; background-color: none; display: flex; align-items: center; width: 34px; height: 32px; background-color: #fff; border-radius: 0 4px 4px 0; cursor: pointer;}


.yoko-nav ul.yoko-depth {display: none; position: absolute; background-color: #fff; padding: 20px 16px; width: 267px; height: auto; border-radius: 4px; border: 1px solid #00488D; box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.05);}
.yoko-nav ul.yoko-depth a {font-size: 14px; font-weight: 500; color: #425D78;}
.yoko-nav ul.yoko-dep-2-wrap {display: none; flex-direction: column; padding: 14px 12px; gap: 0; background-color: #F6F6F6;}
.yoko-nav .yoko-dep-1 &gt; a {position: relative; padding: 0 12px;}
.yoko-nav .yoko-dep-1 &gt; a::after {content: ''; display: block; width: 24px; height: 24px; background: url(.//icon_arrow_search.svg) no-repeat center center; background-size: contain; position: absolute; top: 50%; right: 5px; transform: translateY(-50%);}
.yoko-nav .yoko-dep-1 &gt; a.rotate::after {transform: rotate(180deg) translateY(50%);}
.yoko-nav .yoko-dep-1 &gt; a:hover {background-color: #ececec;}
.yoko-nav .yoko-dep-2 &gt; a {padding: 0 12px;}
.yoko-nav .yoko-dep-2 &gt; a:hover {background-color: #fff;}












/* 모달창 */
.yoko-modal-normal {padding: 32px 30px; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 768px; height: 240px; background-color: #fff; box-shadow: 0px 2px 30px rgba(0, 0, 0, 0.1); z-index: 100;}
.yoko-modal-content {position: relative; width: 100%; height: 100%;}
.yoko-modal-content .yoko-btn-wrap {position: absolute; top: 0; right: 0;}
.yoko-modal-content .yoko-btn-group {margin-top: 32px;}
.yoko-modal-content .yoko-btn-group button {padding: 8px 20px;}
.yoko-modal-content .yoko-btn-wrap button {padding: 6px 10px;}

/* 테이블 형식 */
.yoko-search-table input,
.yoko-search-table select,
.yoko-search-table textarea {font-family: "Pretendard"; font-size: 13px; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); border-radius: 4px; border: 1px solid #E1E8F0; color: #7A8692;}
.yoko-search-table textarea {max-height: none; width: 100%; padding: 10px 10px 10px 10px; }
.yoko-search-table input[type=date]::-webkit-calendar-picker-indicator,
.yoko-search-table input[type=date]::-webkit-inner-spin-button {background: url('/icon_calendar.png') no-repeat right center; }

.yoko-search-table select {
  -moz-appearance:none; /* Firefox */
  -webkit-appearance:none; /* Safari and Chrome */
  appearance:none;
  background-image: url(/icon_arrow_down.png);
  background-repeat: no-repeat;
  background-position-x: 100%;
  background-position-y: 1px;
  line-height: 15px;
  padding: 6px 30px 5px 10px;
}

.yoko-search-table-wrap {display: flex; gap: 0;}
.yoko-search-table tr.yoko-height-short {height: 39px;} 
.yoko-search-table {border-spacing: 0; border-collapse: collapse;}
.yoko-search-table tr th {padding-right: 16px; text-align: right; background-color: #F7F7F7; border-top: 1px solid #EDEDED; border-bottom: 1px solid #EDEDED;}
.yoko-search-table tr th.yoko-bg-none {background-color: #fff;}
.yoko-search-table tr th label {color: #4B5E70; font-family: 'Pretendard'; font-size: 13px; font-style: normal; font-weight: 500; line-height: normal;}
.yoko-search-table tr td {padding: 5px 10px; border-top: 1px solid #EDEDED; border-bottom: 1px solid #EDEDED;}
.yoko-search-table tr td input {padding: 5px 10px; width: 100%; height: 100%;}
.yoko-search-table tr td input:disabled {border: 1px solid #E1E8F0; background: #F1F1F1;}
.yoko-search-table .yoko-form-inline {width: 100%;}

.yoko-search-table-wrapper {display: flex; gap: 30px;}
.yoko-search-table-heading {margin-top: 12px; margin-bottom: 5px; font-size: 16px; font-weight: 600; color: #1F3B55;}
.yoko-table-heading {text-align: left !important; font-size: 14px; font-weight: 700; color: #1F3B55;}
.yoko-search-table.yoko-empty-col {flex: 1;}






@media (max-width: 1719px) {
  .yoko-container {width: 1280px; min-width: 1280px;}
  .yoko-search-form {gap: 15px;}
  .yoko-flex-responsive {flex-direction: column; gap: 8px;}
  .yoko-flex-responsive-row {flex-direction: row; gap: 20px;}
  .yoko-search-form-company.yoko-col60 {width: 888px;}
  .yoko-search-form-company .yoko-padding24 {padding: 14px;}
  .yoko-search-form-company .yoko-search-form {gap: 7px;}
  .yoko-search-form-governance.yoko-col40 {width: 381px;}
  .yoko-project-wrap.yoko-col60 {width: 888px;}
  .yoko-project-wrap.yoko-col40 {width: 381px;}
  .yoko-project-wrap .yoko-search-form {padding: 18px;}

  .yoko-form-amount-wrap label.yoko-short {width: 130px;}
  .quotation-responsive label.yoko-short-110 {width: 142px;}
  .yoko-flag-wrap {margin-top: 15px; height: 100px !important;}
  .yoko-flag-wrap.yoko-search-form .yoko-form-group {gap: 40px;}
  .yoko-flag-wrap .yoko-flex-responsive-row {flex-direction: row; gap: 40px;}

  .yoko-nav-wrap {gap: 30px;}
  .yoko-nav ul {gap: 55px;}
}


#dlgActivityType {
    width: 500px;
    min-height: 300px;
  	max-height: 500px;
    overflow-y: auto; /* 세로 스크롤바 자동 표시 */
}

#dlgActivityType article {
    height: 90%;
  	padding: 10px; /* 내부 여백 설정 */
}

#dlgActivityType h4 {
   margin-left: 20px; /* 내부 여백 설정 */
}
/* 테이블 스타일 */
table {
    width: 100%;
    border-collapse: collapse; /* 테이블 경계를 합침 */
    margin-bottom: 10px; /* 테이블 아래 여백 설정 */
}

th, td {
    border: 1px solid #ccc; /* 테두리 설정 */
    padding: 5px; /* 셀 안 여백 설정 */
    text-align: left; /* 텍스트 왼쪽 정렬 */
}

th {
    background-color: #f2f2f2; /* 헤더 배경색 설정 */
    text-align: center; /* 텍스트 왼쪽 정렬 */
}

/* 닫기 버튼 스타일 */
.close-btn {
    background: none;
    border: none;
    color: #999;
    cursor: pointer;
    font-size: 20px;
    padding: 0;
    position: absolute;
    right: 20px; /* 오른쪽 여백 설정 */
    top: 10px; /* 상단 여백 설정 */
}

.close-btn:hover {
    color: #666; /* 호버 시 색상 변경 */
}
/* 클릭 가능한 링크 스타일 */
#wbs_data1 {
  color: #1c88f4;
  cursor: pointer; /* 커서 모양 설정 */
  text-align: center;
}

#wbs_data1:hover {
  font-weight: bold; /* 텍스트 굵게 */
  text-decoration: underline; /* 호버 시 밑줄 유지 */
}

#wbs_data2 {
  padding: 5px 5px 5px 15px; /* 셀 안 여백 설정 */
}


/*리얼그리드 수정*/
.rg-root {color: #4B5966 !important;  font-family: "Pretendard" !important;   font-size: 14px !important;  font-style: normal !important;  font-weight: 500 !important;  line-height: normal !important;}
.rg-grid {border: 1px solid #EAEEF3 !important;}

.rg-header {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}
.rg-header .rg-table tr td {border-right: 1px solid #EAEEF3 !important; border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;} 
.rg-head {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}
.rg-head .rg-table tr td { border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;}

.rg-body,
.rg-fixed-body {color: #4B5966 !important;}
.rg-body .rg-table tr td, 
.rg-fixed-body .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important;}
.rg-rowbarcontainer .rg-table tr td {background-color: transparent !important;    border-right: 1px solid #EAEEF3 !important;    border-bottom: 1px solid #EAEEF3 !important;}
.rg-alternate-row {background: #fff !important;}
.rg-footer {color: #606060 !important; background: #FBFCFF  !important;}
.rg-footer .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}
.rg-foot {color: #606060 !important; background: #FBFCFF  !important;}
.rg-foot .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}
.rg-focus {border:  2px solid #68B3FC !important;}
.rg-header-focus {background: #E5F2FF !important; color: #6F7479 !important;}
.rg-header .rg-table tr td:hover {background: #68B3FC !important; color: #fff !important;}
.rg-header-select {background: rgb(232 248 240 / 50%) !important;}
.rg-selection { background: rgb(232 248 240 / 35%) !important; border: 1px solid #15BD66!important;}
.rg-editor-container { border: 2px solid #27C382 !important; }


@charset "UTF-8";

/*
@font-face {
    font-family: "Pretendard";
    font-weight: 100;
    font-style: normal;
    src: url("./fonts/pretendard/Pretendard-Thin.eot");
    src: url("./fonts/pretendard/Pretendard-Thin.eot?#iefix")
        format("embedded-opentype"),
      url("./fonts/pretendard/Pretendard-Thin.woff2") format("woff2"),
      url("./fonts/pretendard/Pretendard-Thin.woff") format("woff"),
      url("./fonts/pretendard/Pretendard-Thin.ttf") format("truetype");
    font-display: swap;
  }
  @font-face {
    font-family: "Pretendard";
    font-weight: 200;
    font-style: normal;
    src: url("./fonts/pretendard/Pretendard-ExtraLight.eot");
    src: url("./fonts/pretendard/Pretendard-ExtraLight.eot?#iefix")
        format("embedded-opentype"),
      url("./fonts/pretendard/Pretendard-ExtraLight.woff2") format("woff2"),
      url("./fonts/pretendard/Pretendard-ExtraLight.woff") format("woff"),
      url("./fonts/pretendard/Pretendard-ExtraLight.ttf") format("truetype");
    font-display: swap;
  }
  @font-face {
    font-family: "Pretendard";
    font-weight: 300;
    font-style: normal;
    src: url("./fonts/pretendard/Pretendard-Light.eot");
    src: url("./fonts/pretendard/Pretendard-Light.eot?#iefix")
        format("embedded-opentype"),
      url("./fonts/pretendard/Pretendard-Light.woff2") format("woff2"),
      url("./fonts/pretendard/Pretendard-Light.woff") format("woff"),
      url("./fonts/pretendard/Pretendard-Light.ttf") format("truetype");
    font-display: swap;
  }
  @font-face {
    font-family: "Pretendard";
    font-weight: 400;
    font-style: normal;
    src: url("./fonts/pretendard/Pretendard-Regular.eot");
    src: url("./fonts/pretendard/Pretendard-Regular.eot?#iefix")
        format("embedded-opentype"),
      url("./fonts/pretendard/Pretendard-Regular.woff2") format("woff2"),
      url("./fonts/pretendard/Pretendard-Regular.woff") format("woff"),
      url("./fonts/pretendard/Pretendard-Regular.ttf") format("truetype");
    font-display: swap;
  }
  @font-face {
    font-family: "Pretendard";
    font-weight: 500;
    font-style: normal;
    src: url("./fonts/pretendard/Pretendard-Medium.eot");
    src: url("./fonts/pretendard/Pretendard-Medium.eot?#iefix")
        format("embedded-opentype"),
      url("./fonts/pretendard/Pretendard-Medium.woff2") format("woff2"),
      url("./fonts/pretendard/Pretendard-Medium.woff") format("woff"),
      url("./fonts/pretendard/Pretendard-Medium.ttf") format("truetype");
    font-display: swap;
  }
  @font-face {
    font-family: "Pretendard";
    font-weight: 600;
    font-style: normal;
    src: url("./fonts/pretendard/Pretendard-SemiBold.eot");
    src: url("./fonts/pretendard/Pretendard-SemiBold.eot?#iefix")
        format("embedded-opentype"),
      url("./fonts/pretendard/Pretendard-SemiBold.woff2") format("woff2"),
      url("./fonts/pretendard/Pretendard-SemiBold.woff") format("woff"),
      url("./fonts/pretendard/Pretendard-SemiBold.ttf") format("truetype");
    font-display: swap;
  }
  @font-face {
    font-family: "Pretendard";
    font-weight: 700;
    font-style: normal;
    src: url("./fonts/pretendard/Pretendard-Bold.eot");
    src: url("./fonts/pretendard/Pretendard-Bold.eot?#iefix")
        format("embedded-opentype"),
      url("./fonts/pretendard/Pretendard-Bold.woff2") format("woff2"),
      url("./fonts/pretendard/Pretendard-Bold.woff") format("woff"),
      url("./fonts/pretendard/Pretendard-Bold.ttf") format("truetype");
    font-display: swap;
  }
  @font-face {
    font-family: "Pretendard";
    font-weight: 800;
    font-style: normal;
    src: url("./fonts/pretendard/Pretendard-ExtraBold.eot");
    src: url("./fonts/pretendard/Pretendard-ExtraBold.eot?#iefix")
        format("embedded-opentype"),
      url("./fonts/pretendard/Pretendard-ExtraBold.woff2") format("woff2"),
      url("./fonts/pretendard/Pretendard-ExtraBold.woff") format("woff"),
      url("./fonts/pretendard/Pretendard-ExtraBold.ttf") format("truetype");
    font-display: swap;
  }
  @font-face {
    font-family: "Pretendard";
    font-weight: 900;
    font-style: normal;
    src: url("./fonts/pretendard/Pretendard-Black.eot");
    src: url("./fonts/pretendard/Pretendard-Black.eot?#iefix")
        format("embedded-opentype"),
      url("./fonts/pretendard/Pretendard-Black.woff2") format("woff2"),
      url("./fonts/pretendard/Pretendard-Black.woff") format("woff"),
      url("./fonts/pretendard/Pretendard-Black.ttf") format("truetype");
    font-display: swap;
  }
*/</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>Init Plan Management Widget</description>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>init_hh</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>initPlanMngtWd_hh</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

    data.number = $sp.getParameter("number");
    data.plan_type = 'Initial';
    data.sys_created_by = gs.getUser().getName();
    var currentDate = new GlideDate();
    data.sys_created_on = currentDate.getValue().toString();
    data.base_month = currentDate.getByFormat("yyyyMM").toString();
	  data.base_month_y = currentDate.getYearNoTZ().toString();
	  data.base_month_m = currentDate.getMonthNoTZ().toString();

    if (data.number) { // get Project
        var grProject = new GlideRecord('x_yergb_bpm_project');
        grProject.addQuery('number', data.number);
        grProject.query();
        if (grProject.next()) {
            data.project_key = grProject.getUniqueValue();
            data.number = grProject.number.toString(); //Project Number
            data.name = grProject.name.toString(); //Project Name
            data.pm = grProject.getDisplayValue('pm'); //PM Name
            data.user = grProject.pm.user_name.toString(); // PM ID
            data.region = grProject.getDisplayValue('region'); // Region
            data.currency = grProject.getDisplayValue('currency'); // Currency
            data.data_type = grProject.getDisplayValue('u_data_type'); // Data Type
            data.budget_type = grProject.getDisplayValue('u_budget_type'); // Budget Type
            data.customer = grProject.customer.name.toString(); // CustomerName
            data.sys_id = grProject.sys_id.toString(); // Project sys_id
        }
        if (data.project_key) { //Get Budget Plan
            var grBudgetPlan = new GlideRecord('x_yergb_bpm_budget_plan');
            grBudgetPlan.addQuery('project', data.project_key);
            grBudgetPlan.query();
            if (grBudgetPlan.next()) {
                data.base_month = grBudgetPlan.base_month.toString(); // Base Month
							  if(data.base_month.length > 5) {
									data.base_month_y = data.base_month.substring(0,4);
									data.base_month_m = data.base_month.substring(4,6);
								}
                data.plan_type = grBudgetPlan.plan_type.toString(); // Plan Type
                data.sys_created_by = grBudgetPlan.sys_created_by.toString(); // Create By User
                data.sys_created_on = grBudgetPlan.sys_created_on.toString(); // Create Date
                data.budgetPlanNumber = grBudgetPlan.number.toString(); //Number
                data.budget_key = grBudgetPlan.getUniqueValue().toString(); // Budget SysId
                data.dmr = grBudgetPlan.dmr.toString(); // DMR Approve line
                data.state = grBudgetPlan.getDisplayValue('state'); // State
                data.project = grBudgetPlan.project; //Project Reference
            }

            var totalContract = 0;
            var totalCost = 0;
            var grOrderItem = new GlideRecord('x_yergb_bpm_order_item');
            grOrderItem.addQuery('project', data.project_key);
            grOrderItem.query();
            while (grOrderItem.next()) {
                totalContract += grOrderItem.extended_price; // Contract
                totalCost += grOrderItem.extended_cost; // Cost
            }
            data.contract = totalContract.toString();
            data.total_cost = totalCost.toString();
            var gpa = totalContract - totalCost;
            var gp = gpa / totalContract;
            data.gpa = gpa.toString();
            data.gp = gp.toString() + '%';
        }
    }

    if (data.data_type === 'ITEM') {
        data.gridUrl = '/x_yergb_bpm_SorinGrid_item.do?project_sysid=' + data.sys_id + '&basemonth=' + data.base_month;
    } else {
        data.gridUrl = '/x_yergb_bpm_SorinGrid_wbs.do?project_sysid=' + data.sys_id + '&basemonth=' + data.base_month;
    }

    if (input) { //Update

        var mymonth = input.base_month;
        var numMonths = 18; // Number of months to generate
        var currentMonth = parseInt(mymonth);
        var yearmonths = []; //202406,202407 ~ 18개

        for (var i = 0; i < numMonths; i++) {
            yearmonths.push(currentMonth.toString());
            currentMonth++;
            if (currentMonth % 100 > 12) {
                currentMonth += 88;
            }
        }

        var gr = new GlideRecord('x_yergb_bpm_order_item');
        gr.addQuery('project', input.project_key);
        gr.query();
        var myresult = {};

        while (gr.next()) {
            var wbs = gr.getValue('wbs_6');
            var amount = parseInt(gr.getValue('extended_cost'), 10); //Net Amount 값 .WBS가 같고 Base Month가 같은것을 합치는 로직에 필요
            var planGrDate = gr.getValue('plan_gr_date');
            var planDate = new GlideDate();
            planDate.setValue(planGrDate);
            var yearmonth = planDate.getByFormat("yyyyMM");

            if (!myresult[wbs]) {
                myresult[wbs] = {};
            }

            if (!myresult[wbs][yearmonth]) {
                myresult[wbs][yearmonth] = 0;
            }
            myresult[wbs][yearmonth] += amount;
        }

        var myarr = ['month1', 'month2', 'month3', 'month4', 'month5', 'month6', 'month7', 'month8', 'month9', 'month10', 'month11', 'month12', 'month13', 'month14', 'month15', 'month16', 'month17', 'month18'];

        var updatedResult = replaceYearMonthKeys(myresult, yearmonths, myarr);

        for (var wbs1 in updatedResult) {
            var myquery = 'wbs=' + wbs1;
            var monthData = updatedResult[wbs1];
            var gr2 = new GlideRecord('x_yergb_bpm_wbs_budget');
            gr2.addEncodedQuery(myquery);
            gr2.query();

            if (gr2.next()) {
                for (var month in monthData) {
                    gr2.setValue(month, monthData[month]);
                }
                gr2.setValue("project", input.project_key);
                gr2.update();

            } else {
                var newRecord = new GlideRecord('x_yergb_bpm_wbs_budget');
                newRecord.initialize();
                newRecord.setValue('wbs', wbs1);
                newRecord.setValue('project', input.project_key);

                for (var month2 in monthData) {
                    newRecord.setValue(month2, monthData[month2]);
                }
                newRecord.insert();
            }
        }

        var grUpdateBudgetPlan = new GlideRecord("x_yergb_bpm_budget_plan");
        grUpdateBudgetPlan.get(input.budget_key); //Budget Plan sys_id
        if (grUpdateBudgetPlan.getRowCount() > 0) {
            grUpdateBudgetPlan.project = input.project_key;
            grUpdateBudgetPlan.base_month = input.base_month;
            grUpdateBudgetPlan.contract = input.contract;
            grUpdateBudgetPlan.gpa = input.gpa;
            grUpdateBudgetPlan.gp = input.gp;
            grUpdateBudgetPlan.dmr = input.dmr;
            grUpdateBudgetPlan.total_cost = input.total_cost;
            grUpdateBudgetPlan.data_type = input.data_type;
            grUpdateBudgetPlan.update();
        } else { //Insert
            grUpdateBudgetPlan.initialize();
            grUpdateBudgetPlan.project = input.project_key;
            grUpdateBudgetPlan.base_month = input.base_month;
            grUpdateBudgetPlan.plan_type = input.plan_type;
            grUpdateBudgetPlan.contract = input.contract;
            grUpdateBudgetPlan.gpa = input.gpa;
            grUpdateBudgetPlan.gp = input.gp;
            grUpdateBudgetPlan.dmr = input.dmr;
            grUpdateBudgetPlan.state = "1";
            grUpdateBudgetPlan.total_cost = input.total_cost;
            grUpdateBudgetPlan.data_type = input.data_type;
            var grSysId = grUpdateBudgetPlan.insert();
            data.budget_key_1 = grSysId;
        }
    }

    function replaceYearMonthKeys(result, monthArray, arrArray) {
        var newResult = {};

        for (var wbs1 in result) {
            newResult[wbs1] = {};

            for (var ym in result[wbs1]) {
                var index = monthArray.indexOf(ym);
                if (index !== -1) {
                    var newKey = arrArray[index];
                    newResult[wbs1][newKey] = result[wbs1][ym];
                }
            }
        }

        return newResult;
    }
	
	    function getGridData(project_key) {
        
        
        var gritem = new GlideRecord("x_yergb_bpm_wbs_budget");
        gritem.orderBy("number");
        gritem.addEncodedQuery('project=' + project_key);
        gritem.query();
        var tableinfo = [];
        while (gritem.next()) {
            tableinfo.push({
                'sys_id': gritem.sys_id.getDisplayValue(),
                'wbs_id': gritem.wbs.sys_id.toString(),
                'wbs': gritem.wbs.getDisplayValue(),
                'wbs_description': gritem.wbs.description.toString(),
                'month1': gritem.month1.getDisplayValue(),
                'month2': gritem.month2.getDisplayValue(),
                'month3': gritem.month3.getDisplayValue(),
                'month4': gritem.month4.getDisplayValue(),
                'month5': gritem.month5.getDisplayValue(),
                'month6': gritem.month6.getDisplayValue(),
                'month7': gritem.month7.getDisplayValue(),
                'month8': gritem.month8.getDisplayValue(),
                'month9': gritem.month9.getDisplayValue(),
                'month10': gritem.month10.getDisplayValue(),
                'month11': gritem.month11.getDisplayValue(),
                'month12': gritem.month12.getDisplayValue(),
                'month13': gritem.month13.getDisplayValue(),
                'month14': gritem.month14.getDisplayValue(),
                'month15': gritem.month15.getDisplayValue(),
                'month16': gritem.month16.getDisplayValue(),
                'month17': gritem.month17.getDisplayValue(),
                'month18': gritem.month18.getDisplayValue(),
                'beyond18': gritem.beyond18.getDisplayValue(),
                'forecast_ptc': gritem.forecast_ptc.getDisplayValue(),
                'base_month': data.base_month,
                'project': project_key
            });
        }
        return tableinfo;
    }
			

	data.gridData = getGridData(data.project_key);
	data.gridDataStr = JSON.stringify(data.gridData);
	
	if (input && input.refer_wbs_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

  	var items = [];
   	var gr = new GlideRecord('x_yergb_bpm_wbs_master');//x_yergb_bpm_wbs_master_list
   	gr.query();
   	while (gr.next()) {
   		items.push({
     		sys_id: gr.getValue('sys_id'),
       	code: gr.getValue('code'),
       	description: gr.getValue('description'),
     	});
  	}

    data.items = items;
	}
	
	if(input && input.operation){
		
		console.log(data.dataSets);
		
		function insertData() {
    var table = 'x_yergb_bpm_wbs_budget'; // 테이블 이름
    var numRecordsToInsert = 5; // 삽입할 레코드 수

    // for 루프를 사용하여 여러 레코드 삽입
    for (var i = 0; i < numRecordsToInsert; i++) {
        var gr = new GlideRecord(table); // GlideRecord 객체 생성

        // 필드 설정
        gr.initialize(); // 새 레코드 초기화

        gr.setValue('wbs_id', ''); // 적절한 값으로 설정
        gr.setValue('month1', ''); // 적절한 값으로 설정
        gr.setValue('month2', ''); // 적절한 값으로 설정
        gr.setValue('month3', ''); // 적절한 값으로 설정
        gr.setValue('month4', ''); // 적절한 값으로 설정
        gr.setValue('month5', ''); // 적절한 값으로 설정
        gr.setValue('month6', ''); // 적절한 값으로 설정
        gr.setValue('month7', ''); // 적절한 값으로 설정
        gr.setValue('month8', ''); // 적절한 값으로 설정
        gr.setValue('month9', ''); // 적절한 값으로 설정
        gr.setValue('month10', ''); // 적절한 값으로 설정
        gr.setValue('month11', ''); // 적절한 값으로 설정
        gr.setValue('month12', ''); // 적절한 값으로 설정
        gr.setValue('month13', ''); // 적절한 값으로 설정
        gr.setValue('month14', ''); // 적절한 값으로 설정
        gr.setValue('month15', ''); // 적절한 값으로 설정
        gr.setValue('month16', ''); // 적절한 값으로 설정
        gr.setValue('month17', ''); // 적절한 값으로 설정
        gr.setValue('month18', ''); // 적절한 값으로 설정
        gr.setValue('beyond18', ''); // 적절한 값으로 설정
        gr.setValue('forecast_ptc', ''); // 적절한 값으로 설정
        gr.setValue('base_month', data.base_month); // c.data.base_month 값 설정
        gr.setValue('project', data.project_key); // c.data.project_key 값 설정

        // 레코드 삽입
        gr.insert();

        // 삽입된 레코드 ID 확인
        gs.info('Inserted record with sys_id: ' + gr.sys_id.getDisplayValue());
    }
}

// insertData 함수 호출
insertData();
		
	}
	
	
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-06-24 14:34:40</sys_created_on>
        <sys_id>7ff2f76c830f42100a5ce360ceaad32a</sys_id>
        <sys_mod_count>38</sys_mod_count>
        <sys_name>initPlanMngtWd_hh</sys_name>
        <sys_package display_value="BPM" source="x_yergb_bpm">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_package>
        <sys_policy/>
        <sys_scope display_value="BPM">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_scope>
        <sys_update_name>sp_widget_7ff2f76c830f42100a5ce360ceaad32a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-06-24 17:01:17</sys_updated_on>
        <template><![CDATA[  <link id="style-link" href="https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid-style.css" rel="stylesheet"/>
	<script defer type="text/javascript" src="https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid.2.7.2.min.js"> </script>

<div class="yoko-container">
        <div class="yoko-title-btn-wrap">
            <div class="yoko-btn-wrap">
              <div ng-if='data.data_type == "ITEM"'>
                <button class="yoko-btn yoko-btn-outline" ng-click="clickYProd()">Y-Prod</button>
                <button class="yoko-btn yoko-btn-outline" ng-click="clickBOP()">BOP</button>
                <button class="yoko-btn yoko-btn-outline" ng-click="clickManHour()">Man hour</button>
                <button class="yoko-btn yoko-btn-outline" ng-click="clickOther()">Other</button>
              </div>
            </div>
            <div class="yoko-btn-wrap">
                <button class="yoko-btn yoko-btn-outline" ng-click="clickLoadData()">Load Data</button>
                <button class="yoko-btn yoko-btn-outline" ng-click="clickApproval()">Approval Request</button>
                <button class="yoko-btn yoko-btn-outline" ng-click="clickClose()">Close</button>
                <button class="yoko-btn yoko-btn-fill" ng-click="clickMSF()">Make SAP File</button>
            </div>
        </div>
        <div class="yoko-content">
            <div class="yoko-search-form-wrap">
                <div class="yoko-search-form">
                    <div class="yoko-form-group">
                        <label for="base_month" class="yoko-short">Base Month</label>
                        <input type="text" name="base_month" value={{data.base_month}} placeholder="" disabled class="yoko-wid140">
                    </div>
                    <div class="yoko-form-group">
                        <label for="plan_type" class="yoko-short">Plan Type</label>
                        <input type="text" name="plan_type" value={{data.plan_type}} placeholder="" disabled class="yoko-wid140">
                    </div>
                    <!--<div class="yoko-form-group">
                        <label for="opened_by" class="yoko-short">Opened By</label>
                        <input type="text" name="sys_created_by" value={{data.sys_created_by}} placeholder="" disabled class="yoko-wid140">
                    </div>
                    <div class="yoko-form-group">
                        <label for="opened" class="yoko-short">Opened</label>
                        <input type="text" name="sys_created_on" value={{data.sys_created_on}} placeholder="" disabled class="yoko-wid160">
                    </div> -->
                </div>
            </div>
            <div class="yoko-search-form-wrapper">
                <div class="yoko-search-form-wrap yoko-col60">
                    <div class="yoko-search-form">
                        <div class="yoko-form-col">
                            <div class="yoko-form-group">
                                <label for="project_number" class="yoko-short-100">Project Number</label>
                                <input type="text" name="project_number" value={{data.number}} placeholder="" disabled class="yoko-wid247">
                            </div>
                            <div class="yoko-form-group" id="budgetPlanNumber" ng-if="data.budgetPlanNumber">
                                <label for="Budget_plan_number" class="yoko-short-100">Budget Plan Number</label>
                                <input type="text" name="Budget_plan_number" value={{data.budgetPlanNumber}} placeholder="" disabled class="yoko-wid247">
                            </div>
                            <div class="yoko-form-group">
                                <label for="customer" class="yoko-short-100">Customer</label>
                                <input type="text" name="customer" value={{data.customer}} placeholder="" disabled class="yoko-wid247">
                            </div>

                            <div class="yoko-form-group">
                                <label for="pm_name" class="yoko-short-100">PM Name</label>
                                <div class="yoko-form-inline yoko-wid247">
                                <input type="text" name="pm_number" value={{data.user}} placeholder="" disabled class="yoko-col40">
                                <input type="text" name="pm_name" value={{data.pm}} placeholder="" disabled class="yoko-col60">
                              </div>
                            </div>
                            <div class="yoko-form-group">
                                <label for="project_name" class="yoko-short-100">Project Name</label>
                                <input type="text" name="project_name" value={{data.name}} placeholder="" disabled class="yoko-wid247">
                            </div>  
                        </div>

                        <div class="yoko-form-col">
                            <div class="yoko-form-group">
                                <label for="state" class="yoko-short">State</label>
                                <input type="text" name="state" value={{data.state}} placeholder="" disabled class="yoko-wid140">
                            </div>
                            <div class="yoko-form-group">
                                <label for="date_type" class="yoko-short">Date type</label>
                                <input type="text" name="date_type" value={{data.data_type}} placeholder="" disabled class="yoko-wid140">
                            </div>
                            <div class="yoko-form-group">
                                <label for="region" class="yoko-short">Region</label>
                                <input type="text" name="region" value={{data.region}} placeholder="" disabled class="yoko-wid140">
                            </div>
                            <div class="yoko-form-group">
                                <label for="currency" class="yoko-short">Currency</label>
                                <input type="text" name="currency" value={{data.currency}} placeholder="" disabled class="yoko-wid140">
                            </div>
                            <div class="yoko-form-group">
                                <label for="dmr" class="yoko-short">DMR</label>
                                <div class="yoko-form-inline">
                                    <input type="text" name="dmr" ng-model="data.dmr" value="" placeholder="" disabled class="yoko-wid140">
                                    <button type="button" class="yoko-btn yoko-btn-search"></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="yoko-search-form-wrap yoko-col40">
                    <div class="yoko-search-form">
                        <div class="yoko-form-col">
                            <div class="yoko-form-group">
                                <label class="yoko-short"></label>
                                <div class="yoko-form-group-heading-wrap">
                                    <div class="yoko-form-group-heading yoko-wid140">Last Month</div>
                                    <div class="yoko-form-group-heading yoko-wid140">Current Month</div>
                                </div>
                            </div>
                            <div class="yoko-form-group">
                                <label for="contract1" class="yoko-short">Contract</label>
                                <div class="yoko-form-inline">
                                    <input type="text" id="contract1" name="contract1" ng-model="data.contract_last" value="" placeholder="" disabled class="yoko-wid140">
                                    <input type="text" id="contract2" name="contract2" ng-model="data.contract" value="{{data.contract}}" placeholder="" disabled class="yoko-wid140">
                                </div>
                            </div>
                            <div class="yoko-form-group">
                                <label for="cost1" class="yoko-short">Cost</label>
                                <div class="yoko-form-inline">
                                    <input type="text" id="cost1" name="cost1" ng-model="data.total_cost_last" value="" placeholder="" disabled class="yoko-wid140">
                                    <input type="text" id="cost2" name="cost2" ng-model="data.total_cost" value="{{data.total_cost}}" placeholder="" disabled class="yoko-wid140">
                                </div>
                            </div>
                            <div class="yoko-form-group">
                                <label for="gpa1" class="yoko-short">GPA</label>
                                <div class="yoko-form-inline">
                                    <input type="text" id="gpa1" name="gpa1" ng-model="data.gpa_last" value="" placeholder="" disabled class="yoko-wid140">
                                    <input type="text" id="gpa2" name="gpa2" ng-model="data.gpa" value="{{data.gpa}}" placeholder="" disabled class="yoko-wid140">
                                </div>
                            </div>
                            <div class="yoko-form-group">
                                <label for="gp1" class="yoko-short">GP(%)</label>
                                <div class="yoko-form-inline">
                                    <input type="text" id="gp1" name="gp1" ng-model="data.gp_last" value="" placeholder="" disabled class="yoko-wid140">
                                    <input type="text" id="gp2" name="gp2" ng-model="data.gp" value="{{data.gp}}" placeholder="" disabled class="yoko-wid140">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
          <div class="yoko-grid-btn-wrap-grid">
              <button id="bt-add" ng-click='gridDetailBtnClick(1)'>Add</button>
              <button id="bt-insert" ng-click='gridDetailBtnClick(2)'>Insert</button>
              <button id="bt-delete" ng-click='gridDetailBtnClick(3)'>Delete</button>
              <button id="bt-save" ng-click='gridDetailBtnClick(4)'>Save</button>
            </div>
          	<div id='gridContainer' style="width:100%; height: 450px; "></div>
        	</div>
         <!--<iframe src={{data.gridUrl}} width='100%' height='500px' style='border:none;' id='myIframe'></iframe>-->
    </div>
<dialog id="dlgActivityType" class="ni-backdrop" >
  <form method="dialog">
    <header>
      <h4>WBS Master</h4>
      <button class="close-btn" ng-click="closeDlgActivityType()">X</button>
    </header>
    <article>
			<table>
    		<thead>
        	<tr>
            <th>Code</th>
            <th>Description</th>
        	</tr>
    	</thead>
    	<tbody>
        	<tr ng-repeat="item in c.data.items">
            <td id="wbs_data1" ng-click="c.setActivityType($index)">
                {{ item.code }}
            </td>
            <td id="wbs_data2">
                {{ item.description }}
            </td>
            <td id="wbs_data3" style="display: none;">
                {{ item.sys_id }}
            </td>
        </tr>
   	 	</tbody>
		</table>     
   </article>
 </form>
</dialog>
<script defer>
  var realGrid2Lic = 'upVcPE+wPOmtLjqyBIh9RkM/nBOseBrflwxYpzGZyYkkSQt0t0CTeCSk1qaDqTRZ5JoV9H143uMO5+/xJSE3Lj4YewEIhlh/';
</script>]]></template>
    </sp_widget>
</record_update>
