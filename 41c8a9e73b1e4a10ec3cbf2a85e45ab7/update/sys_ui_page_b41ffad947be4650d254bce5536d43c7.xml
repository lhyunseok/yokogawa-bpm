<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script><![CDATA[//add 버튼 클릭 시 quotation값은 default 로 들어가도록
function addRow(dp, gridView, qvalue) {
    var values = {
        quotation: qvalue
    };
    var dataRow = dp.addRow(values);
    gridView.setCurrent({
        dataRow: dataRow
    });
}

function createRecord(dataSets, fields) {

    // wbs_6 코드와 sys_id 매핑을 저장할 객체
    var wbsMap = {};
    var vendorMap = {};

    // WBS 코드와 Vendor 이름 추출
    var wbsCodes = dataSets.map(function(data) {
        return data[2]; // wbs_6 필드의 인덱스는 2
    }).filter(function(wbsCode) {
        return wbsCode !== null && wbsCode !== '';
    });

    var vendorNames = dataSets.map(function(data) {
        return data[12]; // vendor 필드의 인덱스는 12
    }).filter(function(vendorName) {
        return vendorName !== null && vendorName !== '';
    });

    // WBS reference field - sys_id 값 찾기
    if (wbsCodes.length > 0) {
        var grWBS = new GlideRecord('x_yergb_bpm_wbs_master');
        grWBS.addQuery('code', 'IN', wbsCodes);
        grWBS.query();

        while (grWBS.next()) {
            wbsMap[grWBS.getValue('code')] = grWBS.sys_id.toString();
        }
    }

    // Vendor reference field - sys_id 값 찾기
    if (vendorNames.length > 0) {
        var grVendor = new GlideRecord('core_company');
        grVendor.addQuery('name', 'IN', vendorNames);
        grVendor.query();

        while (grVendor.next()) {
            vendorMap[grVendor.getValue('name')] = grVendor.sys_id.toString();
        }
    }

    // 데이터셋 처리
    dataSets.forEach(function(dataSet) {
        var mappedData = dataSet.slice(); // 데이터 복사
        //mappedData.push()

        // WBS_6 필드 업데이트
        var wbsCode = mappedData[2];
        mappedData[2] = wbsMap[wbsCode] || '';

        // Vendor 필드 업데이트
        var vendorName = mappedData[12];
        mappedData[12] = vendorMap[vendorName] || '';

        var newRecord = new GlideRecord('x_yergb_bpm_quote_item');
        newRecord.initialize();

        // 필드 값 설정
        fields.forEach(function(field, index) {
            if (mappedData[index] == undefined || mappedData[index] == null || mappedData[index] == '') {
                return;
            } else {
                newRecord.setValue(field, mappedData[index]);
            }
        });

        // 레코드 삽입
        newRecord.insert();
    });
}

function deleteRecord(arr) {

    var grItem = new GlideRecord('x_yergb_bpm_quote_item');
    for (var i = 0; i < arr.length; i++) {
        var sys_id = arr[i];
        if (grItem.get(sys_id)) {
            grItem.deleteRecord();
        }
    }
}

function updateRecord(updateSets, fields) {

    // wbs_6 코드와 sys_id 매핑을 저장할 객체
    var wbsMap = {};
    var vendorMap = {};

    // WBS 코드와 Vendor 이름 추출
    var wbsCodes = updateSets.map(function(data) {
        return data[2]; // wbs_6 필드의 인덱스는 2
    }).filter(function(wbsCode) {
        return wbsCode !== null && wbsCode !== '';
    });

    var vendorNames = updateSets.map(function(data) {
        return data[12]; // vendor 필드의 인덱스는 12
    }).filter(function(vendorName) {
        return vendorName !== null && vendorName !== '';
    });

    // WBS reference field - sys_id 값 찾기
    if (wbsCodes.length > 0) {
        var grWBS = new GlideRecord('x_yergb_bpm_wbs_master');
        grWBS.addQuery('code', 'IN', wbsCodes);
        grWBS.query();

        while (grWBS.next()) {
            wbsMap[grWBS.getValue('code')] = grWBS.sys_id.toString();
        }
    }

    // Vendor reference field - sys_id 값 찾기
    if (vendorNames.length > 0) {
        var grVendor = new GlideRecord('core_company');
        grVendor.addQuery('name', 'IN', vendorNames);
        grVendor.query();

        while (grVendor.next()) {
            vendorMap[grVendor.getValue('name')] = grVendor.sys_id.toString();
        }
    }

    // 데이터셋 처리
    updateSets.forEach(function(updateSet) {
        var mappedData = updateSet.slice(); // 데이터 복사

        // WBS_6 필드 업데이트
        var wbsCode = mappedData[2];
        mappedData[2] = wbsMap[wbsCode] || '';

        // Vendor 필드 업데이트
        var vendorName = mappedData[12];
        mappedData[12] = vendorMap[vendorName] || '';

        var newRecord = new GlideRecord('x_yergb_bpm_quote_item');
        newRecord.addQuery('sys_id', mappedData[0]); // sys_id 필드의 인덱스는 0
        newRecord.query();

        if (newRecord.next()) {

            // 필드 값 설정
            fields.forEach(function(field, index) {
                if (mappedData[index] == undefined || mappedData[index] == null || mappedData[index] == '') {
                    return;
                } else {
                    newRecord.setValue(field, mappedData[index]);
                }
            });

            newRecord.update();
        }
    });
}]]></client_script>
        <description/>
        <direct>false</direct>
        <endpoint>x_yergb_bpm_SorinGrid_BPM.do</endpoint>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">

<g:evaluate>
   var id_q = RP.getParameterValue('id_q');
</g:evaluate>

<g:evaluate var="jvar_now_GR" object="true">
   var rgutil = new RealGridUtilsBPM();
   var rgkey = rgutil.getRealGridKey();
   var gfields = rgutil.getFields();
   var glayouts = rgutil.getLayouts();
   var gcolumns = rgutil.getColumns();
   var gtable = rgutil.getTableInfo(id_q);
</g:evaluate>

<script type="text/javascript">
    var realGrid2Lic = "${rgkey}";
</script>

<script type="text/javascript">
    var mydata = JSON.parse("${JSON.stringify(gtable)}");
</script>

<style>
body[data-formName=ui_page_render] { padding: 0 !important; }
/*리얼그리드 수정*/
.rg-root {color: #4B5966 !important;  font-family: "Pretendard" !important;   font-size: 14px !important;  font-style: normal !important;  font-weight: 500 !important;  line-height: normal !important;}
.rg-grid {border: 1px solid #EAEEF3 !important;}

.rg-header {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}
.rg-header .rg-table tr td {border-right: 1px solid #EAEEF3 !important; border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;} 
.rg-head {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}
.rg-head .rg-table tr td { border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;}

.rg-body,
.rg-fixed-body {color: #4B5966 !important;}
.rg-body .rg-table tr td, 
.rg-fixed-body .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important;}
.rg-rowbarcontainer .rg-table tr td {background-color: transparent !important;    border-right: 1px solid #EAEEF3 !important;    border-bottom: 1px solid #EAEEF3 !important;}
.rg-alternate-row {background: #fff !important;}
.rg-footer {color: #606060 !important; background: #FBFCFF  !important;}
.rg-footer .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}
.rg-foot {color: #606060 !important; background: #FBFCFF  !important;}
.rg-foot .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}
.rg-focus {border:  2px solid #68B3FC !important;}
.rg-header-focus {background: #E5F2FF !important; color: #6F7479 !important;}
.rg-header .rg-table tr td:hover {background: #68B3FC !important; color: #fff !important;}
.rg-header-select {background: rgb(232 248 240 / 50%) !important;}
.rg-selection { background: rgb(232 248 240 / 35%) !important; border: 1px solid #15BD66!important;}
.rg-editor-container { border: 2px solid #27C382 !important; }

.yoko-grid-btn-wrap-grid {display: flex; gap: 7px; justify-content: right; margin: 2px;}

</style>

<link id="style-link" href="https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid-style.css" rel="stylesheet"/>
<script type="text/javascript" src="https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid.2.7.2.min.js"></script>

<script type="text/javascript">
    var gridView;
    var dp;
    window.addEventListener('DOMContentLoaded', function () {

        gridView = new RealGrid.GridView('gridContainer');
        dp = new RealGrid.LocalDataProvider();
        gridView.setDataSource(dp);

    	const fields = JSON.parse("${JSON.stringify(gfields)}");
      	const columns = JSON.parse("${JSON.stringify(gcolumns)}");
      	const layouts = JSON.parse("${JSON.stringify(glayouts)}");
      	console.log(columns)

        // 데이터 설정
        dp.setFields(fields);
        gridView.setColumns(columns);
      	gridView.footers.visible = false;
      	gridView.commitEditor();
      	gridView.undoable = true;

      	gridView.columnByName("sys_id").visible =  false;
      	gridView.columnByName("quotation").visible =  false;
      	gridView.columnByName("mp_amount").visible =  false;

		//save 버튼 클릭 시 commit 되도록
      	gridView.editOptions.commitWhenLeave = true;
		//컬럼 사이즈 자동 맞춤
      	gridView.displayOptions.fitStyle = 'evenFill'

        gridView.setColumnLayout(layouts);
      	dp.softDeleting = false;
      
    	//Delete
      	const deleteData = document.getElementById('bt-delete');
      	deleteData.addEventListener('click', function () {
        	var rows = gridView.getCheckedRows();
         	var sysidArr = dp.getFieldValues('sys_id');
          	var deleteArr = [];
         	var crows = dp.getStateRows('created');

         	if (rows.length == 0) {
                alert('삭제할 행을 체크해주세요.');
              	return;
          	}

         	// 신규 생성된 행만 있을 경우는 confirm 없음
         	var allIncluded = rows.every(row => crows.includes(row));

         	if (allIncluded) {
             	dp.removeRows(rows);
            	return;
         	}else {
            	var result = confirm("데이터를 삭제 하시겠습니까");
         	}

         	if(result){
             	for (var j = 0; rows.length > j; j++) {
                var row = rows[j];
               	
				if(sysidArr[row]){
                  	deleteArr.push(sysidArr[row]);
                } 
            }
			
            dp.removeRows(rows);
            deleteRecord(deleteArr);
            gridView.checkRows(rows, false);
            updateParentIframeSrc();
        	}else{
            	return;
        	}
      	});

      	//Add
      	const addData = document.getElementById('bt-add');
      	addData.addEventListener('click', function () {
        	console.log("${id_q}");
         	debugger
         	addRow(dp,gridView,"${id_q}");
      	});

      	//SAVE
      	const oData = document.getElementById('bt-save');
      	oData.addEventListener('click', function () {
         	var dataSets = [];
         	var updateSets = [];

         	let urows = dp.getStateRows('updated');
         	let crows = dp.getStateRows('created');

        for (var i = 0 ;  crows.length > i ;i++){
            dataSets.push(dp.getValues(crows[i]));
        }

        for (var k = 0; dataSets.length > k ; k++) {
            if (dataSets[k][3] == null) {
               alert('Ms Code는 필수값 입니다.');
               return;
            } 
        }
      
        if(crows.length || urows.length){
        	var result = confirm("데이터를 저장 하시겠습니까");
        }else{
            alert('수정된 데이터가 없습니다.');
            return;
        }

        for (var n = 0 ;  urows.length > n ;n++){
    		updateSets.push(dp.getValues(urows[n]));
        }

        if(result){
        	if(crows.length){
               createRecord(dataSets, fields);      
            }
            if(urows.length){
               updateRecord(updateSets, fields);      
            }
            updateParentIframeSrc();
        }
    });

		//부모창 reload 하기 위하여 메세지 전달 . newSrc는 sample
   		function updateParentIframeSrc() {
      		var url = new URL(window.location.href);
        	url.searchParams.set('reload', 'ok');
        	var newSrc = url.toString();
       		window.parent.postMessage({ type: 'updateIframeSrc', newSrc: newSrc }, '*');
    	}
	
    	dp.setRows(mydata);
    });
   
</script>
<div class="yoko-grid-btn-wrap-grid">
   <button id="bt-add">Add</button>
   <button id="bt-delete">Delete</button>
   <button id="bt-save">Save</button>
</div>

<div class="out" id='gridContainer' style="width:100%; height: 70%;"></div>
<input  type="hidden" name="myparam" value="${id_q}" />
<script>
</script>
</j:jelly>
]]></html>
        <name>SorinGrid_BPM</name>
        <processing_script/>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>hhkim</sys_created_by>
        <sys_created_on>2024-06-14 08:28:20</sys_created_on>
        <sys_id>b41ffad947be4650d254bce5536d43c7</sys_id>
        <sys_mod_count>17</sys_mod_count>
        <sys_name>SorinGrid_BPM</sys_name>
        <sys_package display_value="BPM" source="x_yergb_bpm">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_package>
        <sys_policy/>
        <sys_scope display_value="BPM">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_scope>
        <sys_update_name>sys_ui_page_b41ffad947be4650d254bce5536d43c7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-06-19 05:34:43</sys_updated_on>
    </sys_ui_page>
</record_update>
