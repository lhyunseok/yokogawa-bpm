<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $location, $window) {

    /* widget controller */
    var c = this;
    c.data.readStatus = true;

    // Function to get URL parameters
    c.getUrlParameter = function(param) {
        return $location.search()[param];
    };
    // Function to handle click event
    $scope.handleClick = function() {
        if (c.data.quotation) {
            window.location.href = "/ybpm?id=epic_03_ui_budget_y_product&number=" + c.data.key; // Redirect to the URL
        }
    };
    // Example: Retrieve a specific parameter
    var paramValue = c.getUrlParameter('number');
    c.data.paramValue = paramValue;

    // Call the server script
    c.server.update().then(function(response) {
        // Handle the server response if needed
    });

    $scope.clickCreateMSA = function() {
        alert("Working..... In progress develop");
    };
	
    //grid save 할 때 전체페이지 reload
    $window.addEventListener('message', function(event) {
        if (event.data.type === 'updateIframeSrc') {
            location.reload();
        }
    });
    // Function to dynamically adjust iframe height
    function resizeIframe() {
        var iframe = document.getElementById('myIframe');
        if (iframe) {
            var windowHeight = window.innerHeight;
            iframe.style.height = Math.max(windowHeight * 0.5, 200) + 'px';
        }
    }

    // Add event listener to resize iframe when content loads
    $window.onload = function() {
        resizeIframe();
    };

    // Add event listener to window resize event
    $window.addEventListener('resize', function() {
        resizeIframe();
    });

    // Call resizeIframe on initial load to set the initial height
    resizeIframe();
	
	
	// --------------------------------------------------------------------------------------------------
	// --------------------------------------------------------------------------------------------------
	var gv;
	var dp;
	function grid() {
		// async, import 지원안함
	    //import('https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid.2.7.2.min.js').then(s => console.log(s)).catch(console.log);
		console.log('mc-1 : grid');
		var realGrid2Lic = 'upVcPE+wPOmtLjqyBIh9RkM/nBOseBrflwxYpzGZyYl7CwX6ItpP+4PNdCICED0lJKTWpoOpNFnkmhX0fXje4w7n7/ElITcursW4T4GvNxc=';
		//debugger;

		const gvFields = [
			{
				fieldName: "sys_id",
				dataType: "text",
			},
			{
				fieldName: "wbs",
				dataType: "text",
			},
			{
				fieldName: "__type",
				dataType: "text",
			},
			{
				fieldName: "in_charge",
				dataType: "text",
			},
			{
				fieldName: "activity_type",
				dataType: "text",
			},
			{
				fieldName: "activity_rate",
				dataType: "number",
			},
			{
				fieldName: "rate_hour",
				dataType: "number",
				//valueExpression: "values['activity_rate'] * values['total_amount']",
				valueCallback: function (provider, dataRow, fieldName, fieldNames, values) {
					if (values[fieldNames.indexOf('__type')] == '참고') {
						return values[fieldNames.indexOf('activity_rate')] * values[fieldNames.indexOf('total_amount')];
					} else {
						let v = 0;
						for (let i = 0; i <= 18; i++) {
							v += values[fieldNames.indexOf('month' + i)] || 0;
						}
						v += values[fieldNames.indexOf('beyond18')] || 0;
						return v;
					}
				}
			},
			{
				fieldName: "total_amount",
				dataType: "number",
			},
			{
				fieldName: "month1",
				dataType: "number"
			},
			{
				fieldName: "month2",
				dataType: "number"
			},
			{
				fieldName: "month3",
				dataType: "number"
			},
			{
				fieldName: "month4",
				dataType: "number"
			},
			{
				fieldName: "month5",
				dataType: "number"
			},
			{
				fieldName: "month6",
				dataType: "number"
			},
			{
				fieldName: "month7",
				dataType: "number"
			},
			{
				fieldName: "month8",
				dataType: "number"
			},
			{
				fieldName: "month9",
				dataType: "number"
			},
			{
				fieldName: "month10",
				dataType: "number"
			},
			{
				fieldName: "month11",
				dataType: "number"
			},
			{
				fieldName: "month12",
				dataType: "number"
			},
			{
				fieldName: "month13",
				dataType: "number"
			},
			{
				fieldName: "month14",
				dataType: "number"
			},
			{
				fieldName: "month15",
				dataType: "number"
			},
			{
				fieldName: "month16",
				dataType: "number"
			},
			{
				fieldName: "month17",
				dataType: "number"
			},
			{
				fieldName: "month18",
				dataType: "number"
			},
			{
				fieldName: "beyond18",
				dataType: "number"
			},
			{
				fieldName: "__insert",
				dataType: "text"
			},			
			{
				fieldName: "__delete",
				dataType: "text"
			},			
		];

		const gvColumns = [
			{
				"name": "sys_id",
				"fieldName": "sys_id",
				"type": "data",
				"width": 30,
				"header": {
					"text": "sysid"
				},
				"visible" : false,
			},
			{
				"name": "__type",
				"fieldName": "__type",
				"type": "data",
				"width": 40, 
				"header": {
					"text": "TYPE"
				},
				//"visible" : false,
			},
			{
				"name": "wbs",
				"fieldName": "wbs",
				"type": "data",
				"width": 100,
				"header": {
					"text": "WBS"
				},
				"groupFooter" :{ "text": " ", "expression" : "max", },
				//mergeRule: {criteria: "value"},
				"readOnly": true,
				"editable": false,
				styleName: "ni-rg-col-wbs",
			},
			{
				"name": "in_charge",
				"fieldName": "in_charge",
				"type": "data",
				"width": 150,
				"header": {
					"text": "In Charge"
				},
				"styleName": "ni-rg-align-left ni-rg-readonly",
				"readOnly": true,
				"editable": false,
			},
			{
				"name": "activity_type",
				"fieldName": "activity_type",
				"type": "data",
				"width": 120,
				"header": {
					"text": "Activity Type"
				},
				groupFooter: {
					"styleName": "ni-rg-align-center",
					"numberFormat" : "#,###",
					valueCallback : function (grid, column, groupFooterIndex, group, value) {
						if (group.level == 2) {
							if (group.groupValue == "참고") {
								return " --- SUM ---";
							} else {
								return null;
							}
						}
					}
				},
				"styleName": "ni-rg-align-left ni-rg-readonly",
				"readOnly": true,
				"editable": false,
				button: "action", 
				buttonVisibility: "always",
			},
			{
				"name": "activity_rate",
				"fieldName": "activity_rate",
				"type": "number",
				"numberFormat": "#,##0",
				"width": 80,
				"header": {
					"text": "Activity Rate"
				},
				"styleName": "ni-rg-align-right ni-rg-readonly",
				"readOnly": true,
				"editable": false,
			},
			{
				"name": "rate_hour",
				"fieldName": "rate_hour",
				"width": 100,
				"numberFormat": "#,##0",
				"header": {
					"text": "Rate * Hour",
				},
				"footer": { "expression": "sum", "numberFormat": "#,##0" },
				"groupFooter": { "expression": "sum", "numberFormat": "#,##0" },
				"styleName": "ni-rg-align-right ni-rg-readonly",
				"readOnly": true,
				"editable": false,
			},
			{
				"name": "total_amount",
				"fieldName": "total_amount",
				"type": "number",
				"numberFormat": "#,##0",
				"width": 60,
				"header": {
					"text": "Total(H)"
				},
				"groupFooter" :{ "text": "", "expression" : "sum", "numberFormat" : "#,###", "styleName": "ni-rg-align-right"},
				"styleName": "ni-rg-align-right ni-rg-readonly",
				"readOnly": true,
				"editable": false,
			},
			{
				"name": "month1",
				"fieldName": "month1",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 1"
				},
				groupFooter: {
					"numberFormat" : "#,###",
					valueCallback : function (grid, column, groupFooterIndex, group, value) {
						//debugger;
						const gm = grid.getGroupModel(group.index+1);
						const d = grid.getGroupSummary(gm, "month1_amt", true).sum;
						return d;
					},
				},
			},
			{
				"name": "month2",
				"fieldName": "month2",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 2"
				}
			},
			{
				"name": "month3",
				"fieldName": "month3",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 3"
				}
			},
			{
				"name": "month4",
				"fieldName": "month4",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 4"
				}
			},
			{
				"name": "month5",
				"fieldName": "month5",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 5"
				}
			},
			{
				"name": "month6",
				"fieldName": "month6",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 6"
				}
			},
			{
				"name": "month7",
				"fieldName": "month7",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 7"
				}
			},
			{
				"name": "month8",
				"fieldName": "month8",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 8"
				}
			},
			{
				"name": "month9",
				"fieldName": "month9",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 9"
				}
			},
			{
				"name": "month10",
				"fieldName": "month10",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 10"
				}
			},
			{
				"name": "month11",
				"fieldName": "month11",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 11"
				}
			},
			{
				"name": "month12",
				"fieldName": "month12",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 12"
				}
			},
			{
				"name": "month13",
				"fieldName": "month13",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 13"
				}
			},
			{
				"name": "month14",
				"fieldName": "month14",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 14"
				}
			},
			{
				"name": "month15",
				"fieldName": "month15",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 15"
				}
			},
			{
				"name": "month16",
				"fieldName": "month16",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 16"
				}
			},
			{
				"name": "month17",
				"fieldName": "month17",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 17"
				}
			},
			{
				"name": "month18",
				"fieldName": "month18",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 60,
				"header": {
					"text": "Month 18"
				}
			},
			{
				"name": "beyond18",
				"fieldName": "beyond18",
				"numberFormat": "#,##0",
				"type": "number",
				"width": 100,
				"header": {
					"text": "Beyond 18"
				}
			},
			{
				"name": "__insert",
				"fieldName": "__insert",
				"type": "button",
				"width": 40,
				"header": {
					"text": "Insert"
				},
				styleName: 'ni-rg-col-button',
				renderer: {"type": "button", "hideWhenEmpty": true},
				editable: false,
			},			
			{
				"name": "__delete",
				"fieldName": "__delete",
				"type": "button",
				"width": 45,
				"header": {
					"text": "Delete"
				},
				styleName: 'ni-rg-col-button',
				renderer: {"type": "button", "hideWhenEmpty": true},
				editable: false,
			},			
		];

		const gvLayouts = [
			'sys_id',
			'wbs',
			'__type',
			'in_charge',
			'activity_type',
			'activity_rate',
			'rate_hour',
			'total_amount',
			'month1',
			'month2',
			'month3',
			'month4',
			'month5',
			'month6',
			'month7',
			'month8',
			'month9',
			'month10',
			'month11',
			'month12',
			'month13',
			'month14',
			'month15',
			'month16',
			'month17',
			'month18',
			'beyond18',
			'__insert',
			'__delete',
		];
		
		const gvFilesAmt = [];
		for(const field of gvFields) {
			if (field.fieldName.startsWith('month') || field.fieldName == 'beyond18') {
				const amt_nm = field.fieldName + "_amt";
				gvFilesAmt.push({
					fieldName: amt_nm,
					dataType: "number",
					valueExpression: "values['activity_rate'] * values['" + field.fieldName + "']",
				});
				gvColumns.push({
					"name": amt_nm,
					"fieldName": amt_nm,
					"numberFormat": "#,##0",
					"type": "number",
					"width": 60,
				});
				gvLayouts.push(amt_nm);
			}
		}
		gvFields.push(...gvFilesAmt);
		
		for(const col of gvColumns) {
			if (col.name.startsWith('month') || col.name.startsWith('beyond18')) {
				col.styleName = col.styleName || '' + ' ni-rg-align-right';
				col.numberFormat = "#,###";
				col.width = 90;
				if (col.name.includes("_amt")) {
					col.visible = false;
					col.groupFooters = [{ "text": " ", "expression" : "sum", "numberFormat" : "#,###" }];
				} else {
					col.styleCallback = function (grid, cell) {
						const __type = grid.getValue(cell.index.itemIndex, "__type");
						if (__type == "입력") {
							return { 
								styleName: col.styleName + " ni-rg-col-type-input",
							};
						} else {
							return {
								readOnly : true,
								editable : false,
								styleName: col.styleName + " ni-rg-col-type-ref"
							};
						}
					};
					col.groupFooters = [{
						numberFormat : "#,###",
						valueCallback : function (grid, column, groupFooterIndex, group, value) {
							//debugger;
							//  const gm = grid.getGroupModel(group.index+1);
							//  const d = grid.getGroupSummary(gm, col.name + "_amt", true).sum;
							//  return d;
							//if (group.level == 2) {
							//  if (group.groupValue == "참고") {
									const gm = grid.getGroupModel(group.index);
									const v = grid.getGroupSummary(gm, col.name + "_amt", true).sum;
									return v;
							//  } else {
							//    return null;
							//  }
							//}
						}
					}];
				}
			}
		}

		function initGrid() {
			console.log(RealGrid);
			gv = new RealGrid.GridView('gridContainer');
			dp = new RealGrid.LocalDataProvider();

			dp.setFields(gvFields);
			gv.setDataSource(dp);
			gv.setColumns(gvColumns);
			gv.setColumnLayout(gvLayouts);

			gv.footers.visible = true;
			gv.commitEditor();
			gv.undoable = true;

			//gv.columnByName("sys_id").visible =  false;
			//gv.editOptions.commitWhenLeave = true;
			gv.editOptions.commitByCell = true;
			gv.editOptions.insertable = true;
			gv.setFixedOptions({
				colCount: 7, 
				rightCount: 3,
				resizable: true,
				editable: true,
				movable: true,				
			});

			dp.softDeleting = false;

			gv.groupBy(["wbs", "__type"], false);

			gv.setRowGroup({ 
				expandedAdornments : 'footer', 
				//collapsedAdornments : 'footer',
				//headerStatement: '$' + "{" + "groupValue" +  "}",

				expanderVisibility: 'none',
				indentVisible: false,
				mergeMode: true,
				createFooterCallback: function(grid, group) { 
					if (group.level == 1) {
						return false;
					}
					if (group.descendantCount > 1) return true;
				},

			});


			//gv.rowGroup.setFooters([{styleCallback: function(grid, itemIndex, footerIndex) {
			//  var dataRow = grid.getGroupModel(itemIndex, true).firstDataItem.dataRow;
			//  var value = grid.getDataSource().getValue(dataRow, "__type");
			//  return value && value.indexOf("입력") >= 0 ? "ni-rg-height-0" : "";
			//}
			//}]);

			gv.checkBar.visible = false;
			gv.stateBar.visible = false;

			//const eleData = document.getElementById('gridData');
			//const gridData = JSON.parse(eleData.value);
			//dp.setRows(gridData);
			
			dp.setRows(c.data.gridData);

		}
		
		initGrid();
	}
	
	function initFormEtc() {
		$scope.closeDlgActivityType = function() {
			dlgActivityType.close();
		}
		$scope.setActivityType = function() {
			const curr = gv.getCurrent();
			dp.setValue(curr.dataRow, 'activity_type', moonc_at_data1.value);
			dp.setValue(curr.dataRow, 'in_charge', moonc_at_data2.value);
			dlgActivityType.close();
		}
	}

	function initGridEtc() {
		const _fnInsert = function () {
			const curr = gv.getCurrent();
			if (curr.dataRow < 0) {
				// 데이터 행이 아님. (그룹핑 등)
			} else {
				const currIndex = Math.max(0, (curr.itemIndex));
				const wbs = gv.getValue(currIndex, 'wbs');
				const __type = gv.getValue(currIndex, '__type');
				if (__type == "참고") {
					gv.beginInsertRow(currIndex, true);
					gv.setValue(currIndex + 1, 'wbs', wbs);
					gv.setValue(currIndex + 1, '__type', '참고');
					gv.setValue(currIndex + 1, '__insert', 'Ins');
					gv.setValue(currIndex + 1, '__delete', 'Del');
				} else {
					gv.beginInsertRow(currIndex, false);
					gv.setValue(currIndex, 'wbs', wbs);
					gv.setValue(currIndex, '__type', '참고');
					gv.setValue(currIndex, '__insert', 'Ins');
					gv.setValue(currIndex, '__delete', 'Del');
				}
				gv.showEditor();
				gv.setFocus();
				gv.commit(true);
			}
		}

		gv.onCellButtonClicked = function(grid, index, column) {
			if (['activity_type',].includes(index.column)) {
				dlgActivityType.showModal();
			}
		};
		
		gv.onCellItemClicked = function (grid, index, clickData) {
			if (['__delete',].includes(index.column.name)) {
				if (index.dataRow >= 0) {
					dp.removeRow(index.dataRow);
				}
			} else if (['__insert',].includes(index.column.name)) {
				_fnInsert();
			}
		};

		const btnIns = document.getElementById('bt-insert');
		btnIns.addEventListener('click', _fnInsert);
	};

	function gridSetColumnTitle(y, m) {
		var i = 0;
		var _y = y;
		var _m = m;
		for(var col of gv.getColumns()) {
			if (col.name.startsWith('month') && !col.name.includes("_amt")) {
				col.header.text = "" +  _y + "/" + _m;
				_m ++;
				if (_m > 12) {
					_y ++;
					_m = 1;
				}
			}
		}
	}

	function doGrid() {
		grid();
		gridSetColumnTitle(2023, 4);
		initGridEtc();
		initFormEtc();
	}

	// 초기화 여러번 시도
	const gridTry = [200,300,400,500,750,1000,1250,1500,2000,2500,3000,3500,4000];
	for (const ms of gridTry) {
		setTimeout(function() {
			const logStr = 'doGrid[' + ms + 'ms]';
			console.log(logStr + ' : start');
			const g = document.querySelector('#gridContainer .rg-grid');
			if (g) {
				console.log(logStr + ' : already completed');
			} else {
				try {
					console.log(logStr + ' : try');
					doGrid();
					console.log(logStr + ' : done');
				} catch(e) {
					console.log(logStr + ' : fail');
				}
			}
		}, ms);
	}

}]]></client_script>
        <controller_as>c</controller_as>
        <css>@charset "UTF-8";&#13;
&#13;
@font-face {&#13;
    font-family: "Pretendard";&#13;
    font-weight: 100;&#13;
    font-style: normal;&#13;
    /*src: url("./fonts/pretendard/Pretendard-Thin.eot");&#13;
    src: url("./fonts/pretendard/Pretendard-Thin.eot?#iefix")&#13;
        format("embedded-opentype"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff2") format("woff2"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff") format("woff"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.ttf") format("truetype");*/&#13;
    font-display: swap;&#13;
  }&#13;
  @font-face {&#13;
    font-family: "Pretendard";&#13;
    font-weight: 200;&#13;
    font-style: normal;&#13;
    /*src: url("./fonts/pretendard/Pretendard-Thin.eot");&#13;
    src: url("./fonts/pretendard/Pretendard-Thin.eot?#iefix")&#13;
        format("embedded-opentype"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff2") format("woff2"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff") format("woff"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.ttf") format("truetype");*/&#13;
    font-display: swap;&#13;
  }&#13;
  @font-face {&#13;
    font-family: "Pretendard";&#13;
    font-weight: 300;&#13;
    font-style: normal;&#13;
    /*src: url("./fonts/pretendard/Pretendard-Thin.eot");&#13;
    src: url("./fonts/pretendard/Pretendard-Thin.eot?#iefix")&#13;
        format("embedded-opentype"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff2") format("woff2"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff") format("woff"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.ttf") format("truetype");*/&#13;
    font-display: swap;&#13;
  }&#13;
  @font-face {&#13;
    font-family: "Pretendard";&#13;
    font-weight: 400;&#13;
    font-style: normal;&#13;
    /*src: url("./fonts/pretendard/Pretendard-Thin.eot");&#13;
    src: url("./fonts/pretendard/Pretendard-Thin.eot?#iefix")&#13;
        format("embedded-opentype"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff2") format("woff2"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff") format("woff"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.ttf") format("truetype");*/&#13;
    font-display: swap;&#13;
  }&#13;
  @font-face {&#13;
    font-family: "Pretendard";&#13;
    font-weight: 500;&#13;
    font-style: normal;&#13;
    /*src: url("./fonts/pretendard/Pretendard-Thin.eot");&#13;
    src: url("./fonts/pretendard/Pretendard-Thin.eot?#iefix")&#13;
        format("embedded-opentype"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff2") format("woff2"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff") format("woff"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.ttf") format("truetype");*/&#13;
    font-display: swap;&#13;
  }&#13;
  @font-face {&#13;
    font-family: "Pretendard";&#13;
    font-weight: 600;&#13;
    font-style: normal;&#13;
    /*src: url("./fonts/pretendard/Pretendard-Thin.eot");&#13;
    src: url("./fonts/pretendard/Pretendard-Thin.eot?#iefix")&#13;
        format("embedded-opentype"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff2") format("woff2"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff") format("woff"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.ttf") format("truetype");*/&#13;
    font-display: swap;&#13;
  }&#13;
  @font-face {&#13;
    font-family: "Pretendard";&#13;
    font-weight: 700;&#13;
    font-style: normal;&#13;
    /*src: url("./fonts/pretendard/Pretendard-Bold.eot");&#13;
    src: url("./fonts/pretendard/Pretendard-Bold.eot?#iefix")&#13;
        format("embedded-opentype"),&#13;
      url("./fonts/pretendard/Pretendard-Bold.woff2") format("woff2"),&#13;
      url("./fonts/pretendard/Pretendard-Bold.woff") format("woff"),&#13;
      url("./fonts/pretendard/Pretendard-Bold.ttf") format("truetype");*/&#13;
    font-display: swap;&#13;
  }&#13;
  @font-face {&#13;
    font-family: "Pretendard";&#13;
    font-weight: 800;&#13;
    font-style: normal;&#13;
    /*src: url("./fonts/pretendard/Pretendard-Thin.eot");&#13;
    src: url("./fonts/pretendard/Pretendard-Thin.eot?#iefix")&#13;
        format("embedded-opentype"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff2") format("woff2"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff") format("woff"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.ttf") format("truetype");*/&#13;
    font-display: swap;&#13;
  }&#13;
  @font-face {&#13;
    font-family: "Pretendard";&#13;
    font-weight: 900;&#13;
    font-style: normal;&#13;
    /*src: url("./fonts/pretendard/Pretendard-Thin.eot");&#13;
    src: url("./fonts/pretendard/Pretendard-Thin.eot?#iefix")&#13;
        format("embedded-opentype"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff2") format("woff2"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.woff") format("woff"),&#13;
      url("./fonts/pretendard/Pretendard-Thin.ttf") format("truetype");*/&#13;
    font-display: swap;&#13;
  }&#13;
&#13;
@charset "UTF-8";&#13;
&#13;
&#13;
body {margin: 0; font-family: "Pretendard"; font-size: 14px; font-weight: 400; line-height: normal;}&#13;
&#13;
.blank {width: 100%; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); }&#13;
.yoko-container {margin: 40px auto 0; min-width: 1400px; max-width: 1600px; font-family: "Pretendard"; font-size: 14px; font-weight: 400; letter-spacing: 0;}&#13;
.yoko-container * {box-sizing: border-box;}&#13;
.yoko-container .yoko-content {display: flex; gap: 30px; flex-direction: column;}&#13;
.yoko-breadcrumb {color: #425D78;}&#13;
.yoko-title-btn-wrap {display: flex; justify-content: space-between; align-items: center; margin: 8px 0 25px 0;}&#13;
.yoko-title-btn-wrap .yoko-title {margin:0; color: #1C3956; font-family: "Pretendard";font-size: 24px;  font-style: normal;  font-weight: 700; line-height: normal;}&#13;
.yoko-title-btn-wrap .yoko-btn-wrap {display: flex; gap: 4px; margin-bottom: 0;}&#13;
&#13;
.yoko-btn-wrap {display: flex; justify-content: space-between; margin-bottom: 8px;}&#13;
.yoko-btn-wrap &gt; div {display: flex; gap: 4px;}&#13;
&#13;
.yoko-btn {cursor: pointer; border-radius: 4px; text-align: center; font-family: "Pretendard";font-size: 14px;  font-style: normal; font-weight: 400;  padding: 8px 20px 8px 20px;}&#13;
.yoko-btn:disabled  {border: 1px solid #AABBD1; color: #C8CED4;}&#13;
&#13;
.yoko-btn.yoko-btn-outline {background: #fff; border: 1px solid #EAEEF3;  color: #4B5E70; }&#13;
.yoko-btn.yoko-btn-outline:hover  {border: 1px solid #AABBD1;}&#13;
&#13;
.yoko-btn.yoko-btn-fill {background-color: #68B3FC; border: 1px solid #4193E2; color: #fff;}&#13;
.yoko-btn.yoko-btn-fill:hover  {background-color: #4193E2; border: 1px solid #4193E2;}&#13;
&#13;
.yoko-btn.yoko-btn-fill-red {background-color: #FF6D6D; border: 1px solid #E35050; color: #fff;}&#13;
.yoko-btn.yoko-btn-fill-red:hover  {background-color: #E35050; border: 1px solid #E35050;}&#13;
&#13;
&#13;
.yoko-btn-search {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(images/icon_search.png) no-repeat center center !important;}&#13;
.yoko-btn-search:hover {background-color: #eaeaea;}&#13;
.yoko-btn-add {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(images/icon_add.png) no-repeat center center !important;}&#13;
.yoko-btn-add:hover {background-color: #eaeaea;}&#13;
.yoko-btn-delete {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(images/icon_delete.png) no-repeat center center !important;}&#13;
.yoko-btn-delete:hover {background-color: #eaeaea;}&#13;
.yoko-btn-info-fill {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(images/icon_info_fill.png) no-repeat center center !important;}&#13;
.yoko-btn-info-fill:hover {background-color: #eaeaea;}&#13;
&#13;
.yoko-search-form {display: flex; gap: 30px; padding: 16px 30px; max-width: 1600px;  background-color: #F7F7F7; border: 1px solid #EDEDED; border-radius: 4px;}&#13;
&#13;
.yoko-form-group .yoko-btn {padding: 5px 10px 5px 10px;}&#13;
.yoko-search-form .yoko-form-group {display: flex; align-items: center; gap: 20px; /*width: 100%; min-width: 240px;*/}&#13;
.yoko-search-form .yoko-form-group label {width:130px; min-width: 130px; text-align: right;}&#13;
.yoko-search-form label {color: #4B5E70; font-family: 'Pretendard'; font-size: 13px; font-style: normal; font-weight: 500; line-height: normal;}&#13;
.yoko-search-form label.yoko-short {width: 80px; min-width: 80px;}&#13;
.yoko-search-form label.yoko-short-100 {width: 100px; min-width: 100px;}&#13;
.yoko-search-form label.yoko-short-110 {width: 110px; min-width: 110px;}&#13;
.yoko-search-form label.yoko-short-120 {width: 120px; min-width: 120px;}&#13;
.yoko-search-form label.yoko-short-130 {width: 130px; min-width: 130px;}&#13;
.yoko-search-form label.yoko-middle {width: 170px; min-width: 170px;}&#13;
.yoko-search-form label.yoko-long {width: 200px; min-width: 200px;}&#13;
.yoko-search-form label.yoko-btn-fill {background-color: #68B3FC;text-align: center; color: #fff; font-weight: 400;  padding: 5px 10px 6px 10px; border-radius: 4px;}&#13;
.yoko-search-form label.yoko-long.yoko-btn-fill {width: calc(200px - 10px);}&#13;
.yoko-search-form label.yoko-middle.yoko-btn-fill {width: calc(170px - 10px);}&#13;
&#13;
.yoko-search-form input,&#13;
.yoko-search-form select,&#13;
.yoko-search-form textarea {font-family: "Pretendard"; font-size: 13px; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); border-radius: 4px; border: 1px solid #E1E8F0; color: #7A8692;}&#13;
.yoko-search-form textarea {max-height: none; width: 100%; padding: 10px 10px 10px 10px; }&#13;
/* .yoko-search-form input[type=date] {width: 140px; } */&#13;
.yoko-search-form input[type=date]::-webkit-calendar-picker-indicator,&#13;
.yoko-search-form input[type=date]::-webkit-inner-spin-button {background: url('images/icon_calendar.png') no-repeat right center; }&#13;
&#13;
.yoko-search-form select {&#13;
  -moz-appearance:none; /* Firefox */&#13;
  -webkit-appearance:none; /* Safari and Chrome */&#13;
  appearance:none;&#13;
  background-image: url(images/icon_arrow_down.png);&#13;
  background-repeat: no-repeat;&#13;
  background-position-x: 100%;&#13;
  background-position-y: 1px;&#13;
  line-height: 15px;&#13;
  padding: 6px 30px 5px 10px;&#13;
&#13;
}&#13;
&#13;
.yoko-form-inline {display: flex;gap: 4px; width: calc(100% - 4px); align-items: center;}&#13;
.yoko-form-group-title {padding: 4px 0 8px 0; color: #1C3956; font-family: "Pretendard"; font-size: 14px;font-style: normal;font-weight: 700; line-height: normal;}&#13;
.yoko-form-group-hori  {display: flex;gap: 0; /*width:100%;*/}&#13;
.yoko-flex-responsive {display: flex; gap: 30px;}&#13;
.yoko-form-col {/*width: 100%;*/ display: flex; gap: 8px; flex-direction: column;}&#13;
.yoko-form-col.yoko-gap7 {gap:7px ;}&#13;
.yoko-col100 {width: 100%;}&#13;
.yoko-col60 {width: 60%;}&#13;
.yoko-col50 {width: 50%;}&#13;
.yoko-col40 {width: 40%}&#13;
.yoko-col35 {width: 35%}&#13;
.yoko-col30 {width: 30%}&#13;
.yoko-col20 {width: 20%} &#13;
.yoko-col15 {width: 15%} &#13;
.yoko-col10 {width: 10%} &#13;
&#13;
.yoko-search-form label.checkbox-label {text-align: left;width: auto; min-width: auto; cursor: pointer; display: flex; gap: 10px; align-items: center; justify-content: flex-start; color: #4B5E70; font-family: "Pretendard";  font-size: 13px; font-style: normal; font-weight: 400; line-height: normal;}&#13;
.custom-checkbox {position: relative;}&#13;
.custom-checkbox input { position: absolute;  opacity: 0;  cursor: pointer;  width: 18px; height: 18px; z-index: 1;}&#13;
.custom-checkbox .checkmark {position: relative;  top: 0;  left: 0;  display: block;  height: 18px;  width: 18px;  border-radius: 2px;border: 1px solid #DCE3EB;background: #FFF; overflow: hidden;}&#13;
.custom-checkbox:hover input ~ .checkmark {background-color: #FFF;}&#13;
.custom-checkbox input:checked ~ .checkmark {  background-color: #68B3FC;  border-radius: 2px;  border: 1px solid #68B3FC;}&#13;
.custom-checkbox .checkmark:after {  content: "";  position: absolute;  display: none;}&#13;
.custom-checkbox input:checked ~ .checkmark:after {  display: block;  left: 50%; top: 50%;  height: 16px;  width: 18px;  transform: translate(-50%, -50%);  background: url(images/icon_checkbox.png) no-repeat center center;}&#13;
&#13;
.custom-checkbox input:disabled ~ .checkmark {border: 1px solid #D1D1D1; background: #E2E2E2; cursor: not-allowed; }&#13;
.custom-checkbox input:checked:disabled ~ .checkmark {background:#E2E2E2 url(images/icon_checkbox_dis.png) no-repeat center center; }&#13;
.custom-checkbox input:disabled ~ .checkmark:after {background: url(images/icon_checkbox_dis.png) no-repeat center center;}&#13;
&#13;
.yoko-wid127 {width: 127px !important;}&#13;
.yoko-wid134 {width: 134px !important;}&#13;
.yoko-wid140 {width: 140px !important;}&#13;
.yoko-wid147 {width: 147px !important;}&#13;
.yoko-wid154 {width: 154px !important;}&#13;
.yoko-wid158 {width: 158px !important;}&#13;
.yoko-wid172 {width: 172px !important;}&#13;
.yoko-wid247 {width: 247px !important;}&#13;
.yoko-wid559 {width: 559px !important;}&#13;
.yoko-wid717 {width: 717px !important;}&#13;
/* .yoko-form-inline select {width: calc(100% - 28px);} */&#13;
.yoko-btn-spacing {width: calc(100% - 32px);}&#13;
&#13;
.yoko-search-form-wrapper {display: flex; gap: 20px; }&#13;
.yoko-search-form-wrap .yoko-search-form-heading {margin-top: 10px; margin-bottom: 5px; font-size: 16px; font-weight: 600; color: #1F3B55;}&#13;
&#13;
.yoko-governance-wrap .yoko-search-form button {width: 100%; min-width: 140px;}&#13;
.yoko-project-wrap .yoko-search-form input[type=text] {width: 100%;}&#13;
&#13;
.yoko-form-group-heading-wrap {display: flex; gap: 9px; justify-content: space-between; align-items: center;}&#13;
.yoko-form-group-heading {font-size: 14px; font-weight: 700; color: #1F3B55;}&#13;
.yoko-form-group-line {flex-grow: 1; height: 1px; background-color: #E1E1E1;}&#13;
.yoko-padding24 {padding: 24px;}&#13;
.yoko-grid-btn-wrap {display: flex; gap: 7px; justify-content: right;}&#13;
&#13;
.yoko-project-wrap {height: 255px;}&#13;
.yoko-project-wrap .yoko-search-form {height: 100%;}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/* 테이블 형식 */&#13;
.yoko-search-table input,&#13;
.yoko-search-table select,&#13;
.yoko-search-table textarea {font-family: "Pretendard"; font-size: 13px; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); border-radius: 4px; border: 1px solid #E1E8F0; color: #7A8692;}&#13;
.yoko-search-table textarea {max-height: none; width: 100%; padding: 10px 10px 10px 10px; }&#13;
.yoko-search-table input[type=date]::-webkit-calendar-picker-indicator,&#13;
.yoko-search-table input[type=date]::-webkit-inner-spin-button {background: url('images/icon_calendar.png') no-repeat right center; }&#13;
&#13;
.yoko-search-table select {&#13;
  -moz-appearance:none; /* Firefox */&#13;
  -webkit-appearance:none; /* Safari and Chrome */&#13;
  appearance:none;&#13;
  background-image: url(images/icon_arrow_down.png);&#13;
  background-repeat: no-repeat;&#13;
  background-position-x: 100%;&#13;
  background-position-y: 1px;&#13;
  line-height: 15px;&#13;
  padding: 6px 30px 5px 10px;&#13;
}&#13;
&#13;
.yoko-search-table-wrap {display: flex; gap: 0;}&#13;
.yoko-search-table tr.yoko-height-short {height: 39px;} &#13;
.yoko-search-table {border-spacing: 0; border-collapse: collapse;}&#13;
.yoko-search-table tr th {padding-right: 16px; text-align: right; background-color: #F7F7F7; border-top: 1px solid #EDEDED; border-bottom: 1px solid #EDEDED;}&#13;
.yoko-search-table tr th.yoko-bg-none {background-color: #fff;}&#13;
.yoko-search-table tr th label {color: #4B5E70; font-family: 'Pretendard'; font-size: 13px; font-style: normal; font-weight: 500; line-height: normal;}&#13;
.yoko-search-table tr td {padding: 5px 10px; border-top: 1px solid #EDEDED; border-bottom: 1px solid #EDEDED;}&#13;
.yoko-search-table tr td input {padding: 5px 10px; width: 100%; height: 100%;}&#13;
.yoko-search-table tr td input:disabled {border: 1px solid #E1E8F0; background: #F1F1F1;}&#13;
.yoko-search-table .yoko-form-inline {width: 100%;}&#13;
&#13;
.yoko-search-table-wrapper {display: flex; gap: 30px;}&#13;
.yoko-search-table-heading {margin-top: 12px; margin-bottom: 5px; font-size: 16px; font-weight: 600; color: #1F3B55;}&#13;
.yoko-table-heading {text-align: left !important; font-size: 14px; font-weight: 700; color: #1F3B55;}&#13;
.yoko-search-table.yoko-empty-col {flex: 1;}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
@media (max-width: 1719px) {&#13;
  .yoko-container {width: 1280px; min-width: 1280px;}&#13;
  .yoko-search-form {gap: 15px;}&#13;
  .yoko-flex-responsive {flex-direction: column; gap: 8px;}&#13;
  .yoko-search-form-company.yoko-col60 {width: 888px;}&#13;
  .yoko-search-form-company .yoko-padding24 {padding: 14px;}&#13;
  .yoko-search-form-company .yoko-search-form {gap: 7px;}&#13;
  .yoko-search-form-governance.yoko-col40 {width: 381px;}&#13;
  .yoko-project-wrap.yoko-col60 {width: 888px;}&#13;
  .yoko-project-wrap.yoko-col40 {width: 381px;}&#13;
  .yoko-project-wrap .yoko-search-form {padding: 18px;}&#13;
&#13;
  .yoko-form-amount-wrap label.yoko-short {width: 130px;}&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/*리얼그리드 수정*/&#13;
.rg-root {color: #4B5966 !important;  font-family: "Pretendard" !important;   font-size: 14px !important;  font-style: normal !important;  font-weight: 500 !important;  line-height: normal !important;}&#13;
.rg-grid {border: 1px solid #EAEEF3 !important;}&#13;
&#13;
.rg-header {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}&#13;
.rg-header .rg-table tr td {border-right: 1px solid #EAEEF3 !important; border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;} &#13;
.rg-head {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}&#13;
.rg-head .rg-table tr td { border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;}&#13;
&#13;
.rg-body,&#13;
.rg-fixed-body {color: #4B5966 !important;}&#13;
.rg-fixed-body .rg-data-row {background: #fff !important;}&#13;
.rg-body .rg-table tr td, &#13;
.rg-fixed-body .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important;}&#13;
.rg-rowbarcontainer .rg-table tr td {background-color: transparent !important;    border-right: 1px solid #EAEEF3 !important;    border-bottom: 1px solid #EAEEF3 !important;}&#13;
.rg-alternate-row {background: #fff !important;}&#13;
.rg-footer {color: #606060 !important; background: #FBFCFF  !important;}&#13;
.rg-footer .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}&#13;
.rg-foot {color: #606060 !important; background: #FBFCFF  !important;}&#13;
.rg-foot .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}&#13;
.rg-focus {border:  2px solid #68B3FC !important;}&#13;
.rg-header-focus {background: #E5F2FF !important; color: #6F7479 !important;}&#13;
.rg-header .rg-table tr td:hover {background: #68B3FC !important; color: #fff !important;}&#13;
.rg-header-select {background: rgb(232 248 240 / 50%) !important;}&#13;
.rg-selection { background: rgb(232 248 240 / 35%) !important; border: 1px solid #15BD66!important;}&#13;
.rg-editor-container { border: 2px solid #27C382 !important; }&#13;
&#13;
&#13;
&#13;
/* -------- MOONC ----------------------------------- */&#13;
.yoko-grid-btn-wrap-grid {display: flex; gap: 7px; justify-content: right; margin: 2px;}&#13;
.yoko-container .yoko-content {display: flex; gap: 5px; flex-direction: column;}&#13;
&#13;
&#13;
/* ----------------------------------------------- */&#13;
/* column style&#13;
/* ----------------------------------------------- */&#13;
.ni-rg-readonly {&#13;
  bbackground-color: hsla(0, 0%, 0%, 0.05) !important;&#13;
}&#13;
.ni-rg-required {&#13;
  background-color: hsla(0, 100%, 50%, 0.05) !important;&#13;
}&#13;
.ni-rg-readonly input[type=checkbox] {&#13;
  accent-color: hsl(24, 20%, 80%);&#13;
}&#13;
&#13;
/* ----------------------------------------------- */&#13;
/* align&#13;
/* ----------------------------------------------- */&#13;
&#13;
.ni-rg-align-left     { text-align: left !important; }&#13;
.ni-rg-align-right    { text-align: right !important; }&#13;
.ni-rg-align-center   { text-align: center !important; }&#13;
&#13;
.__ni-rg-col-wbs { color: transparent;}&#13;
.ni-rg-col-type-ref { __background: gray }&#13;
.ni-rg-col-type-input { background: yellow }&#13;
.ni-rg-col-button div { padding: 0px; }&#13;
&#13;
.ni-rg-height-0_____ { height : 0 !important; background-color: red; display: contents}   /* TODO : !!!*/&#13;
.ni-rg-height-0 { height : 0 !important; background-color: red; visibility: hidden}   /* TODO : !!!*/&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>Man Hour</description>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>budgetplanmngtwd03</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>budgetPlanMngtWd03</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

    data.key = $sp.getParameter("number");
    data.gridUrl = '/x_yergb_bpm_SorinGrid_BPM.do?id_q=' + data.number;

    if (data.key && input && input.readStatus) { // Update
        var grProject = new GlideRecord('x_yergb_bpm_project');
        grProject.addQuery('number', data.key);
        grProject.query();
        if (grProject.next()) {
            data.number = grProject.number.toString(); //Project Number
            data.name = grProject.name.toString(); //Project Name
            data.pm = grProject.getDisplayValue('pm'); //PM Name
            data.user = grProject.pm.user_name.toString(); // PM ID
            data.region = grProject.getDisplayValue('region'); // Region
            data.currency = grProject.getDisplayValue('currency'); // Currency
            data.data_type = grProject.getDisplayValue('u_data_type'); // Data Type
            data.budget_type = grProject.getDisplayValue('u_budget_type'); // Budget Type
            data.customer = grProject.customer.name.toString(); // CustomerName
            data.sys_id = grProject.sys_id;
        }
    }
    data.gridUrl = '/x_yergb_bpm_SorinGrid_prod.do?id_q=' + data.sys_id;
	
	
	
	
	
	
	function getGridData(item_sysid, basemonth) {
        var gritem = new GlideRecord("x_yergb_bpm_cost");
        gritem.orderBy("number");
        gritem.query();
        var tableinfo = [];
		var prevWbs = '';
        while (gritem.next()) {
			if (prevWbs && prevWbs !== gritem.wbs.getDisplayValue()) {
				tableinfo.push({
					'sys_id': null,
					'wbs': prevWbs,
					'__type': '입력',
					'activity_type': '***INPUT***',
					'__insert' : 'Ins',
				});
			}
			tableinfo.push({
				'sys_id': gritem.sys_id.getDisplayValue(),
				'wbs': gritem.wbs.getDisplayValue(),
				'__type': '참고',
				'in_charge': gritem.in_charge.getDisplayValue(),
				'activity_type': gritem.activity_type.getDisplayValue(),
				'activity_rate': parseInt(gritem.activity_rate.getDisplayValue().replace(/,/g, ''), 10) || 0,
				'total_amount': parseInt(gritem.total_amount.getDisplayValue(), 10) || 0,
				'month1': parseInt(gritem.month1.getDisplayValue(), 10) || 0,
				'month2': parseInt(gritem.month2.getDisplayValue(), 10) || 0,
				'month3': parseInt(gritem.month3.getDisplayValue(), 10) || 0,
				'month4': parseInt(gritem.month4.getDisplayValue(), 10) || 0,
				'month5': parseInt(gritem.month5.getDisplayValue(), 10) || 0,
				'month6': parseInt(gritem.month6.getDisplayValue(), 10) || 0,
				'month7': parseInt(gritem.month7.getDisplayValue(), 10) || 0,
				'month8': parseInt(gritem.month8.getDisplayValue(), 10) || 0,
				'month9': parseInt(gritem.month9.getDisplayValue(), 10) || 0,
				'month10': parseInt(gritem.month10.getDisplayValue(), 10) || 0,
				'month11': parseInt(gritem.month11.getDisplayValue(), 10) || 0,
				'month12': parseInt(gritem.month12.getDisplayValue(), 10) || 0,
				'month13': parseInt(gritem.month13.getDisplayValue(), 10) || 0,
				'month14': parseInt(gritem.month14.getDisplayValue(), 10) || 0,
				'month15': parseInt(gritem.month15.getDisplayValue(), 10) || 0,
				'month16': parseInt(gritem.month16.getDisplayValue(), 10) || 0,
				'month17': parseInt(gritem.month17.getDisplayValue(), 10) || 0,
				'month18': parseInt(gritem.month18.getDisplayValue(), 10) || 0,
				'beyond18': parseInt(gritem.beyond18.getDisplayValue(), 10) || 0,
				'__delete' : 'Del',
				'__insert' : 'Ins',
			});
			prevWbs = gritem.wbs.getDisplayValue();
        }
		if (prevWbs) {
			tableinfo.push({
				'sys_id': null,
				'wbs': prevWbs,
				'__type': '입력',
				'activity_type': '***INPUT***',
				'__insert' : 'Ins',
			});
		}
        return tableinfo;
	}

	data.gridData = getGridData();
	data.gridDataStr = JSON.stringify(data.gridData);
	
	
	
	
})();

function sf1(a, b) {
	
}]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>kms@sorin.co.kr</sys_created_by>
        <sys_created_on>2024-06-19 02:06:36</sys_created_on>
        <sys_id>85d793b683b20210856ceec0deaad31c</sys_id>
        <sys_mod_count>227</sys_mod_count>
        <sys_name>budgetPlanMngtWd03</sys_name>
        <sys_package display_value="BPM" source="x_yergb_bpm">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_package>
        <sys_policy/>
        <sys_scope display_value="BPM">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_scope>
        <sys_update_name>sp_widget_85d793b683b20210856ceec0deaad31c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-06-23 23:08:35</sys_updated_on>
        <template><![CDATA[  <link id="style-link" href="https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid-style.css" rel="stylesheet"/>
	<script defer type="text/javascript" src="https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid.2.7.2.min.js"> </script>


	<div class="yoko-container">
        <div class="yoko-breadcrumb">Home > Project Budget Plan for Man Hour</div>
        <div class="yoko-title-btn-wrap">
            <h1 class="yoko-title">Project Budget Plan for Man Hour</h1>
            <div class="yoko-btn-wrap">
            </div>
        </div>
        <div class="yoko-content">
            <div class="yoko-search-form-wrap">
                <div class="yoko-search-form">
                    <div class="yoko-form-col">
                        <div class="yoko-form-group">
                            <label for="project_number" class="yoko-short-100">Project Number</label>
                            <input type="text" name="project_number" value={{data.number}} placeholder="" disabled class="yoko-wid247">
                        </div>
                        <div class="yoko-form-group">
                            <label for="customer" class="yoko-short-100">Customer</label>
                            <input type="text" name="customer" value={{data.customer}} placeholder="" disabled class="yoko-wid247">
                        </div>
                        <div class="yoko-form-group">
                            <label for="pm_name" class="yoko-short-100">PM Name</label>
                            <div class="yoko-form-inline yoko-wid247">
                                <input type="text" name="pm_number" value={{data.user}} placeholder="" disabled class="yoko-col40">
                                <input type="text" name="pm_name" value={{data.pm}} placeholder="" disabled class="yoko-col60">
                            </div>
                        </div>
                        <div class="yoko-form-group">
                            <label for="project_name" class="yoko-short-100">Project Name</label>
                            <input type="text" name="project_name" value={{data.name}} placeholder="" disabled class="yoko-wid247">
                        </div>  
                    </div>

                    <div class="yoko-form-col">
                        <div class="yoko-form-group">
                            <label for="data_type" class="yoko-short">Data type</label>
                            <input type="text" name="data_type" value={{data.data_type}} placeholder="" disabled class="yoko-wid140">
                        </div>
                        <div class="yoko-form-group">
                            <label for="budget_type" class="yoko-short">Budget type</label>
                            <input type="text" name="budget_type" value={{data.budget_type}} placeholder="" disabled class="yoko-wid140">
                        </div>
                    </div>
                    <div class="yoko-form-col"> 
                        <div class="yoko-form-group">
                            <label for="region" class="yoko-short">Region</label>
                            <input type="text" name="region" value={{data.region}} placeholder="" disabled class="yoko-wid140">
                        </div>
                        <div class="yoko-form-group">
                            <label for="currency" class="yoko-short">Currency</label>
                            <input type="text" name="currency" value={{data.currency}} placeholder="" disabled class="yoko-wid140">
                        </div>
                    </div>
                    
                </div>
            </div>
          	<div class="yoko-grid-btn-wrap-grid">
               <button id="bt-add" disabled>Add</button>
               <button id="bt-insert">Insert</button>
               <button id="bt-delete" disabled>Delete</button>
               <button id="bt-save" disabled>Save</button>
            </div>
            <div class="out" id='gridContainer' style="width:100%; height: 450px;"></div>
          	<input id="" type="hidden" value="{{data.gridUrl}}">
          	<input id="gridData" type="hidden" value="{{data.gridData}}">
          	<input id="" type="hidden" value="{{data.gridDataStr}}">
          
        </div>
    </div>

<dialog id="dlgActivityType" class="ni-backdrop" style="min-width:max(50vw, 300px);" >
  <form method="dialog">
    <header>
      <h3>Header</h3>
      <button class="" ng-click="closeDlgActivityType()"> Close </button>
    </header>
    <article class="" style="min-height: min(85vh, 300px); ">
        Activity Type 가져오는 팝업구현<br>
        Activity Type 가져오는 팝업구현<br>
        Activity Type 가져오는 팝업구현<br>
        Activity Type 가져오는 팝업구현<br>
        <p><p>
      <h3>Sample</h3>
      	<div class="yoko-form-col">
          <div class="yoko-form-group">
            <label for="data_type" class="yoko-short">activity type</label>
            <input type="text" id="moonc_at_data1" name="at_data1" value="TEST:ACT-TYPE" placeholder="" class="yoko-wid140">
          </div>
          <div class="yoko-form-group">
            <label for="budget_type" class="yoko-short">in charge</label>
            <input type="text" id="moonc_at_data2" name="at_data2" value="TEST:in-charge" placeholder="" class="yoko-wid140">
          </div>
        </div>
      	<button ng-click="setActivityType()"> Set </button>
       
    </article>
  </form>
</dialog>

<script defer>
  //<link id="style-link" href="https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid-style.css" rel="stylesheet"/>
	//<script defer type="text/javascript" src="https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid.2.7.2.min.js"> </---script>

  //<link id="style-link" href="https://cdn.wooritech.com/realgrid/realgrid.2.8.2/realgrid-style.css" rel="stylesheet"/>
  //<script defer type="text/javascript" src="https://cdn.wooritech.com/realgrid/realgrid.2.8.2/realgrid.2.8.2.min.js"></---script>

	
  
  console.log('Html Template --------------------------');

  console.log('mc-1');
  var realGrid2Lic = 'upVcPE+wPOmtLjqyBIh9RkM/nBOseBrflwxYpzGZyYl7CwX6ItpP+4PNdCICED0lJKTWpoOpNFnkmhX0fXje4w7n7/ElITcursW4T4GvNxc=';
 	//debugger;
  var gv;
  var dp;
  
  const gvFields = [
    'sys_id',
    '__type',
    'wbs',
    'in_charge',
    'activity_type',
    {
      fieldName: "activity_rate",
      dataType: "number",
    },
    {
      fieldName: "rate_hour",
      dataType: "number",
      valueExpression: "values['activity_rate'] * values['total_amount']"
    },
    {
      fieldName: "total_amount",
      dataType: "number",
    },
    {
      fieldName: "month1",
      dataType: "number"
    },
    {
      fieldName: "month1_amt",
      dataType: "number",
      valueExpression: "values['activity_rate'] * values['month1']"
    },
    {
      fieldName: "month2",
      dataType: "number"
    },
    {
      fieldName: "month3",
      dataType: "number"
    },
    {
      fieldName: "month4",
      dataType: "number"
    },
    {
      fieldName: "month5",
      dataType: "number"
    },
    {
      fieldName: "month6",
      dataType: "number"
    },
    {
      fieldName: "month7",
      dataType: "number"
    },
    {
      fieldName: "month8",
      dataType: "number"
    },
    {
      fieldName: "month9",
      dataType: "number"
    },
    {
      fieldName: "month10",
      dataType: "number"
    },
    {
      fieldName: "month11",
      dataType: "number"
    },
    {
      fieldName: "month12",
      dataType: "number"
    },
    {
      fieldName: "month13",
      dataType: "number"
    },
    {
      fieldName: "month14",
      dataType: "number"
    },
    {
      fieldName: "month15",
      dataType: "number"
    },
    {
      fieldName: "month16",
      dataType: "number"
    },
    {
      fieldName: "month17",
      dataType: "number"
    },
    {
      fieldName: "month18",
      dataType: "number"
    },
    {
      fieldName: "beyond18",
      dataType: "number"
    }
  ];

  const gvColumns = [
    {
      "name": "sys_id",
      "fieldName": "sys_id",
      "type": "data",
      "width": 30,
      "header": {
        "text": "sysid"
      },
      "visible" : false,
    },
    {
      "name": "__type",
      "fieldName": "__type",
      "type": "data",
      "width": 40, 
      "header": {
        "text": "TYPE"
      },
      //"visible" : false,
    },
    {
      "name": "wbs",
      "fieldName": "wbs",
      "type": "data",
      "width": 10,
      "header": {
        "text": "WBS"
      },
      "groupFooter" :{ "text": " ", "expression" : "max", },
      //mergeRule: {criteria: "value"},
			"readOnly": true,
      "editable": false,
      styleName: "ni-rg-wbs",
    },
    {
      "name": "in_charge",
      "fieldName": "in_charge",
      "type": "data",
      "width": 150,
      "header": {
        "text": "In Charge"
      },
      "styleName": "ni-rg-align-left ni-rg-readonly",
      "readOnly": true,
      "editable": false,
    },
    {
      "name": "activity_type",
      "fieldName": "activity_type",
      "type": "data",
      "width": 120,
      "header": {
        "text": "Activity Type"
      },
      groupFooter: {
        "styleName": "ni-rg-align-center",
        "numberFormat" : "#,###",
        valueCallback : function (grid, column, groupFooterIndex, group, value) {
          if (group.level == 2) {
            if (group.groupValue == "참고") {
              return " --- SUM ---";
            } else {
              return null;
            }
          }
        }
      },
      "styleName": "ni-rg-align-left ni-rg-readonly",
      "readOnly": true,
      "editable": false,
    },
    {
      "name": "activity_rate",
      "fieldName": "activity_rate",
      "type": "number",
      "numberFormat": "#,##0",
      "width": 80,
      "header": {
        "text": "Activity Rate"
      },
      "styleName": "ni-rg-align-right ni-rg-readonly",
      "readOnly": true,
      "editable": false,
    },
    {
      "name": "rate_hour",
      "fieldName": "rate_hour",
      "width": 100,
      "numberFormat": "#,##0",
      "header": {
        "text": "Rate * Hour",
      },
      "footer": {
        "expression": "sum",
        "numberFormat": "#,##0"
      },
      "styleName": "ni-rg-align-right ni-rg-readonly",
      "readOnly": true,
      "editable": false,
    },
    {
      "name": "total_amount",
      "fieldName": "total_amount",
      "type": "number",
      "numberFormat": "#,##0",
      "width": 60,
      "header": {
        "text": "Total(H)"
      },
      "groupFooter" :{ "text": "", "expression" : "sum", "numberFormat" : "#,###", "styleName": "ni-rg-align-right"},
      "styleName": "ni-rg-align-right ni-rg-readonly",
      "readOnly": true,
      "editable": false,
    },
    {
      "name": "month1",
      "fieldName": "month1",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 1"
      },
      groupFooter: {
        "numberFormat" : "#,###",
        valueCallback : function (grid, column, groupFooterIndex, group, value) {
          //debugger;
          const gm = grid.getGroupModel(group.index+1);
          const d = grid.getGroupSummary(gm, "month1_amt", true).sum;
          return d;
        },
      },
    },
    {
      "name": "month1_amt",
      "fieldName": "month1_amt",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 1 AMT"
      },
      visible: false,
    },
    {
      "name": "month2",
      "fieldName": "month2",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 2"
      }
    },
    {
      "name": "month3",
      "fieldName": "month3",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 3"
      }
    },
    {
      "name": "month4",
      "fieldName": "month4",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 4"
      }
    },
    {
      "name": "month5",
      "fieldName": "month5",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 5"
      }
    },
    {
      "name": "month6",
      "fieldName": "month6",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 6"
      }
    },
    {
      "name": "month7",
      "fieldName": "month7",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 7"
      }
    },
    {
      "name": "month8",
      "fieldName": "month8",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 8"
      }
    },
    {
      "name": "month9",
      "fieldName": "month9",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 9"
      }
    },
    {
      "name": "month10",
      "fieldName": "month10",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 10"
      }
    },
    {
      "name": "month11",
      "fieldName": "month11",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 11"
      }
    },
    {
      "name": "month12",
      "fieldName": "month12",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 12"
      }
    },
    {
      "name": "month13",
      "fieldName": "month13",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 13"
      }
    },
    {
      "name": "month14",
      "fieldName": "month14",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 14"
      }
    },
    {
      "name": "month15",
      "fieldName": "month15",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 15"
      }
    },
    {
      "name": "month16",
      "fieldName": "month16",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 16"
      }
    },
    {
      "name": "month17",
      "fieldName": "month17",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 17"
      }
    },
    {
      "name": "month18",
      "fieldName": "month18",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month 18"
      }
    },
    {
      "name": "beyond18",
      "fieldName": "beyond18",
      "numberFormat": "#,##0",
      "type": "number",
      "width": 100,
      "header": {
        "text": "Beyond 18"
      }
    }
  ];

  const gvLayouts = [
    'sys_id',
    'wbs',
    '__type',
    //'in_charge',
    'activity_type',
    'activity_rate',
    'rate_hour',
    'total_amount',
    'month1',
    'month1_amt',
    'month2',
    'month3',
    'month4',
    'month5',
    'month6',
    'month7',
    'month8',
    'month9',
    'month10',
    'month11',
    'month12',
    'month13',
    'month14',
    'month15',
    'month16',
    'month17',
    'month18',
    'beyond18'
  ];

  // amt 2 ~ 18 생성
  for (let i = 2; i <= 18 ; i++) {
    const amt_nm = "month" + i + "_amt";
    gvFields.push({
      fieldName: amt_nm,
      dataType: "number",
      valueExpression: "values['activity_rate'] * values['month" + i + "']",
    });
    gvColumns.push({
      "name": amt_nm,
      "fieldName": amt_nm,
      "numberFormat": "#,##0",
      "type": "number",
      "width": 60,
      "header": {
        "text": "Month " + i + " AMT"
      },
    });
    //gvLayouts.push(amt_nm);  //for debugging
  }
  
  for(const col of gvColumns) {
    if (col.name.startsWith('month')) {
      col.styleName = col.styleName || '' + ' ni-rg-align-right';
      col.numberFormat = "#,###";
      col.width = 100;
      if (col.name.includes("_amt")) {
        col.groupFooters = [{ "text": " ", "expression" : "sum", "numberFormat" : "#,###" }];
      } else {
        col.groupFooters = [{
          numberFormat : "#,###",
          valueCallback : function (grid, column, groupFooterIndex, group, value) {
            //debugger;
            //  const gm = grid.getGroupModel(group.index+1);
            //  const d = grid.getGroupSummary(gm, col.name + "_amt", true).sum;
            //  return d;
            //if (group.level == 2) {
            //  if (group.groupValue == "참고") {
                const gm = grid.getGroupModel(group.index);
              	const v = grid.getGroupSummary(gm, col.name + "_amt", true).sum;
                return v;
            //  } else {
            //    return null;
            //  }
            //}
          }
        }];
      }
    }
  }

  function initGrid() {
		console.log(RealGrid);
    gv = new RealGrid.GridView('gridContainer');
    dp = new RealGrid.LocalDataProvider();

    dp.setFields(gvFields);
    gv.setDataSource(dp);
    gv.setColumns(gvColumns);
    gv.setColumnLayout(gvLayouts);
    
    gv.footers.visible = true;
    gv.commitEditor();
    gv.undoable = true;

    //gv.columnByName("sys_id").visible =  false;
    gv.editOptions.commitWhenLeave = true;
    gv.setFixedOptions({
      colCount: 7, 
      rightCount: 1
    });
    
    dp.softDeleting = false;

    gv.groupBy(["wbs", "__type"], false);

    gv.setRowGroup({ 
      //expandedAdornments : 'footer', 
      //collapsedAdornments : 'footer',
      //headerStatement: '$' + "{" + "groupValue" +  "}",
      
      expanderVisibility: 'none',
      indentVisible: false,
      mergeMode: true,
      createFooterCallback: function(grid, group) { 
        if (group.level == 1) {
          return false;
        }
        if (group.descendantCount > 1) return true;
      },
      
    });
    
    
    //gv.rowGroup.setFooters([{styleCallback: function(grid, itemIndex, footerIndex) {
    //  var dataRow = grid.getGroupModel(itemIndex, true).firstDataItem.dataRow;
    //  var value = grid.getDataSource().getValue(dataRow, "__type");
    //  return value && value.indexOf("입력") >= 0 ? "ni-rg-height-0" : "";
    //}
		//}]);
    
    gv.checkBar.visible = false;
    gv.stateBar.visible = false;
    
    
    const eleData = document.getElementById('gridData');
    const gridData = JSON.parse(eleData.value);
    dp.setRows(gridData);

	}
	
  setTimeout( () => {

    console.log('mc-setTimeout');
  	//initGrid();
  }, 2000);
  
</script>]]></template>
    </sp_widget>
</record_update>
