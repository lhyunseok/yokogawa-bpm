<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $location) {

    /* widget controller */
    var c = this;
    c.data.readStatus = true;

    // Function to get URL parameters
    /////////////////////////////////////// 파라메터 체크
    c.getUrlParameter = function(param) {
        return $location.search()[param];
    };
    // Function to handle click event
    $scope.handleClick = function() {
        if (c.data.quotation) {
            window.location.href = "/sp?id=epic_01_ui_quote&table=x_yergb_bpm_quotation&sys_id=" + c.data.quotation_sys_id; // Redirect to the URL
        }
    };
    // Example: Retrieve a specific parameter
    var paramValue = c.getUrlParameter('sys_id');
    console.log('Value of yourParameterName:', paramValue);
    c.data.paramValue = paramValue;

    // Call the server script
    c.server.update().then(function(response) {
        // Handle the server response if needed
        console.log('Server response:', response);
    });
    /////////////////////////////////////정체성 체크
    console.log("c 가 뭐야")
    console.log(c)

    //////////////////////////////////// 클릭하고 데이터 넘기기
    $scope.clickSave = function() {
        // Get the value from the input field using ng-model
        //var inputValue = c.estOiAmount;
        c.estimated_order_date = c.data.estimated_order_date




        if (paramValue) { //이거 업데이트임
            //alert("UPDTATETE")
            c.data.updateFlag = true;

            console.log(c.data.estimated_order_date)
            c.server.update().then(function(response) {

                if (response.data && response.data.result) {
                    //alert(response.data.result);
                    location.reload();

                }

                location.reload();
            });

        } else { // 이거 새로 넣는거임
            alert("eawgheawgew")
            c.data.insertFlag = true;
            c.server.update().then(function(response) {
                console.log("-----")
                console.log(response)
                console.log(c.data.redirect_sys_id)
                window.location.href = "/sp?id=epic_01_ui_rfp&table=x_yergb_bpm_rfq_entry&sys_id=" + c.data.redirect_sys_id;
                //
                // Optionally handle the server response if needed
                if (response.data && response.data.result) {
                    //alert(response.data.result);
                    console.log("----wgeaegrjiohgrew;jioj;iogewt;jio-")
                }
            });
        }


        // Assign the value to c.data for server-side processing
        //c.data.estOiAmount = inputValue;

        // Call the server script


        // Display the value in an //alert (for client-side confirmation)
        ////alert('The entered amount is: ' + inputValue);
    };
    /////////////////////////////////   Assess 버튼 클릭
    $scope.clickAssess = function() {
        //alert("ASSESS?")
        // Get the value from the input field using ng-model

        //alert(c.data.quotation_type)
        // Call the server script to update the state
        if (c.data.quotation_type == 'undefined') {
            alert("Mandatory is empty");
            //document.querySelector('.yoko-search-form-wrap.yoko-project-wrap.yoko-col40 .yoko-search-form .').classList.add('highlight-form');

        } else {
            c.data.newState = 2;
            c.data.buttunflag = true;
            c.server.update().then(function(response) {
                // Handle the server response if needed
                console.log('Server response:', response);
                location.reload();
            });
        }


    };

    $scope.clickRequest = function() {
        //alert("REQUEST?")
        // Get the value from the input field using ng-model

        if (!c.data.reason_code || !c.data.request_due_date || !c.data.remark) {
            alert("Mandatory is empty");
            //document.querySelector('.yoko-search-form-wrap.yoko-project-wrap.yoko-col40 .yoko-search-form .').classList.add('highlight-form');
            const reasonCode = document.querySelector('input[name="reason_code"]');
            reasonCode.classList.add('highlight-form');
        } else {
            c.data.updateFlag = true;
            c.data.newState = 3;
            c.data.buttunflag = true;
            c.server.update().then(function(response) {
                // Handle the server response if needed
                console.log('Server response:', response);
                location.reload();
            });
        }

    }

    // Call the server script to update the state





    $scope.clickSubmit = function() {
        //alert("SUBMIT?")
        // Get the value from the input field using ng-model
        

        // Call the server script to update the state
				//alert(c.data.quotation_state != "Completed")
      if (c.data.quotation_state != "Completed") {
            alert("Quotation is Not Completed");
            //document.querySelector('.yoko-search-form-wrap.yoko-project-wrap.yoko-col40 .yoko-search-form .').classList.add('highlight-form');

        } else {
            c.data.newState = 5;
        		c.data.buttunflag = true;
            c.server.update().then(function(response) {
                // Handle the server response if needed
                console.log('Server response:', response);
                location.reload();
            });
        }


    };

    $scope.clickInProgress = function() {
        //alert("IN PROGRESS?")
        // Get the value from the input field using ng-model
        c.data.newState = 4;
        c.data.buttunflag = true;

        // Call the server script to update the state

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            location.reload();
        });

        location.reload();
    };

    $scope.clickAccept = function() {
        //alert("ACCEPT?")
        // Get the value from the input field using ng-model
        c.data.newState = 4;
        c.data.buttunflag = true;

        // Call the server script to update the state

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            location.reload();
        });

    };
    $scope.clickOIReport = function() {
        //alert("OI Report?")
        // Get the value from the input field using ng-model
        c.data.newState = 9;
        c.data.buttunflag = true;

        // Call the server script to update the state

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            location.reload();
        });

    };

    $scope.clickReturn = function() {
        //alert("RETURN?")
        // Get the value from the input field using ng-model
        c.data.newState = -5;
        c.data.buttunflag = true;

        // Call the server script to update the state

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            location.reload();
        });

    };
    $scope.clickCancel = function() {
        //alert("CANCEL?")
        // Get the value from the input field using ng-model
        c.data.newState = -8;
        c.data.buttunflag = true;

        // Call the server script to update the state

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            location.reload();

        });

    };

    //////////////////////////////////  모달창 관련한 로직

    // Get the modal
    var modal = document.getElementById("modalTest");

    // Get the button that opens the modal
    var btn = document.getElementById("openModalButton");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // Get the close button
    var closeButton = document.getElementById("closeModalButton");

    // When the user clicks the button, open the modal

    // When the user clicks on <span> (x), close the modal
    span.onclick = function() {
        modal.style.display = "none";
        c.data.refer_end_user_modal = false
        c.data.refer_requester_modal = false
        c.data.refer_quotation_modal = false
        c.data.refer_assignment_group_modal = false
        c.data.refer_assigned_to_modal = false
        c.data.refer_contract_modal = false
        c.data.refer_contract_country_modal = false

        console.log(c.data.items)
        c.data.items = ""
        c.data.modalTitle = ""
        console.log("일해라 핫산, 왜 접시를 닦지 않았지?")

        console.log(c.data.items)
    }

    // When the user clicks on close button, close the modal
    closeButton.onclick = function() {
        modal.style.display = "none";
        c.data.refer_end_user_modal = false
        c.data.refer_requester_modal = false
        c.data.refer_quotation_modal = false
        c.data.refer_assignment_group_modal = false
        c.data.refer_assigned_to_modal = false
        c.data.refer_contract_modal = false
        c.data.refer_contract_country_modal = false
        console.log(c.data.items)
        c.data.items = ""
        c.data.modalTitle = ""
        console.log("일해라 핫산, 왜 접시를 닦지 않았지?")

        console.log(c.data.items)
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
            c.data.refer_end_user_modal = false
            c.data.refer_requester_modal = false
            c.data.refer_quotation_modal = false
            c.data.refer_assignment_group_modal = false
            c.data.refer_assigned_to_modal = false
            c.data.refer_contract_modal = false
            c.data.refer_contract_country_modal = false
            console.log(c.data.items)
            c.data.items = ""
            c.data.modalTitle = ""
            console.log("일해라 핫산, 왜 접시를 닦지 않았지?")

            console.log(c.data.items)

        }
    }




    $scope.clickRequester = function(sys_id) {
        c.data.refer_requester_modal = true;
        c.data.readStatus = false;

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            // Function to log the sys_id
            c.logSysId = function(number, sys_id, code) {
                //alert('Selected sys_id: ' + sys_id + ' ' + number);
                c.data.requester = number
                c.data.requester_sys_id = sys_id

            };

        });


        var modal = document.getElementById("modalTest");
        modal.style.display = "block";
    };

    $scope.clickQuotation = function(sys_id) {
        c.data.refer_quotation_modal = true;
        c.data.readStatus = false;

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            // Function to log the sys_id
            c.logSysId = function(number, sys_id) {
                //alert('Selected sys_id: ' + sys_id + ' ' + number);
                c.data.end_user = number
                c.data.end_user_code = sys_id
            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };

    $scope.clickAssignmentGroup = function(sys_id) {
        c.data.refer_assignment_group_modal = true;
        c.data.readStatus = false;

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            // Function to log the sys_id
            c.logSysId = function(number, sys_id) {
                //alert('Selected sys_id: ' + sys_id + ' ' + number);
                c.data.assignment_group = number
                c.data.assignment_group_sys_id = sys_id
            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };

    $scope.clickAssignedTo = function(sys_id) {
        c.data.refer_assigned_to_modal = true;
        c.data.readStatus = false;

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            // Function to log the sys_id
            c.logSysId = function(number, sys_id) {
                //alert('Selected sys_id: ' + sys_id + ' ' + number);
                c.data.assigned_to = number
                c.data.assigned_to_sys_id = sys_id
            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };
    $scope.clickEndUser = function() {
        c.data.refer_end_user_modal = true;
        c.data.readStatus = false;

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            // Function to log the sys_id
        });
        //debugger
        c.logSysId = function(number, sys_id, code) {
            //alert('Selected sys_id: ' + sys_id + ' ' + number);
            c.data.end_user = number
            c.data.end_user_sys_id = sys_id
            c.data.end_user_code = code
        };
        var modal = document.getElementById("modalTest");
        modal.style.display = "block";
    };

    $scope.clickContract = function() {
        c.data.refer_contract_modal = true;
        c.data.readStatus = false;

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            // Function to log the sys_id
            c.logSysId = function(number, sys_id, code) {
                //alert('Selected sys_id: ' + sys_id + ' ' + number);
                c.data.contract = number
                c.data.contract_sys_id = sys_id
                c.data.contract_code = code
            };

        });
        //debugger
        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };

    $scope.clickContractCountry = function(sys_id) {
        c.data.refer_contract_country_modal = true;
        c.data.readStatus = false;

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            // Function to log the sys_id
            c.logSysId = function(number, sys_id) {
                //alert('Selected sys_id: ' + sys_id + ' ' + number);
                c.data.contract_country = number
                c.data.contract_country_sys_id = sys_id
            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };


    // In your controller
    $scope.$watch('c.data.contract', function(newVal, oldVal) {
        $scope.isContractDummyDisabled = !!newVal; // Set to true if contract has a value, otherwise false
    });

    // Initialize the variable when the controller is first loaded
    $scope.isContractDummyDisabled = !!$scope.c.data.contract;


    // In your controller
    $scope.$watch('c.data.end_user', function(newVal, oldVal) {
        if (!newVal) {
            $scope.c.data.end_user_code = '';
        }
    });



    // In your controller
    $scope.$watch('c.data.contract', function(newVal, oldVal) {
        if (!newVal) {
            $scope.c.data.contract_code = '';
        }
    });




}]]></client_script>
        <controller_as>c</controller_as>
        <css>@charset "UTF-8";

body {margin: 0; font-family: "Pretendard"; font-size: 14px; font-weight: 400; line-height: normal;}

.blank {width: 100%; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); }
.yoko-container {margin: 40px auto 0; min-width: 1000px; max-width: 1600px; font-family: "Pretendard"; font-size: 14px; font-weight: 400; letter-spacing: 0;}
.yoko-container * {box-sizing: border-box;}
.yoko-container .yoko-content {display: flex; gap: 0px; flex-direction: column;}
.yoko-breadcrumb {color: #425D78;}
.yoko-title-btn-wrap {display: flex; justify-content: space-between; align-items: center; margin: 8px 0 25px 0;}
.yoko-title-btn-wrap .yoko-title {margin:0; color: #1C3956; font-family: "Pretendard";font-size: 24px;  font-style: normal;  font-weight: 700; line-height: normal;}
.yoko-title-btn-wrap .yoko-btn-wrap {display: flex; gap: 4px; margin-bottom: 0;}

.yoko-btn-wrap {display: flex; justify-content: space-between; margin-bottom: 8px;}
.yoko-btn-wrap &gt; div {display: flex; gap: 4px;}

.yoko-btn {cursor: pointer; border-radius: 4px; text-align: center; font-family: "Pretendard";font-size: 14px;  font-style: normal; font-weight: 400;  padding: 8px 20px 8px 20px;}
.yoko-btn:disabled  {border: 1px solid #AABBD1; color: #C8CED4;}

.yoko-btn.yoko-btn-outline {background: #fff; border: 1px solid #EAEEF3;  color: #4B5E70; }
.yoko-btn.yoko-btn-outline:hover  {border: 1px solid #AABBD1;}

.yoko-btn.yoko-btn-fill {background-color: #68B3FC; border: 1px solid #4193E2; color: #fff;}
.yoko-btn.yoko-btn-fill:hover  {background-color: #4193E2; border: 1px solid #4193E2;}

.yoko-btn.yoko-btn-fill-red {background-color: #FF6D6D; border: 1px solid #E35050; color: #fff;}
.yoko-btn.yoko-btn-fill-red:hover  {background-color: #E35050; border: 1px solid #E35050;}

.yoko-btn.yoko-btn-fill-accept {
    background-color: #7DBEFF; /* Slightly more saturated pastel blue background color */
    border: 1px solid #5C9DD8; /* Slightly darker blue border */
    color: #fff; /* White text color */
}
.yoko-btn.yoko-btn-fill-accept:hover {
    background-color: #5C9DD8; /* Darker blue on hover */
    border: 1px solid #5C9DD8; /* Same border color as the hover background */
}

.yoko-btn.yoko-btn-fill-cancel {
    background-color: #FF9999; /* Slightly more saturated pastel red background color */
    border: 1px solid #D47878; /* Slightly darker red border */
    color: #fff; /* White text color */
}
.yoko-btn.yoko-btn-fill-cancel:hover {
    background-color: #D47878; /* Darker red on hover */
    border: 1px solid #D47878; /* Same border color as the hover background */
}


.yoko-btn-search {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_search.png) no-repeat center center !important;}
.yoko-btn-search:hover {background-color: #eaeaea;}

.yoko-search-form {display: flex; gap: 30px; padding: 16px 30px; max-width: 1600px;  background-color: #F7F7F7; border: 1px solid #EDEDED; border-radius: 4px;}

.yoko-form-group .yoko-btn {padding: 5px 10px 5px 10px;}
.yoko-search-form .yoko-form-group {display: flex; align-items: center; gap: 20px; /*width: 100%; min-width: 240px;*/}
.yoko-search-form .yoko-form-group label {width:130px; min-width: 130px; text-align: right;}
.yoko-search-form label {color: #4B5E70; font-family: 'Pretendard'; font-size: 13px; font-style: normal; font-weight: 500; line-height: normal;}
.yoko-search-form label.yoko-short {width: 80px; min-width: 80px;}
.yoko-search-form label.yoko-short-110 {width: 110px; min-width: 110px;}
.yoko-search-form label.yoko-short-120 {width: 120px; min-width: 120px;}
.yoko-search-form label.yoko-middle {width: 170px; min-width: 170px;}
.yoko-search-form label.yoko-long {width: 200px; min-width: 200px;}
.yoko-search-form label.yoko-btn-fill {background-color: #68B3FC;text-align: center; color: #fff; font-weight: 400;  padding: 5px 10px 6px 10px; border-radius: 4px;}
.yoko-search-form label.yoko-long.yoko-btn-fill {width: calc(200px - 10px);}
.yoko-search-form label.yoko-middle.yoko-btn-fill {width: calc(170px - 10px);}

.yoko-search-form input,
.yoko-search-form select,
.yoko-search-form textarea {font-family: "Pretendard"; font-size: 13px; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); border-radius: 4px; border: 1px solid #E1E8F0; color: #7A8692;}
.yoko-search-form textarea {max-height: none; width: 100%; padding: 10px 10px 10px 10px; }
/* .yoko-search-form input[type=date] {width: 140px; } */
.yoko-search-form input[type=date]::-webkit-calendar-picker-indicator,
.yoko-search-form input[type=date]::-webkit-inner-spin-button {background: url('icon_calendar.png') no-repeat right center; }

.yoko-search-form select {
  -moz-appearance:none; /* Firefox */
  -webkit-appearance:none; /* Safari and Chrome */
  appearance:none;
  background-image: url(icon_arrow_down.png);
  background-repeat: no-repeat;
  background-position-x: 100%;
  background-position-y: 1px;
  line-height: 15px;
  padding: 6px 30px 5px 10px;

}

.yoko-form-inline {display: flex;gap: 4px; width: calc(100% - 4px); align-items: center;}
.yoko-form-group-title {padding: 4px 0 8px 0; color: #1C3956; font-family: "Pretendard"; font-size: 14px;font-style: normal;font-weight: 700; line-height: normal;}
.yoko-form-group-hori  {display: flex;gap: 0; /*width:100%;*/}
.yoko-flex-responsive {display: flex; gap: 30px;}
.yoko-form-col {/*width: 100%;*/ display: flex; gap: 4px; flex-direction: column;}
.yoko-form-col.yoko-gap7 {gap:7px ;}
.yoko-col100 {width: 100%;}
.yoko-col60 {width: 60%;}
.yoko-col50 {width: 50%;}
.yoko-col40 {width: 40%}
.yoko-col35 {width: 35%}
.yoko-col30 {width: 30%}
.yoko-col20 {width: 20%} 
.yoko-col15 {width: 15%} 
.yoko-col10 {width: 10%} 

.yoko-search-form label.checkbox-label {text-align: left;width: auto; min-width: auto; cursor: pointer; display: flex; gap: 10px; align-items: center; justify-content: flex-start; color: #4B5E70; font-family: "Pretendard";  font-size: 13px; font-style: normal; font-weight: 400; line-height: normal;}
.custom-checkbox {position: relative;}
.custom-checkbox input { position: absolute;  opacity: 0;  cursor: pointer;  width: 18px; height: 18px;}
.custom-checkbox .checkmark {position: relative;  top: 0;  left: 0;  display: block;  height: 18px;  width: 18px;  border-radius: 2px;border: 1px solid #DCE3EB;background: #FFF; overflow: hidden;}
.custom-checkbox:hover input ~ .checkmark {background-color: #FFF;}
.custom-checkbox input:checked ~ .checkmark {  background-color: #68B3FC;  border-radius: 2px;  border: 1px solid #68B3FC;}
.custom-checkbox .checkmark:after {  content: "";  position: absolute;  display: none;}
.custom-checkbox input:checked ~ .checkmark:after {  display: block;  left: 50%; top: 50%;  height: 16px;  width: 18px;  transform: translate(-50%, -50%);  background: url(icon_checkbox.png) no-repeat center center;}

.custom-checkbox input:disabled ~ .checkmark {border: 1px solid #D1D1D1; background: #E2E2E2; cursor: not-allowed; }
.custom-checkbox input:checked:disabled ~ .checkmark {background:#E2E2E2 url(images/icon_checkbox_dis.png) no-repeat center center; }
.custom-checkbox input:disabled ~ .checkmark:after {background: url(images/icon_checkbox_dis.png) no-repeat center center;}

.yoko-wid140 {width: 140px !important;}
.yoko-wid172 {width: 172px !important;}
/* .yoko-form-inline select {width: calc(100% - 28px);} */
.yoko-btn-spacing {width: calc(100% - 32px);}

.yoko-search-form-wrapper {display: flex; gap: 20px; }
.yoko-search-form-wrap .yoko-search-form-heading {margin-top: 10px; margin-bottom: 5px; font-size: 16px; font-weight: 600; color: #1F3B55;}

.yoko-governance-wrap .yoko-search-form button {width: 100%; min-width: 140px;}
.yoko-project-wrap .yoko-search-form input[type=text] {width: 100%;}

.yoko-form-group-heading-wrap {display: flex; gap: 9px; justify-content: space-between; align-items: center;}
.yoko-form-group-heading {font-size: 14px; font-weight: 700; color: #1F3B55;}
.yoko-form-group-line {flex-grow: 1; height: 1px; background-color: #E1E1E1;}
.yoko-padding24 {padding: 24px;}

.yoko-project-wrap {height: 245px;}
.yoko-project-wrap .yoko-search-form {height: 100%;}

@media (max-width: 1719px) {
  .yoko-container {width: 1280px; min-width: 1280px;}
  .yoko-search-form {gap: 15px;}
  .yoko-flex-responsive {flex-direction: column; gap: 7px;}
  .yoko-search-form-company.yoko-col60 {width: 888px;}
  .yoko-search-form-company .yoko-padding24 {padding: 14px;}
  .yoko-search-form-company .yoko-search-form {gap: 7px;}
  .yoko-search-form-governance.yoko-col40 {width: 381px;}
  .yoko-project-wrap.yoko-col60 {width: 888px;}
  .yoko-project-wrap.yoko-col40 {width: 381px;}
  .yoko-project-wrap .yoko-search-form {padding: 18px;}
}



.yoko-btn-quotation {

  border: 1px solid #E1E8F0;

  padding: 0 10px; /* 좌우 패딩 추가 */

  width : 140px;

  min-width: 30px;

  height: 28px;

  background-color: #fff;

  color: #000;

  font-size: 14px;

  display: inline-flex; /* 중앙 배치를 위한 플렉스박스 사용 */

  align-items: center; /* 수직 중앙 배치 */

  justify-content: center; /* 수평 중앙 배치 */

  cursor: pointer;

}




/*리얼그리드 수정*/
.rg-root {color: #4B5966 !important;  font-family: "Pretendard" !important;   font-size: 14px !important;  font-style: normal !important;  font-weight: 500 !important;  line-height: normal !important;}
.rg-grid {border: 1px solid #EAEEF3 !important;}

.rg-header {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}
.rg-header .rg-table tr td {border-right: 1px solid #EAEEF3 !important; border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;} 
.rg-head {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}
.rg-head .rg-table tr td { border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;}

.rg-body,
.rg-fixed-body {color: #4B5966 !important;}
.rg-body .rg-table tr td, 
.rg-fixed-body .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important;}
.rg-rowbarcontainer .rg-table tr td {background-color: transparent !important;    border-right: 1px solid #EAEEF3 !important;    border-bottom: 1px solid #EAEEF3 !important;}
.rg-alternate-row {background: #fff !important;}
.rg-footer {color: #606060 !important; background: #FBFCFF  !important;}
.rg-footer .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}
.rg-foot {color: #606060 !important; background: #FBFCFF  !important;}
.rg-foot .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}
.rg-focus {border:  2px solid #68B3FC !important;}
.rg-header-focus {background: #E5F2FF !important; color: #6F7479 !important;}
.rg-header .rg-table tr td:hover {background: #68B3FC !important; color: #fff !important;}
.rg-header-select {background: rgb(232 248 240 / 50%) !important;}
.rg-selection { background: rgb(232 248 240 / 35%) !important; border: 1px solid #15BD66!important;}
.rg-editor-container { border: 2px solid #27C382 !important; }



 .modal {
    display: none;
    position: fixed;
    z-index: 1;
    padding-top: 60px;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgb(0,0,0);
    background-color: rgba(0,0,0,0.4);
  }

  .modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
  }

  .close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
  }

  .close:hover,
  .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
  }


/*  
  TEST Modal CSS
 */
.modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 3; /* Sit on top */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}
.modal-content {
  background-color: #fefefe;
  //margin: 5% auto; /* 15% from the top and centered */
  padding: 20px;
  border: 1px solid #888;
  width: 50%; /* Reduced width to 60% */
}
.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}
.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
.container {
  list-style-type: none;
  padding: 0;
}
.container li {
  padding: 8px 0;
  border-bottom: 1px solid #ddd;
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;
  box-sizing: border-box; /* Include padding and border in element's total width and height */
  width: 100%; /* Ensure the list items take the full width of the container */
}
.highlight-form {
  border: 2px solid red;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>portal_function</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>portal_function</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    /* populate the 'data' object */
    /* e.g., data.table = $sp.getValue('table'); */
    var userName = gs.getUser().getDisplayName()
    var userName_sys_id = gs.getUser().getID();
    console.log("0000000000000000000000")
    console.log(userName)
    console.log(userName_sys_id)
    // Pass the user's name to the client script
    data.requester = userName;
    data.requester_sys_id = userName_sys_id;
    data.showUpdate = false;
    data.sys_id = $sp.getParameter("sys_id");
    data.showSave = true
	data.showQuotationTypeSelect = true;
    //////gs.addInfoMessage(data.sys_id)
    // Select 가져올건데
    var grS = new GlideRecord('x_yergb_bpm_rfq_entry'); // Replace with your table name
    grS.initialize();
    var choices = grS.getElement('quotation_type').getChoices(); // Replace with your field name
    var choicesValue = grS.getElement('quotation_type').getChoiceValue(); // Replace with your field name
    console.log("11111111")
    console.log(choices)
    console.log(choicesValue)
    // Prepare the choices for the client script
    var choiceList = [];
    for (var i = 0; i < choices.length; i++) {
        var choice = choices[i];
        console.log(choice)
        choiceList.push(choice)
        //choiceList.push({
        //   value: choice[i].getValue(),
        //  label: choice[i].getLabel()
        //});
    }

    data.choices = choiceList;

    ////gs.addInfoMessage(data.sys_id)
    if (data.sys_id && input && input.readStatus) { // 이거 업데이트다
        //gs.addErrorMessage("읽어오는중")
        var grI = new GlideRecord('x_yergb_bpm_rfq_entry');

        var requester
        var requester_sys_id
        var number
        var request_date
        var complete_date
        var estimated_oi_amount
        var estimated_order_date
        var estimated_delivery_date
        var quotation
        var quotation_sys_id
        var quotation_type
        var quotation_due_date
        var yoda_opportunity_no
        var assignment_group
        var assigned_to
        var end_user
        var end_user_code
        var contract
        var contract_code
        var contract_name
        var contract_address
        var contract_country
        var project_title
        var project_detail
        var caution
        var reason_code
        var request_due_date
        var remark
        ///////////// 여기서는 아마 뿌려주는 로직을 할듯
        grI.addQuery('sys_id', data.sys_id);
        grI.query();
        while (grI.next()) {
            requester = grI.requester.name.toString();
            ////gs.addErrorMessage(requester)
            requester_sys_id = grI.requester.toString();
            //quotation_number = grI.quotation_number.toString();
            ////gs.addInfoMessage(quotation_number)
            //quotation_sysId = grI.quotation_sysId.toString();
            number = grI.number.toString()
            request_date = grI.request_date.toString()

            complete_date = grI.complete_date.toString()
            estimated_oi_amount = grI.estimated_oi_amount.toString()
            estimated_order_date = grI.estimated_order_date.toString()
            estimated_delivery_date = grI.estimated_delivery_date.toString()
            //quotation = grI.quotation.toString()
            //quotation_sys_id  = grI.quotation_sys_id.toString()
            quotation_type = grI.quotation_type.toString()
            quotation_due_date = grI.quotation_due_date.toString()
            yoda_opportunity_no = grI.yoda_opportunity_no.toString()
            assignment_group = grI.assignment_group.name.toString()

            assigned_to = grI.assigned_to.name.toString()
            end_user = grI.end_user.name.toString();
            end_user_sys_id = grI.end_user.toString()
            end_user_code = grI.end_user.u_company_code.toString()
            contract = grI.contract.name.toString()
            contract_sys_id = grI.contract.toString()
            contract_code = grI.contract.u_company_code.toString()


            contract_name = grI.contract_name.toString()
            contract_address = grI.contract_address.toString()
            //contract_country = grI.contract_country.toString()
            project_title = grI.project_title.toString()
            project_detail = grI.project_detail.toString()
            caution = grI.caution.toString()
            reason_code = grI.reason_code.toString()
            request_due_date = grI.request_due_date.toString()
            remark = grI.remark.toString()
				    quotation_type_label = getChoiceLabel('x_yergb_bpm_rfq_entry', 'quotation_type', quotation_type);
						//gs.addInfoMessage(quotation_type_label)
        }
        //data.qNum = quotation_number
        //data.q_sys_id = quotation_sysId
        data.requester_sys_id = requester_sys_id
        data.requester = requester
        data.number = number
        data.request_date = request_date
        data.complete_date = complete_date
        data.estimated_oi_amount = estimated_oi_amount
        data.estimated_order_date = estimated_order_date
        data.estimated_delivery_date = estimated_delivery_date
        //.quotation = quotation
        //data.quotation_sys_id = quotation_sys_id
        data.quotation_type = quotation_type
        data.quotation_type_label = quotation_type_label
        data.quotation_due_date = quotation_due_date
        data.yoda_opportunity_no = yoda_opportunity_no
        data.assignment_group = assignment_group
        data.assigned_to = assigned_to


        data.end_user = end_user
        data.end_user_code = end_user_code
        data.end_user_sys_id = end_user_sys_id
        data.contract = contract
        data.contract_code = contract_code
        data.contract_sys_id = contract_sys_id


        data.contract_name = contract_name
        data.contract_address = contract_address
        data.contract_country = contract_country
        data.project_title = project_title
        data.project_detail = project_detail
        data.caution = caution
        data.reason_code = reason_code
        data.request_due_date = request_due_date
        data.remark = remark
        //////gs.addInfoMessage(typeof data.q_number)
        ////gs.addInfoMessage("aefawefweafw +"+ data.number)
        var grQ = new GlideRecord('x_yergb_bpm_quotation');
        var quotation
        var quotation_sys_id
        var quotation_state
        ///////////// 여기서는 아마 뿌려주는 로직을 할듯
        grQ.addQuery('rfq_entry', data.sys_id);
        grQ.query();
        while (grQ.next()) {
            quotation = grQ.number.toString();
            quotation_sys_id = grQ.sys_id.toString();
						quotation_state = grQ.state.getDisplayValue().toString();
        }
        data.quotation = quotation
        data.quotation_sys_id = quotation_sys_id
        data.quotation_state = quotation_state
			
			
			
			//user 의 company를 찾고
			//그 컴패니의 currency의 display value를 가져와야 하는군
			
		  	var grU = new GlideRecord('sys_user');
     		grU.get(data.requester_sys_id)
				grUCompany = grU.company
				var grC = new GlideRecord ('core_company')
				if (grC.get(grUCompany)){
		    var currency = grC.u_currency.code
				gs.addInfoMessage(currency)
		  	data.currency =  grC.u_currency.code.toString()
					
				}
		}




    //////////////// 파라미터 있는지 체크 하는거다. 
    if (input && input.paramValue) {
        var paramValue = input.paramValue;
        ////gs.addErrorMessage('Record created with param value: ' + paramValue);

        var gr = new GlideRecord('x_yergb_bpm_rfq_entry');

        ///////////// 여기서는 아마 뿌려주는 로직을 할듯
        gr.get(input.paramValue);
        data.state = gr.state.getDisplayValue();

        if (gr.state.getDisplayValue() == "New") {
            data.showAssess = true;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true
            data.showOIReport = false;
					data.showQuotationTypeSelect = true;
					data.showQuotationType = false;
        } else if (gr.state.getDisplayValue() == "Assess") {
            data.showAssess = false;
            data.showRequest = true;
            data.showSubmit = false;
            data.showInProgress = true;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true
            data.showOIReport = false;
					data.showQuotationTypeSelect = false;
					data.showQuotationType = true;
        } else if (gr.state.getDisplayValue() == "Requested") {
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = true;
            data.showReturn = true;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true
            data.showOIReport = false;
					data.showQuotationTypeSelect = false;
					data.showQuotationType = true;
        } else if (gr.state.getDisplayValue() == "Returned") {
            data.showAssess = true;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = true;
            data.showUpdate = true;
            data.showSave = true
            data.showOIReport = false;
					data.showQuotationTypeSelect = false;
					data.showQuotationType = true;
        } else if (gr.state.getDisplayValue() == "In Progress") {
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = true;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true
            data.showOIReport = false;
					data.showQuotationTypeSelect = false;
					data.showQuotationType = true;
            //가져와서 일단 말 박아주는거 해야함
            //Return the results to the client script
        } else if (gr.state.getDisplayValue() == "Submitted") {
					  data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true;
            data.showOIReport = true;
					data.showQuotationTypeSelect = false;
					data.showQuotationType = true;
            //가져와서 일단 말 박아주는거 해야함
            //Return the results to the client script
        }else if (gr.state.getDisplayValue() == "Completed") {
					  data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = false;
            data.showSave = false;
            data.showOIReport = false;
					data.showQuotationTypeSelect = false;
					data.showQuotationType = true;
            //가져와서 일단 말 박아주는거 해야함
            //Return the results to the client script
        }
        /////////// 시스아이디 있고, 상태가 new 일때만

        if (gr.requester != gs.getUser().getID()) {

            //gs.addInfoMessage("gr.requester 달러")
            //gs.addInfoMessage(gr.requester)
            //gs.addInfoMessage(gs.getUser().getID())
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = false;
            data.showSave = false
					data.showQuotationTypeSelect = false;
					data.showQuotationType = true;
        }



        /////////// 파라미터 있는 상태에서 만약에 내가 ass를 누름
        if (input.buttunflag) {
            ////gs.addInfoMessage("눌렸다 눌렸어")

            var grA = new GlideRecord('x_yergb_bpm_rfq_entry');

            ///////////// 여기서는 아마 뿌려주는 로직을 할듯
            grA.get(input.paramValue);
            grA.setValue('state', input.newState)
            ////gs.addErrorMessage(input.newState);
            grA.update()
            ////gs.addInfoMessage("바뀐다 바뀐다")


        }


    }


    //////////////////////// 버튼 눌렀을때
    if (input && input.insertFlag) { // 없으면 오류 뜸, 둘다 있어야 함.
        console.log("여기 되던가?")
        console.log(input)
        // Retrieve the input value from the client script
        //gs.addInfoMessage("집에 왔니")
        /*
        var requester = input.requester_sys_id
        var complete_date = input.complete_date
        var estimated_oi_amount = input.estimated_oi_amount
        var estimated_order_date = input.estimated_order_date
        var estimated_delivery_date = input.estimated_delivery_date
        var quotation_due_date = input.quotation_due_date
        var quotation_type = input.quotation_type
        var yoda_opportunity_no = input.yoda_opportunity_no
        var assignment_group = input.assignment_group_sys_id
        var assigned_to = input.assigned_to_sys_id
        var end_user = input.end_user_sys_id
        var contract = input.contract_sys_id
        var contract_name = input.contract_name
        var contract_address = input.contract_address
        var contract_country = input.contract_country
		var project_title = input.project_title
        var project_detail = getValueOrEmptyString(input.project_detail);
        var caution = input.caution
        var reason_code = input.reason_code
        var request_due_date = input.request_due_date
        var remark = input.remark
		*/
        var requester = input.requester_sys_id
        var request_date = input.request_date
        var complete_date = input.complete_date
        var estimated_oi_amount = getValueOrEmptyString(input.estimated_oi_amount)
        var estimated_order_date = input.estimated_order_date
        var estimated_delivery_date = input.estimated_delivery_date
        var quotation_due_date = input.quotation_due_date
        var quotation_type = input.quotation_type
        var yoda_opportunity_no = getValueOrEmptyString(input.yoda_opportunity_no)
        var assignment_group = input.assignment_group_sys_id
        var assigned_to = input.assigned_to_sys_id
        var end_user = input.end_user_sys_id
        var contract = input.contract_sys_id
        var contract_name = getValueOrEmptyString(input.contract_name)
        var contract_address = getValueOrEmptyString(input.contract_address)
        var contract_country = input.contract_country
        var project_title = getValueOrEmptyString(input.project_title)
        var project_detail = getValueOrEmptyString(input.project_detail);
        var caution = getValueOrEmptyString(input.caution)
        var reason_code = getValueOrEmptyString(input.reason_code)
        var request_due_date = input.request_due_date
        var remark = getValueOrEmptyString(input.remark)
        
				gs.addErrorMessage("=-=-=-=-=-=-=-")
gs.addErrorMessage(quotation_type)


        //gs.addInfoMessage(estimated_oi_amount)
        // Create a new record in the specified table 
        var gr = new GlideRecord('x_yergb_bpm_rfq_entry'); // Replace 'your_table_name' with the actual table name
        gr.initialize();
        gr.setValue('requester', requester)
        gr.setValue('request_date', request_date)
        gr.setValue('complete_date', complete_date)
        gr.setValue('estimated_oi_amount', estimated_oi_amount)
        gr.setValue('estimated_order_date', estimated_order_date)
        gr.setValue('estimated_delivery_date', estimated_delivery_date)
        gr.setValue('quotation_due_date', quotation_due_date)
        gr.setValue('yoda_opportunity_no', yoda_opportunity_no)
        gr.setValue('quotation_type', quotation_type)
        gr.setValue('assignment_group', assignment_group)
        gr.setValue('assigned_to', assigned_to)
        gr.setValue('end_user', end_user)
        gr.setValue('contract', contract)
        gr.setValue('contract_name', contract_name)
        gr.setValue('contract_address', contract_address)
        gr.setValue('contract_country', contract_country)
        gr.setValue('project_title', project_title)
        gr.setValue('project_detail', project_detail)
        gr.setValue('caution', caution)
        gr.setValue('reason_code', reason_code)
        gr.setValue('request_due_date', request_due_date)
        gr.setValue('remark', remark)
        gr.insert();
        //gs.addInfoMessage("집에 ㄷ멓ㄹㅈㄷㅁ횆돟ㅁㅈㄷ호")


        //////gs.addErrorMessage('성공일거야 아마도' + estOiAmount);
        data.redirect_sys_id = gr.getUniqueValue();;
        // Return a response to the client script
    } else if (input && input.updateFlag) {
        //var estOiAmount = input.estOiAmount;

        //gs.addInfoMessage("집에가자")
        //gs.addInfoMessage(input.quotation_type)
        var requester = input.requester_sys_id

        var request_date = input.request_date
        var complete_date = input.complete_date
        var estimated_oi_amount = getValueOrEmptyString(input.estimated_oi_amount)
        var estimated_order_date = input.estimated_order_date
        var estimated_delivery_date = input.estimated_delivery_date
        var quotation_due_date = input.quotation_due_date
        var quotation_type = input.quotation_type
        var yoda_opportunity_no = getValueOrEmptyString(input.yoda_opportunity_no)
        var assignment_group = input.assignment_group_sys_id
        var assigned_to = input.assigned_to_sys_id
        var end_user = input.end_user_sys_id
        var contract = input.contract_sys_id
        var contract_name = getValueOrEmptyString(input.contract_name)
        var contract_address = getValueOrEmptyString(input.contract_address)
        var contract_country = input.contract_country
        var project_title = getValueOrEmptyString(input.project_title)
        var project_detail = getValueOrEmptyString(input.project_detail);
        var caution = getValueOrEmptyString(input.caution)
        var reason_code = getValueOrEmptyString(input.reason_code)
        var request_due_date = input.request_due_date
        var remark = getValueOrEmptyString(input.remark)
        var grU = new GlideRecord('x_yergb_bpm_rfq_entry');
        //gs.addInfoMessage(estimated_oi_amount)

        ///////////// 여기서는 아마 뿌려주는 로직을 할듯
        grU.get(input.paramValue);
        grU.setValue('requester', requester)
        grU.setValue('request_date', request_date)
        grU.setValue('complete_date', complete_date)
        grU.setValue('estimated_oi_amount', estimated_oi_amount)
        grU.setValue('estimated_order_date', estimated_order_date)
        grU.setValue('estimated_delivery_date', estimated_delivery_date)
        grU.setValue('quotation_due_date', quotation_due_date)
        grU.setValue('quotation_type', quotation_type)

        grU.setValue('yoda_opportunity_no', yoda_opportunity_no)
        grU.setValue('assignment_group', assignment_group)
        grU.setValue('assigned_to', assigned_to)
        grU.setValue('end_user', end_user)
        grU.setValue('contract', contract)
        grU.setValue('contract_name', contract_name)
        grU.setValue('contract_address', contract_address)
        grU.setValue('contract_country', contract_country)
        grU.setValue('project_title', project_title)
        grU.setValue('project_detail', project_detail)
        grU.setValue('caution', caution)
        grU.setValue('reason_code', reason_code)
        grU.setValue('request_due_date', request_due_date)
        grU.setValue('remark', remark)
        grU.update()
        //gs.addInfoMessage("집에가자??!@#@!$")

    }


    if (input && input.refer_requester_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('sys_user');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('sys_id')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "REQUESTER"
    }

    if (input && input.refer_quotation_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('x_yergb_bpm_quotation');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('sys_id')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "QUOTATION"

    }

    if (input && input.refer_assignment_group_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('sys_user_group');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('description')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "ASSIGNMENT GROUP"

    }

    if (input && input.refer_assigned_to_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('sys_user');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('email')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "ASSIGNED TO"

    }
    if (input && input.refer_end_user_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('core_company');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('u_company_code'),
                column4: gr.getValue('city')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "END USER"
        //data.modalType = "end_user"
    }

    if (input && input.refer_contract_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('core_company');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('u_company_code'),
                column4: gr.getValue('city')

            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "CONTRACT COMPANY"
        //data.modalType = "contact"

    }

    if (input && input.refer_contract_country_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('core_country');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('sys_id')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "COUNTRY"

    }

    function getValueOrEmptyString(value) {
        return typeof value === 'undefined' ? '' : value;
    }

function getChoiceLabel(table, element, value) {
    var gr = new GlideRecord('sys_choice');
    gr.addQuery('name', table); // 테이블 이름
    gr.addQuery('element', element); // 필드 이름
    gr.addQuery('value', value); // 선택 값
    gr.query();

    if (gr.next()) {
        return gr.getValue('label'); // 선택 필드의 보이는 값 반환
    } else {
        return 'none';
    }
}
	
	
	
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>lhyunseok</sys_created_by>
        <sys_created_on>2024-06-12 06:12:28</sys_created_on>
        <sys_id>d6fc4838933282104d95f55a7bba10e5</sys_id>
        <sys_mod_count>809</sys_mod_count>
        <sys_name>portal_function</sys_name>
        <sys_package display_value="BPM" source="x_yergb_bpm">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_package>
        <sys_policy/>
        <sys_scope display_value="BPM">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_scope>
        <sys_update_name>sp_widget_d6fc4838933282104d95f55a7bba10e5</sys_update_name>
        <sys_updated_by>lhyunseok</sys_updated_by>
        <sys_updated_on>2024-06-18 11:36:49</sys_updated_on>
        <template><![CDATA[<div>
    <div class="yoko-container">
        <div class="yoko-breadcrumb">Home > RFQ Entry & Quotation Request</div>
        <div class="yoko-title-btn-wrap">
            <h1 class="yoko-title">RFQ Entry & Quotation Request</h1>
            <div class="yoko-btn-wrap">
                <button class="yoko-btn yoko-btn-fill-red" ng-if="data.showCancel" ng-click="clickCancel()">Cancel</button>
                <button class="yoko-btn yoko-btn-fill-red" ng-if="data.showReturn" ng-click="clickReturn()">Return</button>
                <button class="yoko-btn yoko-btn-fill-accept" ng-if="data.showAccept" ng-click="clickAccept()">Accept</button>
                <button class="yoko-btn yoko-btn-outline" ng-if="data.showOIReport" ng-click="clickOIReport()">OI Report</button>
                <button class="yoko-btn yoko-btn-outline" ng-if="data.showInProgress" ng-click="clickInProgress()">In Progress</button>
                <button class="yoko-btn yoko-btn-outline" ng-if="data.showSubmit" ng-click="clickSubmit()">Submit Quote</button>
                <button class="yoko-btn yoko-btn-outline" ng-if="data.showRequest" ng-click="clickRequest()">Request Quote</button>
                <button class="yoko-btn yoko-btn-outline" id="AssessButton" ng-if="data.showAssess" ng-click="clickAssess()">Assess</button>
                <button class="yoko-btn yoko-btn-outline" ng-if="data.showUpdate">Update</button>
                <button class="yoko-btn yoko-btn-fill" ng-if="data.showSave" id="saveButton" ng-click="clickSave()">Save</button>
            </div>
        </div>
        <div class="yoko-content">
            <div class="yoko-search-form-wrap">
                <div class="yoko-search-form">
                    <div class="yoko-flex-responsive">
                        <div class="yoko-form-col">
                            <div class="yoko-form-group">
                                <label for="request_no" class="yoko-short">${Number}</label>
                                <input type="text" name="request_no" value="" placeholder="" ng-model="c.data.number" disabled>

                            </div>
                            <div class="yoko-form-group">
                                <label for="requester_no" class="yoko-short">Requester</label>
                                <div class="yoko-form-inline">
                                    <input type="text" name="requester_no" ng-model="c.data.requester" disabled class="yoko-wid140">
                                    <input type="text" name="requester_no_sys_id" value="" disabled class="yoko-wid140" ng-model="c.data.requester_sys_id" ng-style="{'display': 'none'}">
                                    <!-- button type="button" class="yoko-btn yoko-btn-search" id ="openModalButton"  ng-click="clickRequester()"  ></button-->
                                </div>
                            </div>
                        </div>

                        <div class="yoko-form-col">
                            <div class="yoko-form-group">
                                <label for="state" class="yoko-short">State</label>
                                <input type="text" name="state" value={{data.state}} placeholder="New" class="yoko-wid140" disabled>
                            </div>
                            <div class="yoko-form-group">
                                <label for="req_date" class="yoko-short">Req. Date</label>
                                <input type="date" name="req_date" class="yoko-wid140" value={{data.request_date}} ng-model="c.data.request_date">
                            </div>
                            <div class="yoko-form-group">
                                <label for="comp_date" class="yoko-short">Comp. Date</label>
                                <input type="date" name="comp_date" class="yoko-wid140" value={{data.complete_date}} ng-model="c.data.complete_date">
                            </div>
                        </div>
                    </div>

                    <div class="yoko-form-col">
                        <div class="yoko-form-group">
                            <label for="type" class="yoko-short-110">Currency</label>
                            <input type="text" name="currency" ng-model="c.data.currency" class="yoko-wid140" disabled>

                        </div>
                        <div class="yoko-form-group">
                            <label for="est_oi_amount" class="yoko-short-110">Est OI Amount</label>
                            <input type="text" name="est_oi_amount" value="" placeholder="" class="yoko-wid140" ng-model="c.data.estimated_oi_amount">
                        </div>

                        <div class="yoko-form-group">
                            <label for="orderdate" class="yoko-short-110">Est. Order Date</label>
                            <input type="date" name="orderdate" id="orderdate" class="yoko-wid140" value={{data.estimated_order_date}} ng-model="c.data.estimated_order_date">
                        </div>
                        <div class="yoko-form-group">
                            <label for="deliverydate" class="yoko-short-110">Est. Delivery Date</label>
                            <input type="date" name="deliverydate" id="deliverydate" class="yoko-wid140" value={{data.estimated_delivery_date}} ng-model="c.data.estimated_delivery_date">
                        </div>
                    </div>
                    <div class="yoko-form-col">
                        <div class="yoko-form-group">
                            <label for="quotation">Quotation</label>
                            <div class="yoko-form-inline">

                                <!-- input type="text" name="quotation" value={{data.qNum}} placeholder="" class="yoko-wid140" disable -->
                                <button class="yoko-btn-quotation" ng-click="handleClick()">
                                    {{c.data.quotation}}
                                </button> <input type="text" name="quotation_sysId" ng-model="c.data.quotation_sys_id" placeholder="" class="yoko-wid140" ng-click="handleClick()" ng-style="{'display': 'none'}" readonly>

                                <!--button type="button" class="yoko-btn yoko-btn-search" ng-click="clickQuotation()"></button-->
                            </div>
                        </div>
                        <div class="yoko-form-group">
                            <label for="type">Quotation type</label>
                            <div class="yoko-form-inline">
                                <select id="type" name="type" class="yoko-wid140" ng-model="c.data.quotation_type" ng-options="option as option for option in c.data.choices" ng-if="data.showQuotationTypeSelect">
                                    <option value="">Select Type</option>
                                </select>
                                <input type="text" name="quotation_type" ng-model="c.data.quotation_type_label" class="yoko-wid140" style="font-size:12px" ng-if="data.showQuotationType">
                            </div>
                        </div>

                        <div class="yoko-form-group">
                            <label for="quotation_state">Quotation State</label>
                            <input type="text" name="quotation_state"  class="yoko-wid140" ng-model="c.data.quotation_state" disabled>
                        </div>


                        <div class="yoko-form-group">
                            <label for="quotationdate">Quotation Due Date</label>
                            <input type="date" name="quotation_date" id="quotation_date" class="yoko-wid140" value={{data.quotation_due_date}} ng-model="c.data.quotation_due_date">
                        </div>
                    </div>
                    <div class="yoko-form-col">
                        <div class="yoko-form-group">
                            <label for="oppt_no" class="yoko-short-110">YODA Oppt. No</label>
                            <input type="text" name="oppt_no" value="" placeholder="" class="yoko-wid172" ng-model="c.data.yoda_opportunity_no">
                        </div>
                        <div class="yoko-form-group">
                            <label for="assignment_group" class="yoko-short-110">Assignment group</label>
                            <div class="yoko-form-inline">
                                <input type="text" name="assignment_group" value="" placeholder="" disabled class="yoko-wid140" ng-model="c.data.assignment_group">
                                <input type="text" name="assignment_group_sys_id" value="" placeholder="" disabled class="yoko-wid140" ng-model="c.data.assignment_group_sys_id" ng-style="{'display': 'none'}">
                                <button type="button" class="yoko-btn yoko-btn-search" ng-click="clickAssignmentGroup()"></button>
                            </div>
                        </div>
                        <div class="yoko-form-group">
                            <label for="assigned_to" class="yoko-short-110">Assigned to</label>
                            <div class="yoko-form-inline">
                                <input type="text" name="assigned_to" value="" placeholder="" disabled class="yoko-wid140" ng-model="c.data.assigned_to">
                                <input type="text" name="assigned_to_sys_id" value="" placeholder="" disabled class="yoko-wid140" ng-model="c.data.assigned_to_sys_id" ng-style="{'display': 'none'}">
                                <button type="button" class="yoko-btn yoko-btn-search" ng-click="clickAssignedTo()"></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="yoko-search-form-wrapper">
                <div class="yoko-search-form-wrap yoko-search-form-company yoko-col60">
                    <div class="yoko-search-form-heading">Company</div>
                    <div class="yoko-search-form yoko-padding24">
                        <div class="yoko-form-col">
                            <div class="yoko-form-group-heading-wrap">
                                <div class="yoko-form-group-heading">End User</div>
                                <div class="yoko-form-group-line"></div>
                            </div>
                            <div class="yoko-form-group">
                                <label for="end_user" class="yoko-short">End User</label>
                                <div class="yoko-form-inline yoko-wid172">
                                    <input type="text" name="end_user" value={{data.end_user}} ng-model="c.data.end_user">
                                    <input type="text" name="end_user_sys_id" value={{data.end_user_sys_id}} ng-model="c.data.end_user_sys_id" ng-style="{'display': 'none'}">
                                    <button type="button" class="yoko-btn yoko-btn-search" ng-click="clickEndUser()"></button>
                                </div>
                            </div>
                            <div class="yoko-form-group">
                                <label for="code" class="yoko-short">Code</label>
                                <input type="text" name="code" value="" placeholder="" disabled class="yoko-wid172" ng-model="c.data.end_user_code">
                            </div>
                        </div>
                        <div class="yoko-form-col">
                            <div class="yoko-form-group-heading-wrap">
                                <div class="yoko-form-group-heading">Contract</div>
                                <div class="yoko-form-group-line"></div>
                            </div>
                            <div class="yoko-form-group">
                                <label for="contract" class="yoko-short">Contract</label>
                                <div class="yoko-form-inline yoko-wid172">
                                    <input type="text" name="contract" value={{data.contract}} ng-model="c.data.contract">
                                    <input type="text" name="contract_sys_id" value={{data.contract_sys_id}} ng-model="c.data.contract_sys_id" ng-style="{'display': 'none'}">
                                    <button type="button" class="yoko-btn yoko-btn-search" ng-click="clickContract()"></button>
                                </div>
                            </div>
                            <div class="yoko-form-group">
                                <label for="code" class="yoko-short">Code</label>
                                <input type="text" name="code" value="" placeholder="" disabled class="yoko-wid172" ng-model="c.data.contract_code">
                            </div>
                        </div>
                        <div class="yoko-form-col">
                            <div class="yoko-form-group-heading-wrap">
                                <div class="yoko-form-group-heading">Contract - Dummy</div>
                                <div class="yoko-form-group-line"></div>
                            </div>
                            <div class="yoko-form-group">
                                <label for="contract_name" class="yoko-short-110">Contract Name</label>
                                <input type="text" name="contract_name" value="" placeholder="" class="yoko-wid172" ng-model="c.data.contract_name" ng-disabled="isContractDummyDisabled">
                            </div>
                            <div class="yoko-form-group">
                                <label for="contract_address" class="yoko-short-110">Contract Address</label>
                                <input type="text" name="contract_address" value="" placeholder="" class="yoko-wid172" ng-model="c.data.contract_address" ng-disabled="isContractDummyDisabled">
                            </div>
                            <div class="yoko-form-group">
                                <label for="contract_country" class="yoko-short-110">Contract Country</label>
                                <div class="yoko-form-inline yoko-wid172">
                                    <input type="text" name="contract_country" value="" placeholder="" ng-model="c.data.contract_country" disabled>
                                    <input type="text" name="contract_country_sys_id" value="" placeholder="" ng-model="c.data.contract_country_sys_id" ng-style="{'display': 'none'}">
                                    <button type="button" class="yoko-btn yoko-btn-search" ng-click="clickContractCountry()" ng-disabled="isContractDummyDisabled"></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="yoko-search-form-wrap yoko-search-form-governance yoko-col40">
                    <div class="yoko-search-form-heading">Governance</div>
                    <div class="yoko-search-form">
                        <div class="yoko-form-col">
                            <div class="yoko-form-group">
                                <label for="t-cas" class="yoko-short-120">T-CAS</label>
                                <div class="yoko-form-inline">
                                    <input type="text" name="t-cas" value="" placeholder="" class="yoko-wid140">
                                    <button type="button" class="yoko-btn yoko-btn-search"></button>
                                </div>
                            </div>
                            <div class="yoko-form-group">
                                <label for="territory_review" class="yoko-short-120">Territory Review</label>
                                <div class="yoko-form-inline">
                                    <input type="text" name="territory_review" value="" placeholder="" class="yoko-wid140">
                                    <button type="button" class="yoko-btn yoko-btn-search"></button>
                                </div>
                            </div>
                            <div class="yoko-form-group">
                                <label for="risk_management" class="yoko-short-120">Risk Management</label>
                                <div class="yoko-form-inline">
                                    <input type="text" name="risk_management" value="" placeholder="" class="yoko-wid140">
                                    <button type="button" class="yoko-btn yoko-btn-search"></button>
                                </div>
                            </div>
                            <div class="yoko-form-group">
                                <label for="credit_assessment" class="yoko-short-120">Credit Assessment</label>
                                <div class="yoko-form-inline">
                                    <input type="text" name="credit_assessment" value="" placeholder="" class="yoko-wid140">
                                    <button type="button" class="yoko-btn yoko-btn-search"></button>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div class="yoko-search-form-wrapper">
                <div class="yoko-search-form-wrap yoko-project-wrap yoko-col60">
                    <div class="yoko-search-form-heading">Project</div>
                    <div class="yoko-search-form" style="height: 260px">
                        <div class="yoko-form-col yoko-col100">
                            <div class="yoko-form-group">
                                <label for="title" class="yoko-short">Project Title</label>
                                <input type="text" name="title" id="title" placeholder="" ng-model="c.data.project_title">
                            </div>

                            <div class="yoko-form-group">
                                <label for="detail" class="yoko-short">Project Detail</label>
                                <textarea id="detail" name="detail" rows="4" required placeholder="" ng-model="c.data.project_detail"></textarea>
                            </div>
                            <div class="yoko-form-group">
                                <label for="caution" class="yoko-short">Caution</label>
                                <textarea id="caution" name="caution" rows="4" required placeholder="" ng-model="c.data.caution"></textarea>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="yoko-search-form-wrap yoko-project-wrap yoko-col40">
                    <div class="yoko-search-form-heading">Request Quote</div>
                    <div class="yoko-search-form" style="height: 260px">
                        <div class="yoko-form-col yoko-col100">
                            <div class="yoko-form-group">
                                <label for="reason_code" class="yoko-short-110" style="width:12rem">* Reason Code</label>
                                <input type="text" name="reason_code" ng-model="c.data.reason_code" placeholder="" class="yoko-wid140">
                            </div>
                            <div class="yoko-form-group">
                                <label for="request_due_date" class="yoko-short-110" style="width:12rem">* Request Due Date</label>
                                <input type="date" name="request_due_date" value={{data.request_due_date}} ng-model="c.data.request_due_date" id="request_due_date" class="yoko-wid140">
                            </div>
                            <div class="yoko-form-group">
                                <label for="remark" class="yoko-short-110" style="width:16rem">* Remark</label>
                                <textarea id="remark" name="remark" rows="8" ng-model="c.data.remark" required placeholder=""></textarea>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
        <!-- iframe src='/ui_page.do?sys_id=27a2384193e402104d95f55a7bba1098'+ / {{}} width='100%' height='450px' style='border:none;'>
    </iframe-->
    </div>


    <script>
        const buttons = document.querySelectorAll('.yoko-title-btn-wrap .yoko-btn-wrap button');

        buttons.forEach(button => {
            button.addEventListener('click', function() {
                buttons.forEach(btn => {
                    btn.classList.remove('active');
                });
                this.classList.add('active');
            });
        });

        window.onload = function() {
            var wrapper = document.querySelector('.yoko-search-form-wrapper');
            if (wrapper) {
                var forms = wrapper.querySelectorAll('.yoko-search-form-wrap > .yoko-search-form');
                var maxHeight = 0;
                // 모든 .yoko-search-form 요소의 높이를 확인하여 최대 높이를 찾습니다.
                forms.forEach(function(form) {
                    if (form.offsetHeight > maxHeight) {
                        maxHeight = form.offsetHeight;
                    }
                });
                // 최대 높이로 모든 .yoko-search-form 요소의 높이를 설정합니다.
                forms.forEach(function(form) {
                    form.style.height = maxHeight + 'px';
                });
            }
        };
    </script>






    <!-- Modal Test Structure -->
    <div id="modalTest" class="modal" style="display:none;">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close">&times;</span>
                <h2>{{data.modalTitle}}</h2>
            </div>
            <div class="modal-body">

                <ul id="container" class="container">
                    <li ng-repeat="item in c.data.items">
                        <span ng-click="c.logSysId(item.column1, item.column2, item.column3) ">{{ item.column1 }}</span>
                        <span ng-if="false">{{ item.column2 }}</span>
                        <span>{{ item.column3 }}</span>
                        <span>{{ item.column4 }}</span>
                    </li>
                </ul>


                <div class="pagination" id="pagination"></div>

            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" id="closeModalButton">Close</button>
            </div>
        </div>
    </div>






</div>]]></template>
    </sp_widget>
</record_update>
