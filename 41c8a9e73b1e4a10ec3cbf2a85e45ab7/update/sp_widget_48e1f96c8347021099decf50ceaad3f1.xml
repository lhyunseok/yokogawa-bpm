<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $location, $window, $realgridkey, $realgrid) {
    /* widget controller */
    var c = this;
    c.data.readStatus = true;
    $window.realGrid2Lic = $realgridkey.getKey();
    $window.RealGrid = $realgrid.getRealGrid();
    // Function to get URL parameters
    c.getUrlParameter = function(param) {
        return $location.search()[param];
    };

    $scope.uploadPrfFiles = function() {
        modal.style.display = 'block';
    }
    
    $scope.btnClickAddFile  = function() {
        modal.style.display = 'none';
    }

    $scope.btnClickAddFile = function (obj){
        var maxFileCnt = 2;   // 첨부파일 최대 개수
        var attFileCnt = document.querySelectorAll('.filebox').length;    // 기존 추가된 첨부파일 개수
        var remainFileCnt = maxFileCnt - attFileCnt;    // 추가로 첨부가능한 개수
        var curFileCnt = obj.files.length;  // 현재 선택된 첨부파일 개수
        let fileNo = 0;

        // 첨부파일 개수 확인
        if (curFileCnt > remainFileCnt) {
                alert("첨부파일은 최대 " + maxFileCnt + "개 까지 첨부 가능합니다.");
        } else {
                for (const file of obj.files) {
                        // 첨부파일 검증
                        if (validation(file)) {
                                // 파일 배열에 담기
                                var reader = new FileReader();
                                reader.onload = function () {
                                        filesArr.push(file);
                                };
                                reader.readAsDataURL(file);

                                // 헤드파일 디테일 파일 추가
                                if (file.name.includes('_H')) {
                                    $('#projectHeader').val(file.name);
                                }
                                else if (file.name.includes('_D')) {
                                    $('#projectDetail').val(file.name);

                                }
                        }
                }
        }
        // 초기화
        document.querySelector("input[type=file]").value = "";
    }

    /* 첨부파일 검증 */
    function validation(obj){
        const fileTypes = ['application/pdf', 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tif', 'application/haansofthwp', 'application/x-hwp'];
        if (obj.name.length > 35) {
            alert("파일명이 35자 이상인 파일은 제외되었습니다.");
            return false;
        } else if (obj.size > (100 * 1024 * 1024)) {
            alert("최대 파일 용량인 100MB를 초과한 파일은 제외되었습니다.");
            return false;
        } else if (obj.name.lastIndexOf('.txt') == -1) {
            alert("확장자 txt가 아닌 파일은 제외되었습니다.");
            return false;
        } else if (!fileTypes.includes(obj.type)) {
            alert("첨부가 불가능한 파일은 제외되었습니다.");
            return false;
        } else {
            return true;
        }
    }




    var gv;
    var dp;

    function grid() {
        const gvFields = [
            { fieldName: "sys_id",         dataType: "text" },
            { fieldName: "wbs",            dataType: "text" },
            { fieldName: "__type",         dataType: "text" },
            { fieldName: "in_charge",      dataType: "text" },
            { fieldName: "activity_type",  dataType: "text" },
            { fieldName: "activity_rate",  dataType: "number" },
            { fieldName: "rate_hour",      dataType: "number" },
            { fieldName: "total_amount",   dataType: "number" },
            { fieldName: "__insert",       dataType: "text" },
            { fieldName: "__delete",       dataType: "text" }
        ];

        const sumFooter = { "expression": "sum", "numberFormat": "#,##0" };

        const gvColumns = [
            { name: "sys_id",         fieldName: "sys_id",         type: "data",   width: 30,  header: { text: "sysid" },         visible: false },
            { name: "wbs",            fieldName: "wbs",            type: "data",   width: 100, header: { text: "WBS" },           visible: true, readOnly: true,  editable: false, styleName: "ni-rg-col-wbs", groupFooter: { text: " ", expression: "max" } },
            { name: "__type",         fieldName: "__type",         type: "data",   width: 40,  header: { text: "TYPE" },          visible: true },
            { name: "in_charge",      fieldName: "in_charge",      type: "data",   width: 150, header: { text: "In Charge" },     visible: true, readOnly: true,  editable: false, styleName: "ni-rg-align-left ni-rg-readonly" },
            { name: "activity_type",  fieldName: "activity_type",  type: "data",   width: 120, header: { text: "Activity Type" }, visible: true, readOnly: true,  editable: false, styleName: "ni-rg-align-left ni-rg-readonly", groupFooter: sumFooter, button: "action", buttonVisibility: "always" },
            { name: "activity_rate",  fieldName: "activity_rate",  type: "number", width: 80,  header: { text: "Activity Rate" }, visible: true, readOnly: true,  editable: false, styleName: "ni-rg-align-right ni-rg-readonly", numberFormat: "#,##0", },
            { name: "rate_hour",      fieldName: "rate_hour",                      width: 100, header: { text: "Rate * Hour" },   visible: true, readOnly: true,  editable: false, styleName: "ni-rg-align-right ni-rg-readonly", numberFormat: "#,##0", footer: { expression: "sum", numberFormat: "#,##0" }, groupFooter: sumFooter, },
            { name: "total_amount",   fieldName: "total_amount",   type: "number", width: 60,  header: { text: "Total(H)" },      visible: true, readOnly: true,  editable: false, styleName: "ni-rg-align-right ni-rg-readonly", numberFormat: "#,##0", groupFooter: { text: "", expression: "sum", numberFormat: "#,###", styleName: "ni-rg-align-right" }, },
            { name: "__insert",       fieldName: "__insert",       type: "button", width: 40,  header: { text: "Insert" },        visible: true, readOnly: false, editable: false, styleName: 'ni-rg-col-button', renderer: { type: "button", hideWhenEmpty: true } },
            { name: "__delete",       fieldName: "__delete",       type: "button", width: 45,  header: { text: "Delete" },        visible: true, readOnly: false, editable: false, styleName: 'ni-rg-col-button', renderer: { type: "button", hideWhenEmpty: true } }
        ];

        const gvLayouts = [ 'sys_id', 'wbs', '__type', 'in_charge', 'activity_type', 'activity_rate', 'rate_hour', 'total_amount', '__insert', '__delete' ];

        const gvFilesAmt = [];
        for (const field of gvFields) {
            // Dynamic field handling if needed
        }
        gvFields.push(...gvFilesAmt);

        for (const col of gvColumns) {
            // Dynamic column handling if needed
        }

        function initGrid() {
            gv = new RealGrid.GridView('gridContainer');
            dp = new RealGrid.LocalDataProvider();

            dp.setFields(gvFields);
            gv.setDataSource(dp);
            gv.setColumns(gvColumns);
            gv.setColumnLayout(gvLayouts);

            gv.footers.visible = true;
            gv.commitEditor();
            gv.undoable = true;

            gv.editOptions.commitByCell = true;
            gv.editOptions.insertable = true;
            gv.setFixedOptions({
                colCount: 7,
                rightCount: 3,
                resizable: true,
                editable: true,
                movable: true
            });

            dp.softDeleting = false;

            gv.groupBy(["wbs", "__type"], false);

            gv.setRowGroup({
                expandedAdornments: 'footer',
                indentVisible: false,
                mergeMode: true,
                createFooterCallback: function(grid, group) {
                    if (group.level == 1) {
                        return false;
                    }
                    if (group.descendantCount > 1) return true;
                }
            });

            gv.checkBar.visible = false;
            gv.stateBar.visible = false;

            dp.setRows(c.data.gridData);
        }

        initGrid();
    }

    function initFormEtc() {
        $scope.closeDlgActivityType = function() {
            dlgActivityType.close();
        };

        $scope.setActivityType = function() {
            const curr = gv.getCurrent();
            dp.setValue(curr.dataRow, 'activity_type', moonc_at_data1.value);
            dp.setValue(curr.dataRow, 'in_charge', moonc_at_data2.value);
            dlgActivityType.close();
        };
    }

    function initGridEtc() {
        const _fnInsert = function () {
            const curr = gv.getCurrent();
            if (curr.dataRow < 0) {
                // Not a data row (e.g., grouping)
            } else {
                const currIndex = Math.max(0, (curr.itemIndex));
                const wbs = gv.getValue(currIndex, 'wbs');
                const __type = gv.getValue(currIndex, '__type');
                if (__type == "참고") {
                    gv.beginInsertRow(currIndex, true);
                    gv.setValue(currIndex + 1, 'wbs', wbs);
                    gv.setValue(currIndex + 1, '__type', '참고');
                    gv.setValue(currIndex + 1, '__insert', 'Ins');
                    gv.setValue(currIndex + 1, '__delete', 'Del');
                } else {
                    gv.beginInsertRow(currIndex, false);
                    gv.setValue(currIndex, 'wbs', wbs);
                    gv.setValue(currIndex, '__type', '참고');
                    gv.setValue(currIndex, '__insert', 'Insert');
                    gv.setValue(currIndex, '__delete', 'Delete');
                }
                gv.showEditor();
                gv.setFocus();
                gv.commit(true);
            }
        };

        gv.onCellButtonClicked = function(grid, index, column) {
            if (['activity_type'].includes(index.column)) {
                dlgActivityType.showModal();
            }
        };

        gv.onCellItemClicked = function(grid, index, clickData) {
            if (['__delete'].includes(index.column.name)) {
                if (index.dataRow >= 0) {
                    dp.removeRow(index.dataRow);
                }
            } else if (['__insert'].includes(index.column.name)) {
                _fnInsert();
            }
        };

    }

    function checkRealGrid() {
		if(RealGrid) {
			return true;
		} 
		
		return false;
	}

    function drawRealGrid() {
        grid();
        initGridEtc();
        initFormEtc();
    }
    drawRealGrid();


}]]></client_script>
        <controller_as>c</controller_as>
        <css>@charset "UTF-8";&#13;
&#13;
&#13;
body {margin: 0; font-family: "Pretendard"; font-size: 14px; font-weight: 400; line-height: normal;}&#13;
&#13;
.blank {width: 100%; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); }&#13;
.yoko-container {margin: 40px auto 100px; min-width: 1400px; max-width: 1600px; font-family: "Pretendard"; font-size: 14px; font-weight: 400; letter-spacing: 0;}&#13;
.yoko-container * {box-sizing: border-box;}&#13;
.yoko-container .yoko-content {display: flex; gap: 30px; flex-direction: column;}&#13;
.yoko-breadcrumb {color: #425D78;}&#13;
.yoko-title-btn-wrap {display: flex; justify-content: space-between; align-items: center; margin: 8px 0 25px 0;}&#13;
.yoko-title-btn-wrap .yoko-title {margin:0; color: #1C3956; font-family: "Pretendard";font-size: 24px;  font-style: normal;  font-weight: 700; line-height: normal;}&#13;
.yoko-title-btn-wrap .yoko-btn-wrap {display: flex; gap: 4px; margin-bottom: 0;}&#13;
&#13;
.yoko-btn-wrap {display: flex; justify-content: space-between; margin-bottom: 8px;}&#13;
.yoko-btn-wrap &gt; div {display: flex; gap: 4px;}&#13;
&#13;
.yoko-btn {cursor: pointer; border-radius: 4px; text-align: center; font-family: "Pretendard";font-size: 14px;  font-style: normal; font-weight: 400;  padding: 8px 20px 8px 20px;}&#13;
.yoko-btn:disabled  {border: 1px solid #AABBD1; color: #C8CED4;}&#13;
&#13;
.yoko-btn.yoko-btn-outline {background: #fff; border: 1px solid #EAEEF3;  color: #4B5E70; }&#13;
.yoko-btn.yoko-btn-outline:hover  {border: 1px solid #AABBD1;}&#13;
&#13;
.yoko-btn.yoko-btn-fill {background-color: #68B3FC; border: 1px solid #4193E2; color: #fff;}&#13;
.yoko-btn.yoko-btn-fill:hover  {background-color: #4193E2; border: 1px solid #4193E2;}&#13;
&#13;
.yoko-btn.yoko-btn-fill-red {background-color: #FF6D6D; border: 1px solid #E35050; color: #fff;}&#13;
.yoko-btn.yoko-btn-fill-red:hover  {background-color: #E35050; border: 1px solid #E35050;}&#13;
&#13;
&#13;
.yoko-btn-search {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_search.png) no-repeat center center !important;}&#13;
.yoko-btn-search:hover {background-color: #eaeaea;}&#13;
.yoko-btn-add {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_add.png) no-repeat center center !important;}&#13;
.yoko-btn-add:hover {background-color: #eaeaea;}&#13;
.yoko-btn-delete {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_delete.png) no-repeat center center !important;}&#13;
.yoko-btn-delete:hover {background-color: #eaeaea;}&#13;
.yoko-btn-info-fill {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_info_fill.png) no-repeat center center !important;}&#13;
.yoko-btn-info-fill:hover {background-color: #eaeaea;}&#13;
.yoko-btn-attach {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_attach.png) no-repeat center center !important;}&#13;
.yoko-btn-attach:hover {background-color: #eaeaea;}&#13;
.yoko-btn-load {border: 1px solid #E1E8F0; font-weight: 600; padding: 0; min-width: 58px; width: 28px; height: 28px; color: #606060; background:#fff;}&#13;
.yoko-btn-load:hover {background-color: #eaeaea;}&#13;
&#13;
.yoko-search-form {display: flex; gap: 30px; padding: 16px 30px; max-width: 1600px;  background-color: #F7F7F7; border: 1px solid #EDEDED; border-radius: 4px;}&#13;
&#13;
.yoko-form-group .yoko-btn {padding: 5px 10px 5px 10px;}&#13;
.yoko-search-form .yoko-form-group {display: flex; align-items: center; gap: 20px; /*width: 100%; min-width: 240px;*/}&#13;
.yoko-search-form .yoko-form-group label {width:130px; min-width: 130px; text-align: right;}&#13;
.yoko-search-form label {color: #4B5E70; font-family: 'Pretendard'; font-size: 13px; font-style: normal; font-weight: 500; line-height: normal;}&#13;
.yoko-search-form label.yoko-short {width: 80px; min-width: 80px;}&#13;
.yoko-search-form label.yoko-short-100 {width: 100px; min-width: 100px;}&#13;
.yoko-search-form label.yoko-short-110 {width: 110px; min-width: 110px;}&#13;
.yoko-search-form label.yoko-short-120 {width: 120px; min-width: 120px;}&#13;
.yoko-search-form label.yoko-short-130 {width: 130px; min-width: 130px;}&#13;
.yoko-search-form label.yoko-short-135 {width: 135px; min-width: 130px;}&#13;
.yoko-search-form label.yoko-middle {width: 170px; min-width: 170px;}&#13;
.yoko-search-form label.yoko-long {width: 200px; min-width: 200px;}&#13;
.yoko-search-form label.yoko-btn-fill {background-color: #68B3FC;text-align: center; color: #fff; font-weight: 400;  padding: 5px 10px 6px 10px; border-radius: 4px;}&#13;
.yoko-search-form label.yoko-long.yoko-btn-fill {width: calc(200px - 10px);}&#13;
.yoko-search-form label.yoko-middle.yoko-btn-fill {width: calc(170px - 10px);}&#13;
&#13;
.yoko-search-form input,&#13;
.yoko-search-form select,&#13;
.yoko-search-form textarea {font-family: "Pretendard"; font-size: 13px; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); border-radius: 4px; border: 1px solid #E1E8F0; color: #7A8692;}&#13;
.yoko-search-form textarea {max-height: none; width: 100%; padding: 10px 10px 10px 10px; }&#13;
/* .yoko-search-form input[type=date] {width: 140px; } */&#13;
.yoko-search-form input[type=date]::-webkit-calendar-picker-indicator,&#13;
.yoko-search-form input[type=date]::-webkit-inner-spin-button {background: url('icon_calendar.png') no-repeat right center; }&#13;
&#13;
.yoko-search-form select {&#13;
  -moz-appearance:none; /* Firefox */&#13;
  -webkit-appearance:none; /* Safari and Chrome */&#13;
  appearance:none;&#13;
  background-image: url(icon_arrow_down.png);&#13;
  background-repeat: no-repeat;&#13;
  background-position-x: 100%;&#13;
  background-position-y: 1px;&#13;
  line-height: 15px;&#13;
  padding: 6px 30px 5px 10px;&#13;
&#13;
}&#13;
&#13;
.yoko-form-inline {display: flex;gap: 4px; width: calc(100% - 4px); align-items: center;}&#13;
.yoko-form-group-title {padding: 4px 0 8px 0; color: #1C3956; font-family: "Pretendard"; font-size: 14px;font-style: normal;font-weight: 700; line-height: normal;}&#13;
.yoko-form-group-hori  {display: flex;gap: 0; /*width:100%;*/}&#13;
.yoko-flex-responsive {display: flex; gap: 30px;}&#13;
.yoko-form-col {/*width: 100%;*/ display: flex; gap: 8px; flex-direction: column;}&#13;
.yoko-form-col.yoko-gap7 {gap:7px ;}&#13;
.yoko-col100 {width: 100%;}&#13;
.yoko-col60 {width: 60%;}&#13;
.yoko-col50 {width: 50%;}&#13;
.yoko-col40 {width: 40%}&#13;
.yoko-col35 {width: 35%}&#13;
.yoko-col30 {width: 30%}&#13;
.yoko-col20 {width: 20%} &#13;
.yoko-col15 {width: 15%} &#13;
.yoko-col10 {width: 10%} &#13;
&#13;
.yoko-search-form label.checkbox-label {text-align: left;width: auto; min-width: auto; cursor: pointer; display: flex; gap: 10px; align-items: center; justify-content: flex-start; color: #4B5E70; font-family: "Pretendard";  font-size: 13px; font-style: normal; font-weight: 400; line-height: normal;}&#13;
.custom-checkbox {position: relative;}&#13;
.custom-checkbox input { position: absolute;  opacity: 0;  cursor: pointer;  width: 18px; height: 18px; z-index: 1;}&#13;
.custom-checkbox .checkmark {position: relative;  top: 0;  left: 0;  display: block;  height: 18px;  width: 18px;  border-radius: 2px;border: 1px solid #DCE3EB;background: #FFF; overflow: hidden;}&#13;
.custom-checkbox:hover input ~ .checkmark {background-color: #FFF;}&#13;
.custom-checkbox input:checked ~ .checkmark {  background-color: #68B3FC;  border-radius: 2px;  border: 1px solid #68B3FC;}&#13;
.custom-checkbox .checkmark:after {  content: "";  position: absolute;  display: none;}&#13;
.custom-checkbox input:checked ~ .checkmark:after {  display: block;  left: 50%; top: 50%;  height: 16px;  width: 18px;  transform: translate(-50%, -50%);  background: url(icon_checkbox.png) no-repeat center center;}&#13;
&#13;
.custom-checkbox input:disabled ~ .checkmark {border: 1px solid #D1D1D1; background: #E2E2E2; cursor: not-allowed; }&#13;
.custom-checkbox input:checked:disabled ~ .checkmark {background:#E2E2E2 url(icon_checkbox_dis.png) no-repeat center center; }&#13;
.custom-checkbox input:disabled ~ .checkmark:after {background: url(icon_checkbox_dis.png) no-repeat center center;}&#13;
&#13;
.yoko-wid100 {width: 100px !important;}&#13;
.yoko-wid103 {width: 103px !important;}&#13;
.yoko-wid127 {width: 127px !important;}&#13;
.yoko-wid134 {width: 134px !important;}&#13;
.yoko-wid140 {width: 140px !important;}&#13;
.yoko-wid147 {width: 147px !important;}&#13;
.yoko-wid154 {width: 154px !important;}&#13;
.yoko-wid158 {width: 158px !important;}&#13;
.yoko-wid172 {width: 172px !important;}&#13;
.yoko-wid247 {width: 247px !important;}&#13;
.yoko-wid308 {width: 308px !important;}&#13;
.yoko-wid425 {width: 425px !important;}&#13;
.yoko-wid559 {width: 559px !important;}&#13;
.yoko-wid717 {width: 717px !important;}&#13;
&#13;
.yoko-mt-20 {margin-top: 20px;}&#13;
/* .yoko-form-inline select {width: calc(100% - 28px);} */&#13;
.yoko-btn-spacing {width: calc(100% - 32px);}&#13;
&#13;
.yoko-search-form-wrapper {display: flex; gap: 20px; }&#13;
.yoko-search-form-wrap .yoko-search-form-heading {margin-top: 10px; margin-bottom: 5px; font-size: 16px; font-weight: 600; color: #1F3B55;}&#13;
&#13;
.yoko-governance-wrap .yoko-search-form button {width: 100%; min-width: 140px;}&#13;
.yoko-project-wrap .yoko-search-form input[type=text] {width: 100%;}&#13;
&#13;
.yoko-form-group-heading-wrap {display: flex; gap: 9px; justify-content: space-between; align-items: center;}&#13;
.yoko-form-group-heading {font-size: 14px; font-weight: 700; color: #1F3B55;}&#13;
.yoko-form-group-line {flex-grow: 1; height: 1px; background-color: #E1E1E1;}&#13;
.yoko-padding24 {padding: 24px;}&#13;
.yoko-grid-btn-wrap {display: flex; gap: 7px; justify-content: right;}&#13;
&#13;
.yoko-project-wrap {height: 255px;}&#13;
.yoko-project-wrap .yoko-search-form {height: 100%;}&#13;
&#13;
&#13;
/* 모달창 */&#13;
.yoko-modal-normal {padding: 32px 30px; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 768px; height: 240px; background-color: #fff; box-shadow: 0px 2px 30px rgba(0, 0, 0, 0.1); z-index: 100;}&#13;
.yoko-modal-content {position: relative; width: 100%; height: 100%;}&#13;
.yoko-modal-content .yoko-btn-wrap {position: absolute; top: 0; right: 0;}&#13;
.yoko-modal-content .yoko-btn-group {margin-top: 32px;}&#13;
.yoko-modal-content .yoko-btn-group button {padding: 8px 20px;}&#13;
.yoko-modal-content .yoko-btn-wrap button {padding: 6px 10px;}&#13;
&#13;
/* 테이블 형식 */&#13;
.yoko-search-table input,&#13;
.yoko-search-table select,&#13;
.yoko-search-table textarea {font-family: "Pretendard"; font-size: 13px; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); border-radius: 4px; border: 1px solid #E1E8F0; color: #7A8692;}&#13;
.yoko-search-table textarea {max-height: none; width: 100%; padding: 10px 10px 10px 10px; }&#13;
.yoko-search-table input[type=date]::-webkit-calendar-picker-indicator,&#13;
.yoko-search-table input[type=date]::-webkit-inner-spin-button {background: url('icon_calendar.png') no-repeat right center; }&#13;
&#13;
.yoko-search-table select {&#13;
  -moz-appearance:none; /* Firefox */&#13;
  -webkit-appearance:none; /* Safari and Chrome */&#13;
  appearance:none;&#13;
  background-image: url(icon_arrow_down.png);&#13;
  background-repeat: no-repeat;&#13;
  background-position-x: 100%;&#13;
  background-position-y: 1px;&#13;
  line-height: 15px;&#13;
  padding: 6px 30px 5px 10px;&#13;
}&#13;
&#13;
.yoko-search-table-wrap {display: flex; gap: 0;}&#13;
.yoko-search-table tr.yoko-height-short {height: 39px;} &#13;
.yoko-search-table {border-spacing: 0; border-collapse: collapse;}&#13;
.yoko-search-table tr th {padding-right: 16px; text-align: right; background-color: #F7F7F7; border-top: 1px solid #EDEDED; border-bottom: 1px solid #EDEDED;}&#13;
.yoko-search-table tr th.yoko-bg-none {background-color: #fff;}&#13;
.yoko-search-table tr th label {color: #4B5E70; font-family: 'Pretendard'; font-size: 13px; font-style: normal; font-weight: 500; line-height: normal;}&#13;
.yoko-search-table tr td {padding: 5px 10px; border-top: 1px solid #EDEDED; border-bottom: 1px solid #EDEDED;}&#13;
.yoko-search-table tr td input {padding: 5px 10px; width: 100%; height: 100%;}&#13;
.yoko-search-table tr td input:disabled {border: 1px solid #E1E8F0; background: #F1F1F1;}&#13;
.yoko-search-table .yoko-form-inline {width: 100%;}&#13;
&#13;
.yoko-search-table-wrapper {display: flex; gap: 30px;}&#13;
.yoko-search-table-heading {margin-top: 12px; margin-bottom: 5px; font-size: 16px; font-weight: 600; color: #1F3B55;}&#13;
.yoko-table-heading {text-align: left !important; font-size: 14px; font-weight: 700; color: #1F3B55;}&#13;
.yoko-search-table.yoko-empty-col {flex: 1;}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
@media (max-width: 1719px) {&#13;
  .yoko-container {width: 1280px; min-width: 1280px;}&#13;
  .yoko-search-form {gap: 15px;}&#13;
  .yoko-flex-responsive {flex-direction: column; gap: 8px;}&#13;
  .yoko-flex-responsive-row {flex-direction: row; gap: 20px;}&#13;
  .yoko-search-form-company.yoko-col60 {width: 888px;}&#13;
  .yoko-search-form-company .yoko-padding24 {padding: 14px;}&#13;
  .yoko-search-form-company .yoko-search-form {gap: 7px;}&#13;
  .yoko-search-form-governance.yoko-col40 {width: 381px;}&#13;
  .yoko-project-wrap.yoko-col60 {width: 888px;}&#13;
  .yoko-project-wrap.yoko-col40 {width: 381px;}&#13;
  .yoko-project-wrap .yoko-search-form {padding: 18px;}&#13;
&#13;
  .yoko-form-amount-wrap label.yoko-short {width: 130px;}&#13;
  .quotation-responsive label.yoko-short-110 {width: 135px;}&#13;
  .yoko-flag-wrap {margin-top: 15px; height: 100px !important;}&#13;
  .yoko-flag-wrap.yoko-search-form .yoko-form-group {gap: 40px;}&#13;
  .yoko-flag-wrap .yoko-flex-responsive-row {flex-direction: row; gap: 40px;}&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/*리얼그리드 수정*/&#13;
.rg-root {color: #4B5966 !important;  font-family: "Pretendard" !important;   font-size: 14px !important;  font-style: normal !important;  font-weight: 500 !important;  line-height: normal !important;}&#13;
.rg-grid {border: 1px solid #EAEEF3 !important;}&#13;
&#13;
.rg-header {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}&#13;
.rg-header .rg-table tr td {border-right: 1px solid #EAEEF3 !important; border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;} &#13;
.rg-head {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}&#13;
.rg-head .rg-table tr td { border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;}&#13;
&#13;
.rg-body,&#13;
.rg-fixed-body {color: #4B5966 !important;}&#13;
.rg-body .rg-table tr td, &#13;
.rg-fixed-body .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important;}&#13;
.rg-rowbarcontainer .rg-table tr td {background-color: transparent !important;    border-right: 1px solid #EAEEF3 !important;    border-bottom: 1px solid #EAEEF3 !important;}&#13;
.rg-alternate-row {background: #fff !important;}&#13;
.rg-footer {color: #606060 !important; background: #FBFCFF  !important;}&#13;
.rg-footer .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}&#13;
.rg-foot {color: #606060 !important; background: #FBFCFF  !important;}&#13;
.rg-foot .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}&#13;
.rg-focus {border:  2px solid #68B3FC !important;}&#13;
.rg-header-focus {background: #E5F2FF !important; color: #6F7479 !important;}&#13;
.rg-header .rg-table tr td:hover {background: #68B3FC !important; color: #fff !important;}&#13;
.rg-header-select {background: rgb(232 248 240 / 50%) !important;}&#13;
.rg-selection { background: rgb(232 248 240 / 35%) !important; border: 1px solid #15BD66!important;}&#13;
.rg-editor-container { border: 2px solid #27C382 !important; }</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>prfmanagement</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>prfManagement</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	function getGridData(item_sysid, basemonth) {
        var gritem = new GlideRecord("x_yergb_bpm_cost");
        gritem.orderBy("number");
        gritem.query();
        var tableinfo = [];
		var prevWbs = '';
        while (gritem.next()) {
			if (prevWbs && prevWbs !== gritem.wbs.getDisplayValue()) {
				tableinfo.push({
					'sys_id': null,
					'wbs': prevWbs,
					'__type': '입력',
					'activity_type': '***INPUT***',
					'__insert' : 'Ins',
				});
			}
			tableinfo.push({
				'sys_id': gritem.sys_id.getDisplayValue(),
				'wbs': gritem.wbs.getDisplayValue(),
				'__type': '참고',
				'in_charge': gritem.in_charge.getDisplayValue(),
				'activity_type': gritem.activity_type.getDisplayValue(),
				'activity_rate': parseInt(gritem.activity_rate.getDisplayValue().replace(/,/g, ''), 10) || 0,
				'total_amount': parseInt(gritem.total_amount.getDisplayValue(), 10) || 0,
				'__delete' : 'Del',
				'__insert' : 'Ins',
			});
			prevWbs = gritem.wbs.getDisplayValue();
        }
		if (prevWbs) {
			tableinfo.push({
				'sys_id': null,
				'wbs': prevWbs,
				'__type': '입력',
				'activity_type': '***INPUT***',
				'__insert' : 'Ins',
			});
		}
        return tableinfo;
	}

	data.gridData = getGridData();
	data.gridDataStr = JSON.stringify(data.gridData);
	
	
	
	
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>yeongink</sys_created_by>
        <sys_created_on>2024-06-24 05:11:44</sys_created_on>
        <sys_id>48e1f96c8347021099decf50ceaad3f1</sys_id>
        <sys_mod_count>159</sys_mod_count>
        <sys_name>prfManagement</sys_name>
        <sys_package display_value="BPM" source="x_yergb_bpm">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_package>
        <sys_policy/>
        <sys_scope display_value="BPM">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_scope>
        <sys_update_name>sp_widget_48e1f96c8347021099decf50ceaad3f1</sys_update_name>
        <sys_updated_by>yeongink</sys_updated_by>
        <sys_updated_on>2024-06-25 05:22:48</sys_updated_on>
        <template><![CDATA[<div class="yoko-container">
  <div class="yoko-breadcrumb">Home > Project Management > PRF Management</div>
  <div class="yoko-title-btn-wrap">
    <h1 class="yoko-title">PRF Management</h1>
    <div class="yoko-btn-wrap">
      <button class="yoko-btn yoko-btn-outline">Load Data</button>
      <button class="yoko-btn yoko-btn-fill" ng-click="uploadPrfFiles()">Upload PRF Files</button>
    </div>
  </div>
  <div class="yoko-content">
    <div class="yoko-search-form-wrap">
      <div class="yoko-search-form">
        <div class="yoko-form-group">
          <label for="base_year_month" class="yoko-short-120">Base Year / Month</label>
          <input type="text" name="base_year_month" value="2024. 05" placeholder="" disabled class="yoko-wid140">
        </div>
        <div class="yoko-form-group">
          <label for="project_number" class="yoko-short-100">Project Number</label>
          <div class="yoko-form-inline">
            <input type="text" name="project_number" value="" placeholder="" class="yoko-wid140">
            <button type="button" class="yoko-btn yoko-btn-search"></button>
          </div>
        </div>
        <div class="yoko-form-group">
          <label for="pm_name" class="yoko-short">PM Name</label>
          <div class="yoko-form-inline">
            <input type="text" name="pm_name" value="" placeholder="" class="yoko-wid140">
            <button type="button" class="yoko-btn yoko-btn-search"></button>
          </div>
        </div>
        <div class="yoko-form-group">
          <label for="state" class="yoko-short">State</label>
          <div class="yoko-form-inline">
            <input type="text" name="state" value="" placeholder="" class="yoko-wid140">
            <button type="button" class="yoko-btn yoko-btn-search"></button>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="yoko-container"> 
    <div class="out" id='gridContainer' style="width:100%; height: 450px;"></div>
      <input id="" type="hidden" value="{{data.gridUrl}}">
      <input id="gridData" type="hidden" value="{{data.gridData}}">
      <input id="" type="hidden" value="{{data.gridDataStr}}">
  </div>
  <div class="yoko-modal-normal yoko-search-form" id="modal" style="display:none">
    <form class="yoko-modal-content">
      <div class="yoko-form-col">
        <div class="yoko-form-group">
          <label for="f_year_month" class="yoko-short-100">F.Year, Month</label>
          <input type="text" name="f_year_month" value="202405" placeholder="" disabled class="yoko-wid140">
        </div>
        <input type="file" id="files" multiple style="display: none">
        <div class="yoko-form-group">
          <label for="project_header" class="yoko-short-100">Project Header</label>
          <input type="text" name="project_header" value="" placeholder="" class="yoko-wid425">
        </div>
        <div class="yoko-form-group">
          <label for="project_detail" class="yoko-short-100">Project Detail</label>
          <input type="text" name="project_detail" value="" placeholder="" class="yoko-wid425">
        </div>
        <div class="yoko-form-group yoko-btn-group">
          <label for="state" class="yoko-short-100"></label>
          <div class="yoko-form-inline">
            <button id="cancel" class="yoko-btn yoko-btn-outline" ng-click="btnClickCancel()">Cancel</button>
            <input type = "submit" class="yoko-btn yoko-btn-fill">Upload</input>
        </div>
      </div>
      <div class="yoko-btn-wrap">
        <label for="files" class="yoko-btn yoko-btn-fill">Open Files</label>
      </div>
    </form>
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
