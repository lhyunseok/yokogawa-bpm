<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $location, $window, $http, $realgridkey, $realgrid) {
    /* widget controller */
    var c = this;
    c.data.readStatus = true;
    $window.realGrid2Lic = $realgridkey.getKey();
    $window.RealGrid = $realgrid.getRealGrid();
    var headFile, detailFile, wbsBudgetFile;
    
    var modalProjectNumber = document.getElementById("modalProjectNumber");
	var modalPMName = document.getElementById("modalPMName");
	var modalState = document.getElementById("modalState");
    var filesPath = [];
    // Function to get URL parameters
    c.getUrlParameter = function(param) {
        return $location.search()[param];
    };

    $scope.uploadPrfFiles = function() {
        modalUpload.style.display = 'block';
    }
    
    $scope.btnClickAddFile  = function() {
        modalUpload.style.display = 'none';
        if (headFile && detailFile) {
            postHeaderFile(parseCustomTableJson(headFile));
            postDetailFile(parseCustomTableJson(detailFile));
            postWbsBudget(parseWbsBudgetJson(wbsBudgetFile));
        } else {
            alert("PJTSUM_H 파일과 PJTSUM_D 파일을 올려주세요.")
        }
        clearModalUpload();
    }

    $scope.btnClickCancel = function() {
        modalUpload.style.display = 'none';
        clearModalUpload();
    }
	

    $scope.btnClickProjectNumberSearch = function(idx) {
		c.data.itemsProjectNumbers = [];
		modalProjectNumber.style.display = 'block';
		c.data.modalProjectNumber = true;
		c.data.modalProjectNumberTitle = 'Project Number';
        c.data.modalProjectNumberType = true;
		c.server.update().then(function(response) {
			console.log('Server response:', response);
		});
	}

    $scope.closeModalProjectNumber = function() {
        modalProjectNumber.style.display = 'none';
    }

    $scope.clickProjectNumber = function(item) {
        modalProjectNumber.style.display = 'none';
        c.data.ProjectNumberNm = item.name;
        c.data.ProjectNumberCode = item.code;
        c.data.modalProjectNumber = false;
        c.data.modalProjectNumberType = false;

	}

    $scope.btnClickPMNameSearch = function(idx) {
		c.data.itemsPMNames = [];
		modalPMName.style.display = 'block';
		c.data.modalPMName = true;
		c.data.modalPMNameTitle = 'PM Name';
        c.data.modalPMNameType = true;
		c.server.update().then(function(response) {
			console.log('Server response:', response);
		});
	}

    $scope.clickPMName = function(item) {
        modalPMName.style.display = 'none';
        c.data.PMNameNm = item.name;
        c.data.PMNameCode = item.code;
        c.data.modalPMName = false;
        c.data.modalPMNameType = false;

	}

    $scope.btnClickStateSearch = function(idx) {
		c.data.itemsStates = [];
		modalState.style.display = 'block';
		c.data.modalState = true;
		c.data.modalStateTitle = 'State';
        c.data.modalStateType = true;
		c.server.update().then(function(response) {
			console.log('Server response:', response);
		});
	}

    $scope.clickState = function(item) {
        modalState.style.display = 'none';
        c.data.StateNm = item.name;
        c.data.StateCode = item.code;
        c.data.modalState= false;
        c.data.modalStateType = false;

	}

    $scope.valueChangeAddFile = async function(obj) {
        var files = obj.files;
        // Check if files are selected
        if (files && files.length) {
            for (var i = files.length - 1; i >= 0; i--) {
                var file = files[i];
                if (validation(file)) {
                    if (file.name.includes("PJTSUM_H")) {
                        $("#projectHeader").val(file.name);
                        headFile = await readFile(file);
                        headFile = headFile;
    
                    } else if (file.name.includes("PJTSUM_D")) {
                        $("#projectDetail").val(file.name);
                        detailFile = await readFile(file);
                        //parse the detailFile for postWbsBudget
                        wbsBudgetFile = detailFile;
                    }
                }
            }
        }
    }

    $scope.btnClickLoadData = function() {
        loadDataProvider();
    }

    function clearModalUpload() {
        document.querySelector("input[type=file]").value = "";
        $("#projectHeader").val('');
        $("#projectDetail").val('');
        headFile, detailFile, wbsBudgetFile, filesPath = '';
    }

    /** read txt File */
    async function readFile(file) {
        return new Promise((resolve, reject) => {
        var reader = new FileReader();
        reader.onload = (function(theFile) {
            return function(e) {
                // Access the file content using e.target.result
                var fileContent = e.target.result;
                resolve(fileContent)
            };
        })(file);
        reader.readAsText(file, /* optional */ "euc-kr");
        });
    }

    /*** string to json */
    function parseCustomTableJson(str) {
        /***split by new line and split by whitespace */
        var cells = str.split('\n').map(function (el) { return el.split(/\t/); });

        var headings = cells.shift();

        var regex =  /[\{\}\[\]\/?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\"\r]/g

        // Function to remove non-alphanumeric characters from a string
        var removeNonAlphanumeric = str => str.replace(regex, '');

        function camelToSnakeWithPrefix(input) {
            // Replace CamelCase with spaces to snake_case
            var snakeCase = input.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();
            
            // Add 'u_' prefix
            snakeCase = 'u_' + snakeCase;
            
            return snakeCase;
        }

        // Use map to create a new array with modified strings
        var modifiedHeadings = headings.map(removeNonAlphanumeric).map(str => camelToSnakeWithPrefix(str)).map(str => str.replace(/\s+/g, '_'));

        
        cells = cells.filter((cell) => {
            //if there is only empty string in there filter it out
            if (cell.length > 1) return cell;
        });


        var specialChRegex = /[\'\"\r]/g;
        var obj = cells.map(function (el) {
            var obj = {};
            for (var i = 0, l = el.length; i < l; i++) {
                if (typeof el[i] == 'string') {
                    var value = el[i] ? el[i].replace(specialChRegex, '') : '';
                    obj[modifiedHeadings[i]] = value;
                }
                else if (typeof el[i] == 'number') obj[modifiedHeadings[i]] = isNaN(Number(el[i])) ? el[i] : +el[i];
            }
            return obj;
        });
        var result = {};
        result['records'] = obj;
        return JSON.stringify(result);
    }

    /*** string to json */
    function parseWbsBudgetJson(str) {
        /***split by new line and split by whitespace */
        var cells = str.split('\n').map(function (el) { return el.split(/\t/); });

        var headings = cells.shift();

        var regex =  /[\{\}\[\]\/?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\"\r]/g

        // Function to remove non-alphanumeric characters from a string
        var removeNonAlphanumeric = str => str.replace(regex, '');


        // Use map to create a new array with modified strings
        var modifiedHeadings = headings.map(removeNonAlphanumeric).map(str => str.replace(/\s+/g, '_'));

        
        cells = cells.filter((cell) => {
            //if there is only empty string in there filter it out
            if (cell.length > 1) return cell;
        });


        var specialChRegex = /[\'\"\r]/g;
        var obj = cells.map(function (el) {
            var obj = {};
            for (var i = 0, l = el.length; i < l; i++) {
                if (typeof el[i] == 'string') {
                    var value = el[i] ? el[i].replace(specialChRegex, '') : '';
                    obj[modifiedHeadings[i]] = value;
                }
                else if (typeof el[i] == 'number') obj[modifiedHeadings[i]] = isNaN(Number(el[i])) ? el[i] : +el[i];
            }
            return obj;
        });
        var result = {};
        obj.forEach(object => {
            // Calculate Base_Month by concatenating Fiscal_Year and Period
            object.Base_Month = object.Fiscal_Year + object.Period.padStart(2, '0');
        });



        obj.sort((a, b) => {
            if (a.Project_No !== b.Project_No) {
                return a.Project_No.localeCompare(b.Project_No);
            }
            if (a.Data_Category !== b.Data_Category) {
                return a.Data_Category.localeCompare(b.Data_Category);
            }
            if (a.Version !== b.Version) {
                return a.Version.localeCompare(b.Version);
            }
            // Sort Version_Date in descending order
            return new Date(b.Version_Date) - new Date(a.Version_Date);
        });
        
        // Step 2: Group data by Project_No, Data_Category, Version (highest Version_Date)
        let groupedData = {};
        
        obj.forEach(obj => {
            let key = obj.Project_No + '-' + obj.Data_Category + '-' + obj.Version;
            if (!groupedData[key]) {
                groupedData[key] = {
                    Project: obj.Project_No,
                    WBS: obj.Data_Category,
                    Version: obj.Version,
                    VersionDate: obj.Version_Date,
                    LowestBaseMonth: obj.Base_Month,
                    Beyond18: null,
                    months: {}
                };
            }
            
            // Step 3: Find the lowest Base_Month within each group
            if (obj.Base_Month < groupedData[key].LowestBaseMonth) {
                groupedData[key].LowestBaseMonth = obj.Base_Month;
            }
            
            // Step 4: Calculate month1 to month18 based on the lowest Base_Month
            let baseMonthNum = parseInt(obj.Base_Month);
            let lowestBaseMonthNum = parseInt(groupedData[key].LowestBaseMonth);
            let monthDifference = baseMonthNum - lowestBaseMonthNum + 1;
            
            if (monthDifference >= 1 && monthDifference <= 18) {
                groupedData[key].months['Month' + monthDifference] = obj.Value;
            }
            else if (monthDifference > 18) {
                groupedData[key].Beyond18 ? groupedData[key].Beyond18 + obj.Value : obj.Value;
            }
        });
        
        // Step 5: Format the aggregated data with month1 to month18 fields
        let aggregatedData = Object.values(groupedData);

        aggregatedData.forEach(obj => {
            let months = obj.months;
            for (let month in months) {
                obj[month] = months[month];
            }
        });

        aggregatedData.forEach(obj => {
            let transformedObj = {};
            for (let key in obj) {
                let transformedKey = key.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
                transformedObj[transformedKey] = obj[key];
            }
            obj = transformedObj;
        });
        
        result['records'] = aggregatedData;
        
        return JSON.stringify(result);
    }

    function postHeaderFile(json) {
        var url = location.origin + '/api/now/import/x_yergb_bpm_pjt_sum_h/insertMultiple';
        postJsonToImportSet(url, json);
    }

    function postDetailFile(json) {
        var url = location.origin + '/api/now/import/x_yergb_bpm_pjt_sum_d/insertMultiple';
        postJsonToImportSet(url, json);
    }

    function postWbsBudget(json) {
        var wbsBudgetUrl = location.origin + '/api/now/import/x_yergb_bpm_wbs_budget_import/insertMultiple';
        postJsonToImportSet(wbsBudgetUrl, json);
    }
    function postJsonToImportSet(url, json) {
        $http({
            method: 'POST',
            url: url,
            data: json
        }).then(function successCallback(response) {
			alert('전송이 완료되었습니다.');
            console.log(response);
        }, function errorCallback(response) {
			alert('전송에 실패하였습니다.');
            console.log(response);
        });
    }

    /* 첨부파일 검증 */
    function validation(obj){
        var fileTypes = ['text/plain'];
        if (obj.name.length > 35) {
            alert("파일명이 35자 이하여야 합니다.");
            return false;
        } else if (!obj.name.includes('PJTSUM')) {
            alert("PJTSUM 파일을 올려주세요.")
        } else if (obj.size > (100 * 1024 * 1024)) {
            alert("최대 파일 용량인 100MB를 초과한 파일을 올릴 수 없습니다.");
            return false;
        } else if (obj.name.lastIndexOf('.txt') == -1) {
            alert("파일의 확장자를 txt로 해주세요.");
            return false;
        } else if (!fileTypes.includes(obj.type)) {
            alert("첨부가 불가능한 파일 입니다.");
            return false;
        } else {
            return true;
        }
    }

    $(document).ready(function() {
        
    	var toggleButtons = document.querySelectorAll(".yoko-btn-fold");
        toggleButtons.forEach(button => {
        button.addEventListener("click", function() {
            var targetId = this.getAttribute("data-target");
            var content = document.getElementById(targetId);
            if (content.style.display === "block" || content.style.display === "") {
                content.style.display = "none";
            } else {
                content.style.display = "block";
            }
            this.classList.toggle("active");
            });
        });
    });


    var gridView;
    var dataProvider;

    function grid() {
        var gridViewFields = [
            { fieldName: "sys_id",          dataType: "text" },
            { fieldName: "project_no",      dataType: "text" },
            { fieldName: "contractor",      dataType: "text" },
            { fieldName: "project_name",    dataType: "text" },
            { fieldName: "pm",              dataType: "text" },
            { fieldName: "contract_amt",    dataType: "number" },
            { fieldName: "ptc_last_month",  dataType: "number" },
            { fieldName: "forecast_ptc",    dataType: "number" },
            { fieldName: "variance",        dataType: "text" },
            { fieldName: "poc_percentage",  dataType: "text" },
            { fieldName: "state",           dataType: "text" },
        ];
        

        var sumFooter = { "expression": "sum", "numberFormat": "#,##0" };

        var gridViewColumns = [
            { name: "sys_id",           fieldName: "sys_id",            type: "data",   width: 100,  header: { text: "sysid" },              visible: false, readOnly: true,  editable: false },
            { name: "project_no",       fieldName: "project_no",        type: "data",   width: 100,  header: { text: "Project No." },        visible: true,  readOnly: true,  editable: false, styleName: "ni-rg-col-project_no",             groupFooter: { text: " ", expression: "max" } },
            { name: "contractor",       fieldName: "contractor",        type: "data",   width: 200,  header: { text: "Contractor" },         visible: true,  readOnly: true,  editable: false },
            { name: "project_name",     fieldName: "project_name",      type: "data",   width: 150,  header: { text: "Project Name" },       visible: true,  readOnly: true,  editable: false, styleName: "ni-rg-align-left ni-rg-readonly" },
            { name: "pm",               fieldName: "pm",                type: "data",   width: 150,  header: { text: "PM" },                 visible: true,  readOnly: true,  editable: false, styleName: "ni-rg-align-left ni-rg-readonly",  groupFooter: sumFooter, button: "action", buttonVisibility: "always" },
            { name: "contract_amt",     fieldName: "contract_amt",      type: "number", width: 130,  header: { text: "Contract Amt" },       visible: true,  readOnly: true,  editable: false, styleName: "ni-rg-align-right ni-rg-readonly", numberFormat: "#,##0" },
            { name: "ptc_last_month",   fieldName: "ptc_last_month",    type: "data",   width: 130,  header: { text: "PTC last Mon" },       visible: true,  readOnly: true,  editable: false, styleName: "ni-rg-align-right ni-rg-readonly", numberFormat: "#,##0", footer: { expression: "sum", numberFormat: "#,##0" }, groupFooter: sumFooter },
            { name: "forecast_ptc",     fieldName: "forecast_ptc",      type: "data",   width: 130,  header: { text: "Forecast PTC" },       visible: true,  readOnly: true,  editable: false, styleName: "ni-rg-align-right ni-rg-readonly", numberFormat: "#,##0", groupFooter: { text: "", expression: "sum", numberFormat: "#,###", styleName: "ni-rg-align-right" } },
            { name: "variance",         fieldName: "variance",          type: "data",   width: 130,  header: { text: "Variance" },           visible: true,  readOnly: false, editable: false, styleName: "ni-rg-col-button" },
            { name: "poc_percentage",   fieldName: "poc_percentage",    type: "data",   width: 110,  header: { text: "POC%" },               visible: true,  readOnly: false, editable: false, styleName: "ni-rg-col-button" },
            { name: "state",            fieldName: "state",             type: "data",   width: 120,  header: { text: "State" },              visible: true,  readOnly: false, editable: false, styleName: "ni-rg-col-button" }
        ];
        
        

        var gridViewLayouts = [ 'sys_id', 'project_no', 'contractor', 'project_name', 'pm', 'contract_amt', 'ptc_last_month', 'forecast_ptc', 'variance', 'poc_percentage', 'state' ];

        function initGrid() {
            gridView = new RealGrid.GridView('gridContainer');
			dataProvider = new RealGrid.LocalDataProvider();
            gridView.setDataSource(dataProvider);
            gridView.setColumns(gridViewColumns);
            gridView.setColumnLayout(gridViewLayouts);
            gridView.footers.visible = true;
            gridView.commitEditor();
            gridView.editOptions.commitByCell = true;
            gridView.editOptions.insertable = true;
            gridView.checkBar.visible = false;
            gridView.stateBar.visible = false;
            gridView.onCellClicked = function (grid, clickData) {
								console.log("onCellClicked: " + JSON.stringify(clickData));
						}
            dataProvider.setFields(gridViewFields);
            dataProvider.softDeleting = false;
            dataProvider.setRows(c.data.gridData);
        }

        initGrid();
    }

    grid();
}]]></client_script>
        <controller_as>c</controller_as>
        <css>@charset "UTF-8";&#13;
&#13;
&#13;
body {margin: 0; font-family: "Pretendard"; font-size: 14px; font-weight: 400; line-height: normal;}&#13;
&#13;
.blank {width: 100%; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); }&#13;
.yoko-container {margin: 40px auto 100px; min-width: 1400px; max-width: 1600px; font-family: "Pretendard"; font-size: 14px; font-weight: 400; letter-spacing: 0;}&#13;
.yoko-container * {box-sizing: border-box;}&#13;
.yoko-container .yoko-content {display: flex; gap: 30px; flex-direction: column;}&#13;
.yoko-breadcrumb {color: #425D78;}&#13;
.yoko-title-btn-wrap {display: flex; justify-content: space-between; align-items: center; margin: 8px 0 25px 0;}&#13;
.yoko-title-btn-wrap .yoko-title {margin:0; color: #1C3956; font-family: "Pretendard";font-size: 24px;  font-style: normal;  font-weight: 700; line-height: normal;}&#13;
.yoko-title-btn-wrap .yoko-btn-wrap {display: flex; gap: 4px; margin-bottom: 0;}&#13;
&#13;
.yoko-btn-wrap {display: flex; justify-content: space-between; margin-bottom: 8px;}&#13;
.yoko-btn-wrap &gt; div {display: flex; gap: 4px;}&#13;
&#13;
.yoko-btn {cursor: pointer; border-radius: 4px; text-align: center; font-family: "Pretendard";font-size: 14px;  font-style: normal; font-weight: 400;  padding: 8px 20px 8px 20px;}&#13;
.yoko-btn:disabled  {border: 1px solid #AABBD1; color: #C8CED4;}&#13;
&#13;
.yoko-btn.yoko-btn-outline {background: #fff; border: 1px solid #EAEEF3;  color: #4B5E70; }&#13;
.yoko-btn.yoko-btn-outline:hover  {border: 1px solid #AABBD1;}&#13;
&#13;
.yoko-btn.yoko-btn-fill {background-color: #68B3FC; border: 1px solid #4193E2; color: #fff;}&#13;
.yoko-btn.yoko-btn-fill:hover  {background-color: #4193E2; border: 1px solid #4193E2;}&#13;
&#13;
.yoko-btn.yoko-btn-fill-red {background-color: #FF6D6D; border: 1px solid #E35050; color: #fff;}&#13;
.yoko-btn.yoko-btn-fill-red:hover  {background-color: #E35050; border: 1px solid #E35050;}&#13;
&#13;
&#13;
.yoko-btn-search {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_search.png) no-repeat center center !important;}&#13;
.yoko-btn-search:hover {background-color: #eaeaea;}&#13;
.yoko-btn-add {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_add.png) no-repeat center center !important;}&#13;
.yoko-btn-add:hover {background-color: #eaeaea;}&#13;
.yoko-btn-delete {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_delete.png) no-repeat center center !important;}&#13;
.yoko-btn-delete:hover {background-color: #eaeaea;}&#13;
.yoko-btn-info-fill {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_info_fill.png) no-repeat center center !important;}&#13;
.yoko-btn-info-fill:hover {background-color: #eaeaea;}&#13;
.yoko-btn-attach {border: 1px solid #E1E8F0; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_attach.png) no-repeat center center !important;}&#13;
.yoko-btn-attach:hover {background-color: #eaeaea;}&#13;
.yoko-btn-load {border: 1px solid #E1E8F0; font-weight: 600; padding: 0; min-width: 58px; width: 28px; height: 28px; color: #606060; background:#fff;}&#13;
.yoko-btn-load:hover {background-color: #eaeaea;}&#13;
&#13;
.yoko-search-form {display: flex; gap: 30px; padding: 16px 30px; max-width: 1600px;  background-color: #F7F7F7; border: 1px solid #EDEDED; border-radius: 4px;}&#13;
&#13;
.yoko-form-group .yoko-btn {padding: 5px 10px 5px 10px;}&#13;
.yoko-search-form .yoko-form-group {display: flex; align-items: center; gap: 20px; /*width: 100%; min-width: 240px;*/}&#13;
.yoko-search-form .yoko-form-group label {width:130px; min-width: 130px; text-align: right;}&#13;
.yoko-search-form label {color: #4B5E70; font-family: 'Pretendard'; font-size: 13px; font-style: normal; font-weight: 500; line-height: normal;}&#13;
.yoko-search-form label.yoko-short {width: 80px; min-width: 80px;}&#13;
.yoko-search-form label.yoko-short-100 {width: 100px; min-width: 100px;}&#13;
.yoko-search-form label.yoko-short-110 {width: 110px; min-width: 110px;}&#13;
.yoko-search-form label.yoko-short-120 {width: 120px; min-width: 120px;}&#13;
.yoko-search-form label.yoko-short-130 {width: 130px; min-width: 130px;}&#13;
.yoko-search-form label.yoko-short-135 {width: 135px; min-width: 130px;}&#13;
.yoko-search-form label.yoko-middle {width: 170px; min-width: 170px;}&#13;
.yoko-search-form label.yoko-long {width: 200px; min-width: 200px;}&#13;
.yoko-search-form label.yoko-btn-fill {background-color: #68B3FC;text-align: center; color: #fff; font-weight: 400;  padding: 5px 10px 6px 10px; border-radius: 4px;}&#13;
.yoko-search-form label.yoko-long.yoko-btn-fill {width: calc(200px - 10px);}&#13;
.yoko-search-form label.yoko-middle.yoko-btn-fill {width: calc(170px - 10px);}&#13;
&#13;
.yoko-search-form input,&#13;
.yoko-search-form select,&#13;
.yoko-search-form textarea {font-family: "Pretendard"; font-size: 13px; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); border-radius: 4px; border: 1px solid #E1E8F0; color: #7A8692;}&#13;
.yoko-search-form textarea {max-height: none; width: 100%; padding: 10px 10px 10px 10px; }&#13;
/* .yoko-search-form input[type=date] {width: 140px; } */&#13;
.yoko-search-form input[type=date]::-webkit-calendar-picker-indicator,&#13;
.yoko-search-form input[type=date]::-webkit-inner-spin-button {background: url('icon_calendar.png') no-repeat right center; }&#13;
&#13;
.yoko-search-form select {&#13;
  -moz-appearance:none; /* Firefox */&#13;
  -webkit-appearance:none; /* Safari and Chrome */&#13;
  appearance:none;&#13;
  background-image: url(icon_arrow_down.png);&#13;
  background-repeat: no-repeat;&#13;
  background-position-x: 100%;&#13;
  background-position-y: 1px;&#13;
  line-height: 15px;&#13;
  padding: 6px 30px 5px 10px;&#13;
&#13;
}&#13;
&#13;
.yoko-form-inline {display: flex;gap: 4px; width: calc(100% - 4px); align-items: center;}&#13;
.yoko-form-group-title {padding: 4px 0 8px 0; color: #1C3956; font-family: "Pretendard"; font-size: 14px;font-style: normal;font-weight: 700; line-height: normal;}&#13;
.yoko-form-group-hori  {display: flex;gap: 0; /*width:100%;*/}&#13;
.yoko-flex-responsive {display: flex; gap: 30px;}&#13;
.yoko-form-col {/*width: 100%;*/ display: flex; gap: 8px; flex-direction: column;}&#13;
.yoko-form-col.yoko-gap7 {gap:7px ;}&#13;
.yoko-col100 {width: 100%;}&#13;
.yoko-col60 {width: 60%;}&#13;
.yoko-col50 {width: 50%;}&#13;
.yoko-col40 {width: 40%}&#13;
.yoko-col35 {width: 35%}&#13;
.yoko-col30 {width: 30%}&#13;
.yoko-col20 {width: 20%} &#13;
.yoko-col15 {width: 15%} &#13;
.yoko-col10 {width: 10%} &#13;
&#13;
.yoko-search-form label.checkbox-label {text-align: left;width: auto; min-width: auto; cursor: pointer; display: flex; gap: 10px; align-items: center; justify-content: flex-start; color: #4B5E70; font-family: "Pretendard";  font-size: 13px; font-style: normal; font-weight: 400; line-height: normal;}&#13;
.custom-checkbox {position: relative;}&#13;
.custom-checkbox input { position: absolute;  opacity: 0;  cursor: pointer;  width: 18px; height: 18px; z-index: 1;}&#13;
.custom-checkbox .checkmark {position: relative;  top: 0;  left: 0;  display: block;  height: 18px;  width: 18px;  border-radius: 2px;border: 1px solid #DCE3EB;background: #FFF; overflow: hidden;}&#13;
.custom-checkbox:hover input ~ .checkmark {background-color: #FFF;}&#13;
.custom-checkbox input:checked ~ .checkmark {  background-color: #68B3FC;  border-radius: 2px;  border: 1px solid #68B3FC;}&#13;
.custom-checkbox .checkmark:after {  content: "";  position: absolute;  display: none;}&#13;
.custom-checkbox input:checked ~ .checkmark:after {  display: block;  left: 50%; top: 50%;  height: 16px;  width: 18px;  transform: translate(-50%, -50%);  background: url(icon_checkbox.png) no-repeat center center;}&#13;
&#13;
.custom-checkbox input:disabled ~ .checkmark {border: 1px solid #D1D1D1; background: #E2E2E2; cursor: not-allowed; }&#13;
.custom-checkbox input:checked:disabled ~ .checkmark {background:#E2E2E2 url(icon_checkbox_dis.png) no-repeat center center; }&#13;
.custom-checkbox input:disabled ~ .checkmark:after {background: url(icon_checkbox_dis.png) no-repeat center center;}&#13;
&#13;
.yoko-wid100 {width: 100px !important;}&#13;
.yoko-wid103 {width: 103px !important;}&#13;
.yoko-wid127 {width: 127px !important;}&#13;
.yoko-wid134 {width: 134px !important;}&#13;
.yoko-wid140 {width: 140px !important;}&#13;
.yoko-wid147 {width: 147px !important;}&#13;
.yoko-wid154 {width: 154px !important;}&#13;
.yoko-wid158 {width: 158px !important;}&#13;
.yoko-wid172 {width: 172px !important;}&#13;
.yoko-wid247 {width: 247px !important;}&#13;
.yoko-wid308 {width: 308px !important;}&#13;
.yoko-wid425 {width: 425px !important;}&#13;
.yoko-wid559 {width: 559px !important;}&#13;
.yoko-wid717 {width: 717px !important;}&#13;
&#13;
.yoko-mt-20 {margin-top: 20px;}&#13;
/* .yoko-form-inline select {width: calc(100% - 28px);} */&#13;
.yoko-btn-spacing {width: calc(100% - 32px);}&#13;
&#13;
.yoko-search-form-wrapper {display: flex; gap: 20px; }&#13;
.yoko-search-form-wrap .yoko-search-form-heading {margin-top: 10px; margin-bottom: 5px; font-size: 16px; font-weight: 600; color: #1F3B55;}&#13;
&#13;
.yoko-governance-wrap .yoko-search-form button {width: 100%; min-width: 140px;}&#13;
.yoko-project-wrap .yoko-search-form input[type=text] {width: 100%;}&#13;
&#13;
.yoko-form-group-heading-wrap {display: flex; gap: 9px; justify-content: space-between; align-items: center;}&#13;
.yoko-form-group-heading {font-size: 14px; font-weight: 700; color: #1F3B55;}&#13;
.yoko-form-group-line {flex-grow: 1; height: 1px; background-color: #E1E1E1;}&#13;
.yoko-padding24 {padding: 24px;}&#13;
.yoko-grid-btn-wrap {display: flex; gap: 7px; justify-content: right;}&#13;
&#13;
.yoko-project-wrap {height: 255px;}&#13;
.yoko-project-wrap .yoko-search-form {height: 100%;}&#13;
&#13;
&#13;
/* 모달창 */&#13;
.yoko-modal-normal {padding: 32px 30px; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 768px; height: 240px; background-color: #fff; box-shadow: 0px 2px 30px rgba(0, 0, 0, 0.1); z-index: 100;}&#13;
.yoko-modal-content {position: relative; width: 100%; height: 100%;}&#13;
.yoko-modal-content .yoko-btn-wrap {position: absolute; top: 0; right: 0;}&#13;
.yoko-modal-content .yoko-btn-group {margin-top: 32px;}&#13;
.yoko-modal-content .yoko-btn-group button {padding: 8px 20px;}&#13;
.yoko-modal-content .yoko-btn-wrap button {padding: 6px 10px;}&#13;
&#13;
/* 테이블 형식 */&#13;
.yoko-search-table input,&#13;
.yoko-search-table select,&#13;
.yoko-search-table textarea {font-family: "Pretendard"; font-size: 13px; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); border-radius: 4px; border: 1px solid #E1E8F0; color: #7A8692;}&#13;
.yoko-search-table textarea {max-height: none; width: 100%; padding: 10px 10px 10px 10px; }&#13;
.yoko-search-table input[type=date]::-webkit-calendar-picker-indicator,&#13;
.yoko-search-table input[type=date]::-webkit-inner-spin-button {background: url('icon_calendar.png') no-repeat right center; }&#13;
&#13;
.yoko-search-table select {&#13;
  -moz-appearance:none; /* Firefox */&#13;
  -webkit-appearance:none; /* Safari and Chrome */&#13;
  appearance:none;&#13;
  background-image: url(icon_arrow_down.png);&#13;
  background-repeat: no-repeat;&#13;
  background-position-x: 100%;&#13;
  background-position-y: 1px;&#13;
  line-height: 15px;&#13;
  padding: 6px 30px 5px 10px;&#13;
}&#13;
&#13;
.yoko-search-table-wrap {display: flex; gap: 0;}&#13;
.yoko-search-table tr.yoko-height-short {height: 39px;} &#13;
.yoko-search-table {border-spacing: 0; border-collapse: collapse;}&#13;
.yoko-search-table tr th {padding-right: 16px; text-align: right; background-color: #F7F7F7; border-top: 1px solid #EDEDED; border-bottom: 1px solid #EDEDED;}&#13;
.yoko-search-table tr th.yoko-bg-none {background-color: #fff;}&#13;
.yoko-search-table tr th label {color: #4B5E70; font-family: 'Pretendard'; font-size: 13px; font-style: normal; font-weight: 500; line-height: normal;}&#13;
.yoko-search-table tr td {padding: 5px 10px; border-top: 1px solid #EDEDED; border-bottom: 1px solid #EDEDED;}&#13;
.yoko-search-table tr td input {padding: 5px 10px; width: 100%; height: 100%;}&#13;
.yoko-search-table tr td input:disabled {border: 1px solid #E1E8F0; background: #F1F1F1;}&#13;
.yoko-search-table .yoko-form-inline {width: 100%;}&#13;
&#13;
.yoko-search-table-wrapper {display: flex; gap: 30px;}&#13;
.yoko-search-table-heading {margin-top: 12px; margin-bottom: 5px; font-size: 16px; font-weight: 600; color: #1F3B55;}&#13;
.yoko-table-heading {text-align: left !important; font-size: 14px; font-weight: 700; color: #1F3B55;}&#13;
.yoko-search-table.yoko-empty-col {flex: 1;}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
@media (max-width: 1719px) {&#13;
  .yoko-container {width: 1280px; min-width: 1280px;}&#13;
  .yoko-search-form {gap: 15px;}&#13;
  .yoko-flex-responsive {flex-direction: column; gap: 8px;}&#13;
  .yoko-flex-responsive-row {flex-direction: row; gap: 20px;}&#13;
  .yoko-search-form-company.yoko-col60 {width: 888px;}&#13;
  .yoko-search-form-company .yoko-padding24 {padding: 14px;}&#13;
  .yoko-search-form-company .yoko-search-form {gap: 7px;}&#13;
  .yoko-search-form-governance.yoko-col40 {width: 381px;}&#13;
  .yoko-project-wrap.yoko-col60 {width: 888px;}&#13;
  .yoko-project-wrap.yoko-col40 {width: 381px;}&#13;
  .yoko-project-wrap .yoko-search-form {padding: 18px;}&#13;
&#13;
  .yoko-form-amount-wrap label.yoko-short {width: 130px;}&#13;
  .quotation-responsive label.yoko-short-110 {width: 135px;}&#13;
  .yoko-flag-wrap {margin-top: 15px; height: 100px !important;}&#13;
  .yoko-flag-wrap.yoko-search-form .yoko-form-group {gap: 40px;}&#13;
  .yoko-flag-wrap .yoko-flex-responsive-row {flex-direction: row; gap: 40px;}&#13;
}&#13;
&#13;
/*모달커스텀 모달*/&#13;
.modal {&#13;
  display: none;&#13;
  position: fixed;&#13;
  z-index: 1;&#13;
  padding-top: 60px;&#13;
  left: 0;&#13;
  top: 0;&#13;
  width: 100%;&#13;
  height: 100%;&#13;
  overflow: auto;&#13;
  background-color: rgb(0,0,0);&#13;
  background-color: rgba(0,0,0,0.4);&#13;
}&#13;
&#13;
.modal-content {&#13;
  background-color: #fefefe;&#13;
  margin: 5% auto;&#13;
  padding: 20px;&#13;
  border: 1px solid #888;&#13;
  width: 80%;&#13;
}&#13;
&#13;
.close {&#13;
  color: #aaa;&#13;
  float: right;&#13;
  font-size: 28px;&#13;
  font-weight: bold;&#13;
}&#13;
&#13;
.close:hover,&#13;
.close:focus {&#13;
  color: black;&#13;
  text-decoration: none;&#13;
  cursor: pointer;&#13;
}&#13;
&#13;
&#13;
/*  &#13;
TEST Modal CSS&#13;
*/&#13;
.modal {&#13;
display: none; /* Hidden by default */&#13;
position: fixed; /* Stay in place */&#13;
z-index: 3; /* Sit on top */&#13;
left: 0;&#13;
top: 0;&#13;
width: 100%; /* Full width */&#13;
height: 100%; /* Full height */&#13;
overflow: auto; /* Enable scroll if needed */&#13;
background-color: rgb(0,0,0); /* Fallback color */&#13;
background-color: rgba(0,0,0,0.4); /* Black w/ opacity */&#13;
}&#13;
.modal-content {&#13;
background-color: #fefefe;&#13;
//margin: 5% auto; /* 15% from the top and centered */&#13;
padding: 20px;&#13;
border: 1px solid #888;&#13;
width: 50%; /* Reduced width to 60% */&#13;
}&#13;
.close {&#13;
color: #aaa;&#13;
float: right;&#13;
font-size: 28px;&#13;
font-weight: bold;&#13;
}&#13;
.close:hover,&#13;
.close:focus {&#13;
color: black;&#13;
text-decoration: none;&#13;
cursor: pointer;&#13;
}&#13;
.container {&#13;
list-style-type: none;&#13;
padding: 0;&#13;
}&#13;
.container li {&#13;
padding: 8px 0;&#13;
border-bottom: 1px solid #ddd;&#13;
display: flex;&#13;
justify-content: space-between;&#13;
margin-bottom: 10px;&#13;
box-sizing: border-box; /* Include padding and border in element's total width and height */&#13;
width: 100%; /* Ensure the list items take the full width of the container */&#13;
}&#13;
.highlight-form {&#13;
border: 2px solid red;&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/*리얼그리드 수정*/&#13;
.rg-root {color: #4B5966 !important;  font-family: "Pretendard" !important;   font-size: 14px !important;  font-style: normal !important;  font-weight: 500 !important;  line-height: normal !important;}&#13;
.rg-grid {border: 1px solid #EAEEF3 !important;}&#13;
&#13;
.rg-header {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}&#13;
.rg-header .rg-table tr td {border-right: 1px solid #EAEEF3 !important; border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;} &#13;
.rg-head {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}&#13;
.rg-head .rg-table tr td { border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;}&#13;
&#13;
.rg-body,&#13;
.rg-fixed-body {color: #4B5966 !important;}&#13;
.rg-body .rg-table tr td, &#13;
.rg-fixed-body .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important;}&#13;
.rg-rowbarcontainer .rg-table tr td {background-color: transparent !important;    border-right: 1px solid #EAEEF3 !important;    border-bottom: 1px solid #EAEEF3 !important;}&#13;
.rg-alternate-row {background: #fff !important;}&#13;
.rg-footer {color: #606060 !important; background: #FBFCFF  !important;}&#13;
.rg-footer .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}&#13;
.rg-foot {color: #606060 !important; background: #FBFCFF  !important;}&#13;
.rg-foot .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}&#13;
.rg-focus {border:  2px solid #68B3FC !important;}&#13;
.rg-header-focus {background: #E5F2FF !important; color: #6F7479 !important;}&#13;
.rg-header .rg-table tr td:hover {background: #68B3FC !important; color: #fff !important;}&#13;
.rg-header-select {background: rgb(232 248 240 / 50%) !important;}&#13;
.rg-selection { background: rgb(232 248 240 / 35%) !important; border: 1px solid #15BD66!important;}&#13;
.rg-editor-container { border: 2px solid #27C382 !important; }</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>prfmanagement</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>prfManagement</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	function getGridData(item_sysid, basemonth) {
        var gritem = new GlideRecord("x_yergb_bpm_cost");
        gritem.orderBy("number");
        gritem.query();
        var tableinfo = [];
        while (gritem.next()) {
			tableinfo.push({
				'sys_id': gritem.sys_id.getDisplayValue(),
				'wbs': gritem.wbs.getDisplayValue(),
				'__type': '참고',
				'in_charge': gritem.in_charge.getDisplayValue(),
				'activity_type': gritem.activity_type.getDisplayValue(),
				'activity_rate': parseInt(gritem.activity_rate.getDisplayValue().replace(/,/g, ''), 10) || 0,
				'total_amount': parseInt(gritem.total_amount.getDisplayValue(), 10) || 0,
				'__delete' : 'Del',
				'__insert' : 'Ins',
			});
        }
        return tableinfo;
	}

	function getData(basemonth) {
		var gritem = new GlideRecord("x_yergb_bpm_budget_plan");
		gritem.addJoinQuery('x_yergb_bpm_wbs_budget', "project", "project");
		gritem.addQuery('base_month', basemonth);
		gritem.orderBy("project");
		gritem.query();

		var tableinfo = [];
		while (gritem.next()) {
			tableinfo.push({
				'sys_id' : gritem.sys_id.getDisplayValue(),
				'project_no' : gritem.project.getDisplayValue(),
			    'contractor' : gritem.customername.getDisplayValue(),
				'project_name' : gritem.project_name.getDisplayValue(), 
				'pm' : gritem.pm_name.getDisplayValue(), 
				'contract_amt' : gritem.contract.getDisplayValue(), 
				'ptc_last_month' : gritem.intake_last_month.getDisplayValue(), 
				'forecast_ptc' : isNaN(gritem.forecast_ptc) ? 0 : gritem.forecast_ptc.getDisplayValue(), 
				'state': gritem.state.getDisplayValue(),
				'variance' : 0, 
				'poc_percentage' : 'N/A',
			})
		}
		return tableinfo;
    }


	// data.gridData = getGridData();
	data.gridData = getData('202406');
	data.gridDataStr = JSON.stringify(data.gridData);

})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>yeongink</sys_created_by>
        <sys_created_on>2024-06-24 05:11:44</sys_created_on>
        <sys_id>48e1f96c8347021099decf50ceaad3f1</sys_id>
        <sys_mod_count>452</sys_mod_count>
        <sys_name>prfManagement</sys_name>
        <sys_package display_value="BPM" source="x_yergb_bpm">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_package>
        <sys_policy/>
        <sys_scope display_value="BPM">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_scope>
        <sys_update_name>sp_widget_48e1f96c8347021099decf50ceaad3f1</sys_update_name>
        <sys_updated_by>yeongink</sys_updated_by>
        <sys_updated_on>2024-06-28 12:03:30</sys_updated_on>
        <template><![CDATA[<div class="yoko-container">
  <div class="yoko-breadcrumb">Home > Project Management > PRF Management</div>
  <div class="yoko-title-btn-wrap">
    <h1 class="yoko-title">PRF Management</h1>
    <div class="yoko-btn-wrap">
      <button class="yoko-btn yoko-btn-outline" ng-click="btnClickLoadData()">Load Data</button>
      <button class="yoko-btn yoko-btn-fill" ng-click="uploadPrfFiles()">Upload PRF Files</button>
    </div>
  </div>
  <div class="yoko-content">
    <div class="yoko-search-form-wrap">
      <div class="yoko-search-form">
        <div class="yoko-form-group">
          <label for="base_year_month" class="yoko-short-120">Base Year / Month</label>
          <input type="text" name="base_year_month" value="2024. 05" placeholder="" disabled class="yoko-wid140">
        </div>
        <div class="yoko-form-group">
          <label for="project_number" class="yoko-short-100">Project Number</label>
          <div class="yoko-form-inline">
            <input type="text" name="project_number" value="" placeholder="" class="yoko-wid140">
            <button type="button" class="yoko-btn yoko-btn-search" ng-click="btnClickProjectNumberSearch()"></button>
          </div>
        </div>
        <div class="yoko-form-group">
          <label for="pm_name" class="yoko-short">PM Name</label>
          <div class="yoko-form-inline">
            <input type="text" name="pm_name" value="" placeholder="" class="yoko-wid140">
            <button type="button" class="yoko-btn yoko-btn-search"></button>
          </div>
        </div>
        <div class="yoko-form-group">
          <label for="state" class="yoko-short">State</label>
          <div class="yoko-form-inline">
            <input type="text" name="state" value="" placeholder="" class="yoko-wid140">
            <button type="button" class="yoko-btn yoko-btn-search"></button>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="yoko-container"> 
    <div class="out" id='gridContainer' style="width:100%; height: 450px;"></div>
      <input id="" type="hidden" value="{{data.gridUrl}}">
      <input id="gridData" type="hidden" value="{{data.gridData}}">
      <input id="" type="hidden" value="{{data.gridDataStr}}">
  </div>
  <div class="yoko-modal-normal yoko-search-form" id="modalUpload" style="display:none">
    <form class="yoko-modal-content">
      <div class="yoko-form-col">
        <div class="yoko-form-group">
          <label for="f_year_month" class="yoko-short-100">F.Year, Month</label>
          <input type="text" name="f_year_month" value="202405" placeholder="" disabled class="yoko-wid140">
        </div>
        <input type="file" id="files" onchange="angular.element(this).scope().valueChangeAddFile(this)"style="display: none" multiple>
        <div class="yoko-form-group">
          <label for="project_header" class="yoko-short-100">Project Header</label>
          <input type="text" id="projectHeader" name="project_header" value="" placeholder="" class="yoko-wid425" disabled>
        </div>
        <div class="yoko-form-group">
          <label for="project_detail" class="yoko-short-100">Project Detail</label>
          <input type="text" id="projectDetail" name="project_detail" value="" placeholder="" class="yoko-wid425" disabled>
        </div>
        <div class="yoko-form-group yoko-btn-group">
          <label for="state" class="yoko-short-100"></label>
          <div class="yoko-form-inline">
            <button id="cancel" class="yoko-btn yoko-btn-outline" ng-click="btnClickCancel()">Cancel</button>
            <input type = "submit" class="yoko-btn yoko-btn-fill" ng-click="btnClickAddFile()" value = "Upload">
        </div>
      </div>
      <div class="yoko-btn-wrap">
        <label for="files" class="yoko-btn yoko-btn-fill">Open Files</label>
      </div>
    </form>
  </div>
</div>
<!-- Modal Order type Structure -->
<div id="modalProjectNumber" class="modal" style="display:none;">
  <div class="modal-content">
      <div class="modal-header">
          <span class="close" ng-click="closeModalProjfAectNumber()">&times;</span>
          <h2>{{c.data.modalProjectNumberTitle}}</h2>
      </div>
      <div class="modal-body">
          <ul id="container" class="container">
              <li ng-repeat="item in c.data.itemsProjectNumber">
                <span ng-click="clickProjectNumber(item)">{{item.name}}</span>
              </li>
          </ul>
          <div class="pagination" id="pagination"></div>
      </div>
      <div class="modal-footer">
          <button class="btn btn-primary" ng-click="closeModalProjectNumber()">Close</button>
      </div>
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
