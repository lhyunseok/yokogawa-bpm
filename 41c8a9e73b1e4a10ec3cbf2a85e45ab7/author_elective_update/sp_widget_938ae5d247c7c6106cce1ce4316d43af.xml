<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="DELETE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $location, $rootScope, $timeout) {

    /* widget controller */
    var c = this;
    c.data.isRead = true;
    c.data.reasonCodeMandatory = false
    c.data.reasonCodeRequestDueDateMandatory = false
    c.data.reasonRemarkMandatory = false
    c.data.quotationTypeSelectMandatory = false
    //c.data.copy_sys_id = false	
  
	///팝오버
    
    c.popovers = [
        { id: 1, visible: false, style: {}, width: 500, height: 500 },
        { id: 2, visible: false, style: {}, width: 500, height: 500 }
    ];

    function setPopoverStyle(mouseX, mouseY, width, height) {
        return {
            top: (mouseY - 100) + 'px',  // 마우스 클릭 위치의 Y 좌표 설정 (100px 위)
            left: mouseX + 'px',        // 마우스 클릭 위치의 X 좌표 설정
            zIndex: 9999,               // 항상 다른 창들 위에 존재하도록 z-index 설정
            width: width + 'px',        // 팝오버의 너비 설정
            height: height + 'px',      // 팝오버의 높이 설정
            position: 'absolute',       // 팝오버의 위치를 절대 위치로 설정
            background: '#fff',         // 팝오버의 배경색 설정
            border: '1px solid #ccc',   // 팝오버의 테두리 설정
            borderRadius: '5px',        // 팝오버의 테두리 둥글게 설정
            boxShadow: '0 5px 10px rgba(0,0,0,0.2)' // 팝오버의 그림자 설정
        };
    }

    c.togglePopover = function($event, popoverId) {
        var mouseX = $event.clientX; // 마우스 클릭 위치의 X 좌표
        var mouseY = $event.clientY; // 마우스 클릭 위치의 Y 좌표
        
        c.popovers.forEach(function(popover) {
            if (popover.id === popoverId) {
                popover.visible = !popover.visible;
                if (popover.visible) {
                    popover.style = setPopoverStyle(mouseX, mouseY, popover.width, popover.height);
                }
            } else {
                popover.visible = false;
            }
        });
    };

    c.hidePopover = function(popoverId) {
        c.popovers.forEach(function(popover) {
            if (popover.id === popoverId) {
                popover.visible = false;
            }
        });
    };

    // 외부 클릭 이벤트 처리
    angular.element(document).on('click', function(event) {
        var popover1 = document.getElementById("popover1");
        var popover2 = document.getElementById("popover2");
        var button1 = document.getElementById("button1");
        var button2 = document.getElementById("button2");

        var clickedInsidePopover1 = popover1 && (popover1.contains(event.target) || button1.contains(event.target));
        var clickedInsidePopover2 = popover2 && (popover2.contains(event.target) || button2.contains(event.target));

        if (!clickedInsidePopover1 && !clickedInsidePopover2) {
            $scope.$apply(function() {
                c.popovers.forEach(function(popover) {
                    popover.visible = false;
                });
            });
        }
    });

	
	
	///팝오버
		
		
    /////////////////////////////////////// 파라메터 체크
    c.getUrlParameter = function(param) {
        return $location.search()[param];
    };
    // Function to handle click event
    $scope.btnQuotation = function() {
        if (c.data.quotation) {
            window.location.href = "/ybpm?id=quotation&table=x_yergb_bpm_quotation&sys_id=" + c.data.quotation_sys_id; // Redirect to the URL
        }
    };
    // url 에서 sys_id 가져온다. 
    var urlSysId = c.getUrlParameter('sys_id');
    console.log('Value of yourParameterName:', urlSysId);
    c.data.urlSysId = urlSysId;
    // Call the server script


    var data = {
        message: "Hello from Sender Widget",
        timestamp: new Date(),
        table: "x_yergb_bpm_rfq_entry",
        sys_id: urlSysId
    };

    // 이벤트를 발생시켜 데이터를 전송
    $rootScope.$broadcast('dataFromSenderWidget', data);




    // 오늘 날짜를 변수에 저장
    var currentDate = getCurrentDate();

    c.data.request_date = currentDate
    // 예제: 콘솔에 오늘 날짜를 출력
    //alert('Today is: ' + currentDate);
    // Function to get URL parameters


    //////////////////////////////////// 세이브 클릭하고 데이터 넘기기
    $scope.btnSave = function() {
        // Get the value from the input field using ng-model
			var inputCurrency = document.getElementsByName('currency')[0];

			if (c.data.currency == 'undefined' || !c.data.currency) {
            alert("Mandatory is empty");
            //asterik.style.color = "red";
            c.data.currencyMandatory = true

            inputCurrency.style.border = "2px solid red";
        }
			else{
				if (urlSysId) { //이거(=) 업데이트임 url 에 sysid가 존재하니까
           //alert("UPDTATETE")
            c.data.isUpdate = true;
            c.server.update().then(function(response) {
                location.reload();
                if (response.data && response.data.result) {
                    //location.reload();
                }
            });
        } else { // 이거 새로 넣는거임
           // alert("INSERT")
            c.data.isInsert = true;
            c.server.update().then(function(response) {
                window.location.href = "/ybpm?id=rfqentry&sys_id=" + c.data.redirect_sys_id;
                // Optionally handle the server response if needed
                if (response.data && response.data.result) {
                    //alert(response.data.result);
                }
            });
        }
			}
			
			
			
			
        


    };

    /////////////////////////////////   Assess 버튼 클릭
    $scope.btnAssess = function() {
        //alert("ASSESS?")
        // Call the server script to update the state
        //var asterik = document.getElementsByName('mandatoryQ')[0];
        var quotationTypeSelect = document.getElementsByName('quotation_type_select')[0];

        if (c.data.quotation_type == 'undefined' || !c.data.quotation_type) {
            alert("Mandatory is empty");
            //asterik.style.color = "red";
            c.data.quotationTypeSelectMandatory = true

            quotationTypeSelect.style.border = "2px solid red";
        } else {
            c.data.isUpdate = true;
            c.data.newState = 2;
            c.data.isButton = true;
            c.server.update().then(function(response) {
                // Handle the server response if needed
                console.log('Server response:', response);
                location.reload();
            });
        }
    };

    $scope.btnRequest = function() {
        var reasonCode = document.getElementsByName('reason_code')[0];
        var requestDueDate = document.getElementsByName('request_due_date')[0];
        var remark = document.getElementsByName('remark')[0];
        //var asterik = document.getElementsByName('mandatory')[0];
        //var asterik1 = document.getElementsByName('mandatory')[1];
        //var asterik2 = document.getElementsByName('mandatory')[2];

        // Reset previous highlights
        reasonCode.classList.remove('highlight-form');
        requestDueDate.classList.remove('highlight-form');
        remark.classList.remove('highlight-form');




        // Check for mandatory fields
        if (!c.data.reason_code || !c.data.request_due_date || !c.data.remark) {
            alert("Mandatory is empty");
            c.data.reasonCodeMandatory = true
            c.data.reasonCodeRequestDueDateMandatory = true
            c.data.reasonRemarkMandatory = true
            if (!c.data.reason_code) {
                reasonCode.style.border = "2px solid red";
                //asterik.style.color = "red";
            }

            if (!c.data.request_due_date) {
                requestDueDate.style.border = "2px solid red";
                //asterik1.style.color = "red";

            }

            if (!c.data.remark) {
                remark.style.border = "2px solid red";
                //asterik2.style.color = "red";

            }
        } else {
            c.data.isUpdate = true;
            c.data.newState = 3;
            c.data.isButton = true;
            c.server.update().then(function(response) {
                // Handle the server response if needed
                console.log('Server response:', response);
                location.reload();
            });
        }
    }

    $scope.btnSubmit = function() {
        //alert("SUBMIT?")
        // Call the server script to update the state
        if (c.data.quotation_state != "Completed") {
            alert("Quotation is Not Completed");
        } else {
            c.data.newState = 5;
            c.data.isButton = true;
            c.server.update().then(function(response) {
                // Handle the server response if needed
                console.log('Server response:', response);
                location.reload();
            });
        }
    };
    $scope.btnInProgress = function() {
        //alert("IN PROGRESS?")
        // Get the value from the input field using ng-model
        c.data.newState = 4;
        c.data.isButton = true;

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            location.reload();
        });

        location.reload();
    };

    $scope.btnAccept = function() {
        //alert("ACCEPT?")
        c.data.newState = 4;
        c.data.isButton = true;
        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            location.reload();
        });

    };
    $scope.btnOIReport = function() {
        //alert("OI Report?")
        c.data.newState = 9;
        c.data.isButton = true;
        c.data.isOIReport = true;
        // Call the server script to update the state
        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
					  console.log(c.data.io_sys_id)
            window.location.href = "/ybpm?id=orderintakereport&sys_id=" + c.data.io_sys_id; // Redirect to the URL

            //location.reload();
        });

    };

    $scope.btnReturn = function() {
        //alert("RETURN?")
        c.data.newState = -5;
        c.data.isButton = true;
			
			
					 var confirmed = confirm("Do you really want to reject?");
        if (confirmed) {
            // 사용자가 확인을 클릭했을 때 수행할 작업
            alert("Returned.");
					// Call the server script to update the state
        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            location.reload();
        });
            // 여기서 서버에 요청을 보내거나 다른 작업을 수행할 수 있습니다.
        } else {
            // 사용자가 취소를 클릭했을 때 수행할 작업
        }
			
			
			
        

    };
    $scope.btnCancel = function() {
        //alert("CANCEL?")
        c.data.newState = -8;
        c.data.isButton = true;
        // Call the server script to update the state
        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            location.reload();

        });

    };


    //////////////////////////////////  모달창 관련한 로직

    // Get the modal
    var modal = document.getElementById("modalTest");

    // Get the button that opens the modal
    var btn = document.getElementById("openModalButton");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // Get the close button
    var closeButton = document.getElementById("closeModalButton");

    // When the user clicks the button, open the modal

    // When the user clicks on <span> (x), close the modal
    span.onclick = function() {
        modal.style.display = "none";
        c.data.refer_end_user_modal = false
        c.data.refer_requester_modal = false
        c.data.refer_quotation_modal = false
        c.data.refer_assignment_group_modal = false
        c.data.refer_assigned_to_modal = false
        c.data.refer_contract_modal = false
        c.data.refer_contract_country_modal = false
			c.data.refer_copy_modal = false;
        c.data.items = ""
        c.data.modalTitle = ""
    }

    // When the user clicks on close button, close the modal
    closeButton.onclick = function() {
        modal.style.display = "none";
        c.data.refer_end_user_modal = false
        c.data.refer_requester_modal = false
        c.data.refer_quotation_modal = false
        c.data.refer_assignment_group_modal = false
        c.data.refer_assigned_to_modal = false
        c.data.refer_contract_modal = false
        c.data.refer_contract_country_modal = false
			c.data.refer_copy_modal = false;
        c.data.items = ""
        c.data.modalTitle = ""
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
            c.data.refer_end_user_modal = false
            c.data.refer_requester_modal = false
            c.data.refer_quotation_modal = false
            c.data.refer_assignment_group_modal = false
            c.data.refer_assigned_to_modal = false
            c.data.refer_contract_modal = false
            c.data.refer_contract_country_modal = false
					c.data.refer_copy_modal = false;
            c.data.items = ""
            c.data.modalTitle = ""
        }
    }
 c.isModalVisible = false;

    c.openModal = function() {
        c.isModalVisible = true;
    };

    c.closeModal = function() {
        c.isModalVisible = false;
    };
	
$scope.btnUpdate = function() {
        //alert("CANCEL?")
       var modalElement = document.querySelector('.yoko-modal-content');
        if (c.isModalVisible && !modalElement.contains(event.target)) {
            $scope.$apply(function() {
                c.closeModal();
            });
        }

    };


    $scope.btnRefSalesManager = function(sys_id) {
        c.data.refer_sales_manager_modal = true;
        c.data.isRead = false;
        c.server.update().then(function(response) {
            console.log('Server response:', response);
            c.logSysId = function(number, sys_id, code) {
                c.data.sales_manager = number
                c.data.sales_manager_sys_id = sys_id
                
							
							  modal.style.display = "none";
								c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""
            };
        });
        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };


    $scope.btnRefAssignmentGroup = function(sys_id) {
        c.data.refer_assignment_group_modal = true;
        c.data.isRead = false;

        c.server.update().then(function(response) {
            c.logSysId = function(number, sys_id) {
                //alert('Selected sys_id: ' + sys_id + ' ' + number);
                c.data.assignment_group = number
                c.data.assignment_group_sys_id = sys_id


                modal.style.display = "none";
                c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""


            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };

    $scope.btnRefAssignedTo = function(sys_id) {
        c.data.refer_assigned_to_modal = true;
        c.data.isRead = false;

        c.server.update().then(function(response) {
            console.log('Server response:', response);
            c.logSysId = function(number, sys_id) {
                c.data.assigned_to = number
                c.data.assigned_to_sys_id = sys_id


                modal.style.display = "none";
                c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""
            };
        });
        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };
    $scope.btnRefEndUser = function() {
        c.data.refer_end_user_modal = true;
        c.data.isRead = false;
        c.server.update().then(function(response) {
            console.log('Server response:', response);
        });
        c.logSysId = function(number, sys_id, code) {
            c.data.end_user = number
            c.data.end_user_sys_id = sys_id
            c.data.end_user_code = code


            modal.style.display = "none";
            c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""





        };
        var modal = document.getElementById("modalTest");
        modal.style.display = "block";
    };

    $scope.btnRefContract = function() {
        c.data.refer_contract_modal = true;
        c.data.isRead = false;
        c.server.update().then(function(response) {
            console.log('Server response:', response);
            c.logSysId = function(number, sys_id, code) {
                c.data.contract = number
                c.data.contract_sys_id = sys_id
                c.data.contract_code = code


                modal.style.display = "none";
               c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""
            };

        });
        //debugger
        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };

    $scope.btnRefContractCountry = function(sys_id) {
        c.data.refer_contract_country_modal = true;
        c.data.isRead = false;
        c.server.update().then(function(response) {
            console.log('Server response:', response);
            c.logSysId = function(number, sys_id) {
                c.data.contract_country = number
                c.data.contract_country_sys_id = sys_id


                modal.style.display = "none";
                 c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""
            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };

    $scope.btnRefCurrency = function(sys_id) {
        c.data.refer_currency_modal = true;
        c.data.isRead = false;
        c.server.update().then(function(response) {
            console.log('Server response:', response);
            c.logSysId = function(number, sys_id) {
                c.data.currency = number
                c.data.currency_sys_id = sys_id


                modal.style.display = "none";
                c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""
            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };


    $scope.btnCopy = function() {
        //alert(c.data.isRead)
        c.data.refer_copy_modal = true;
        c.data.isCopy = true;
        c.data.isRead = false;

        c.server.update().then(function(response) {
           // alert("we start copying now")
            console.log('Server response:', response);
            c.logSysId = function(number, sys_id) {
                c.data.isRead = false;
                c.data.copy_sys_id = sys_id




                c.server.update().then(function(response) {
                    alert("we are copying now")
                    c.data.isCopy = false;



                    modal.style.display = "none";
                    c.data.refer_end_user_modal = false
                    c.data.refer_requester_modal = false
                    c.data.refer_quotation_modal = false
                    c.data.refer_assignment_group_modal = false
                    c.data.refer_assigned_to_modal = false
                    c.data.refer_contract_modal = false
                    c.data.refer_contract_country_modal = false
						        c.data.refer_copy_modal = false;

                    c.data.items = ""
                    c.data.modalTitle = ""

                });

            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";


    };


	
    $scope.btnRefQuotation = function(sys_id) {
        c.data.refer_quotation_modal = true;
        c.data.isRead = false;
        c.server.update().then(function(response) {
            // Handle the server response if needed
            // Function to log the sys_id
            c.logSysId = function(number, sys_id) {
                c.data.end_user = number
                c.data.end_user_code = sys_id
            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };
    // In your controller
    // 이거는 어딘가 바뀌는거 감시하는거 
    $scope.$watch('c.data.contract', function(newVal, oldVal) {
        $scope.isContractDummyDisabled = !!newVal; // Set to true if contract has a value, otherwise false
    });
    // Initialize the variable when the controller is first loaded.
    $scope.isContractDummyDisabled = !!$scope.c.data.contract;
    // In your controller
    $scope.$watch('c.data.end_user', function(newVal, oldVal) {
        if (!newVal) {
            $scope.c.data.end_user_code = '';
        }
    });
    // In your controller
    $scope.$watch('c.data.contract', function(newVal, oldVal) {
        if (!newVal) {
            $scope.c.data.contract_code = '';
        }
    });


    // $watchGroup을 사용하여 contract_name, contract_address, contract_country 중 하나라도 값이 들어오면 체크
    $scope.$watchGroup(['c.data.contract_name', 'c.data.contract_address', 'c.data.contract_country'], function(newValues) {
        var hasValue = newValues.some(function(value) {
            return !!value; // 값이 있는지 확인
        });

        // 값이 있으면 isContractDisabled를 true로 설정하여 입력 필드를 비활성화
        $scope.isContractDisabled = hasValue;
    });

    // 초기화 시 체크
    $scope.isContractDisabled = !!(c.data.contract_name || c.data.contract_address || c.data.contract_country);


    // Initialize the variable when the controller is first loaded.
    $scope.isContractDisabled = !!(c.data.contract_name || c.data.contract_address || c.data.contract_country);
    // In your controller
    $scope.$watch(['c.data.contract_name', 'c.data.contract_address', 'c.data.contract_country'], function(newVal, oldVal) {
        if (!newVal) {
            $scope.c.data.end_user = '';
            $scope.c.data.end_user_code = '';
        }
    });



    c.server.update().then(function(response) {
        //c.data.isRead = false;
        //alert(c.data.state)
        if(c.data.state == "Cancelled"){
            $scope.isCancelledDisabled = true;
            $scope.isContractDisabled = true;
            $scope.isContractDummyDisabled = true;
			$scope.popoverContent = $sp.getUser().displayName + ": " + data.popoverContent;

        }
        var loopCnt = 0;
        var timerid = setInterval(function() {
            loopCnt = loopCnt + 1;
            if (loopCnt > 30) {
                clearTimeout(timerid);
                alert('Can not load REALGRID');
            }
  
            if (checkRealGrid()) {
                clearTimeout(timerid);
                drawRealGrid();
            }
        }, 300);
    });








    function checkRealGrid() {
        if (RealGrid) {
            return true;
        }
  
        return false;
    }
  
    function drawRealGrid() {
        containerDetail = document.getElementById('gridContainer');
        dpDetail = new RealGrid.LocalDataProvider(false);
        gvDetail = new RealGrid.GridView(containerDetail);
        gvDetail.setDataSource(dpDetail);

        dpDetail.setFields([
            {fieldName: 'sys_id',             dataType:  'text'},
            {fieldName: 'number',             dataType:  'text'},
            {fieldName: 'version',            dataType:  'text'},
            {fieldName: 'currency_lc',        dataType:  'text'},
            {fieldName: 'total_quote_price',  dataType:  'text'},
            {fieldName: 'total_quote_cost',   dataType:  'text'},
            {fieldName: 'gp_percent',         dataType:  'text'},
            {fieldName: 'mp_amount',          dataType:  'text'},
            {fieldName: 'mp_gap_percent',     dataType:  'text'},
        ]);
  
        gvDetail.setColumns([{
                "name": "sys_id",
                "fieldName": "sys_id",
                "type": "data",
                "width": 0,
                "header": {
                    "text": "sysid",
                },
                "visible" : false,
                  "styleName" : "left-column"
  
            },
            {
                "name": "number",
                "fieldName": "number",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Quotation Number"
                },
                  "styleName" : "left-column"
  
            },
            {
                "name": "version",
                "fieldName": "version",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Version"
                },
                          "styleName" : "left-column"
            },
            {
                "name": "currency_lc",
                "fieldName": "currency_lc",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Currency"
                },
                          "styleName" : "left-column"
            },
            {
                "name": "total_quote_price",
                "fieldName": "total_quote_price",
                "type": "data",
                "width": 120,
                "header": {
                    "text": "Total Quote Price"
                },
                          "styleName" : "left-column"
            },
            {
                "name": "total_quote_cost",
                "fieldName": "total_quote_cost",
                "type": "data",
                "width": 120,
                "header": {
                    "text": "Total Quote Cost"
                },
                          "styleName" : "right-column"
            },
            {
                "name": "gp_percent",
                "fieldName": "gp_percent",
                "type": "data",
                "width": 120,
                "header": {
                    "text": "GP %"
                },
                          "styleName" : "right-column"
            },
            {
                "name": "mp_amount",
                "fieldName": "mp_amount",
                "type": "data",
                "width": 120,
                "header": {
                    "text": "MP Price"
                },
                          "styleName" : "right-column"
            },
            {
                "name": "mp_gap_percent",
                "fieldName": "mp_gap_percent",
                "type": "data",
                "width": 120,
                "header": {
                    "text": "MP Gap %"
                },
                          "styleName" : "right-column"
            },
        ]);
  
        gvDetail.setColumnLayout([
            'sys_id',           
            'number',           
            'version',          
            'currency_lc',      
            'total_quote_price',
            'total_quote_cost', 
            'gp_percent',       
            'mp_amount',        
            'mp_gap_percent',   
        ]);
  
        gvDetail.footers.visible = false;
        gvDetail.commitEditor();
        gvDetail.undoable = true;
        gvDetail.editOptions.commitByCell = true;		
        gvDetail.editOptions.insertable = true;
        dpDetail.softDeleting = true;
        gvDetail.displayOptions.fitStyle = "evenFill";
        gvDetail.setPasteOptions({enabled: true , enableAppend:true, eventEachRow	:true, commitEdit	:true});
        gvDetail.header.height = 40;
        gvDetail.displayOptions.rowHeight = 30;
        
        gvDetail.displayOptions.columnMovable = false;
   
        gvDetail.onCellClicked = function(grid, clickData) {
            var fieldName = clickData.column
            console.log("----*-*-*-*-*");
                console.log(grid);
                console.log(clickData);
            if (fieldName === 'number') {
                //alert('Quotation Number column clicked!');
                
                console.log(c.data.gridDetailData) 
                console.log(c.data.gridDetailData[clickData.dataRow].sys_id);
                window.location.href = "/ybpm?id=quotation&table=x_yergb_bpm_quotation&sys_id=" + c.data.gridDetailData[clickData.dataRow].sys_id

            }
                
        };
        
        //gvDetail.checkBar.visible = false;
        //gvDetail.stateBar.visible = false;
        dpDetail.setRows(c.data.gridDetailData);

    }
  
    $scope.gridDetailBtnClick = function(idx) {
        var v = {
            'rowStat': '',
            'sys_id': '',
            'number': '',
            'wbs_6': '',
            'ms_code': '',
            'description': '',
            'quantity': '',
            'unit_price': '',
            'extended_price': '',
            'unit_cost': '',
            'extended_cost': '',
            'unit_mp': '',
            'mp_amount': '',
            'vendor': '',
            'quotation': paramValue
        }
  
        c.data.gridBtnType = '';
        if (idx == 1) {
            c.data.gridBtnType = 'add';
            //alert("1")
            dpDetail.addRow(v);
        } else if (idx == 2) {
           var curr = gvDetail.getCurrent();
          dpDetail.removeRow(curr.dataRow);
          
  
        } else if (idx == 3) {
            alert("3")
  
            c.data.gridBtnTransact = 'T';
            c.data.gridDetailData = dpDetail.getJsonRows();
            for (var x = 0; x < c.data.gridDetailData.length; x++) {
                c.data.gridDetailData[x].rowStat = dpDetail.getRowState(x);
            }
        }
  
  
  
        console.log(dpDetail.getRowCount());
  
  
        c.server.update().then(function(response) {
            console.log('Server response:', response);
        });
    }
  
       // Create New
    $scope.btnClickNew = function(fieldName, fieldValue) {
  
        c.data.operation = 'createNew';
        c.server.update().then(function(response) {
              window.location.href = "/ybpm?id=quotation&table=x_yergb_bpm_quotation&sys_id=" + c.data.redirect_sys_id;
        }).catch(function(error) {
            console.error('Error saving field:', error);
            alert('Error saving field');
        });
    };
  








}

function getCurrentDate() {
    var today = new Date();
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0'); // January is 0!
    var yyyy = today.getFullYear();

    return yyyy + '-' + mm + '-' + dd;
}]]></client_script>
        <controller_as>c</controller_as>
        <css>@charset "UTF-8";&#13;
&#13;
&#13;
body {margin: 0; font-family: "Pretendard"; font-size: 14px; font-weight: 400; line-height: normal;}&#13;
&#13;
ul {margin: 0; padding: 0;}&#13;
ul li {list-style: none; margin: 0; padding: 0;}&#13;
a {text-decoration: none;}&#13;
.blank {width: 100%; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); }&#13;
.yoko-container {margin: 40px auto 100px; min-width: 1400px; max-width: 1600px; font-family: "Pretendard"; font-size: 14px; font-weight: 400; letter-spacing: 0;}&#13;
.yoko-container * {box-sizing: border-box;}&#13;
.yoko-container .yoko-content {display: flex; gap: 0px; flex-direction: column;}&#13;
.yoko-breadcrumb {color: #425D78;}&#13;
.yoko-title-btn-wrap {display: flex; justify-content: space-between; align-items: center; margin: 8px 0 25px 0;}&#13;
.yoko-title-btn-wrap .yoko-title {margin:0; color: #1C3956; font-family: "Pretendard";font-size: 24px;  font-style: normal;  font-weight: 700; line-height: normal;}&#13;
.yoko-title-btn-wrap .yoko-btn-wrap {display: flex; gap: 4px; margin-bottom: 0;}&#13;
&#13;
.yoko-btn-wrap {display: flex; justify-content: space-between; margin-bottom: 8px;}&#13;
.yoko-btn-wrap &gt; div {display: flex; gap: 4px;}&#13;
&#13;
.yoko-btn {cursor: pointer; border-radius: 4px; text-align: center; font-family: "Pretendard";font-size: 14px;  font-style: normal; font-weight: 400;  padding: 8px 20px 8px 20px;}&#13;
.yoko-btn:disabled  {border: 1px solid #AABBD1; color: #C8CED4;}&#13;
&#13;
.yoko-btn.yoko-btn-outline {background: #fff; border: 1px solid #B2B2B2;  color: #4B5E70; }&#13;
.yoko-btn.yoko-btn-outline:hover  {border: 1px solid #AABBD1;}&#13;
&#13;
.yoko-btn.yoko-btn-fill {background-color: #68B3FC; border: 1px solid #4193E2; color: #fff;}&#13;
.yoko-btn.yoko-btn-fill:hover  {background-color: #4193E2; border: 1px solid #4193E2;}&#13;
&#13;
.yoko-btn.yoko-btn-fill-red {background-color: #FF6D6D; border: 1px solid #E35050; color: #fff;}&#13;
.yoko-btn.yoko-btn-fill-red:hover  {background-color: #E35050; border: 1px solid #E35050;}&#13;
&#13;
.yoko-btn.yoko-btn-fill-accept {&#13;
    background-color: #7DBEFF; /* Slightly more saturated pastel blue background color */&#13;
    border: 1px solid #5C9DD8; /* Slightly darker blue border */&#13;
    color: #fff; /* White text color */&#13;
}&#13;
.yoko-btn.yoko-btn-fill-accept:hover {&#13;
    background-color: #5C9DD8; /* Darker blue on hover */&#13;
    border: 1px solid #5C9DD8; /* Same border color as the hover background */&#13;
}&#13;
&#13;
.yoko-btn.yoko-btn-fill-cancel {&#13;
    background-color: #FF9999; /* Slightly more saturated pastel red background color */&#13;
    border: 1px solid #D47878; /* Slightly darker red border */&#13;
    color: #fff; /* White text color */&#13;
}&#13;
.yoko-btn.yoko-btn-fill-cancel:hover {&#13;
    background-color: #D47878; /* Darker red on hover */&#13;
    border: 1px solid #D47878; /* Same border color as the hover background */&#13;
}&#13;
&#13;
&#13;
.yoko-btn-search {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_search.png) no-repeat center center !important;}&#13;
.yoko-btn-search:hover {background-color: #eaeaea;}&#13;
.yoko-btn-add {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_add.png) no-repeat center center !important;}&#13;
.yoko-btn-add:hover {background-color: #eaeaea;}&#13;
.yoko-btn-delete {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_delete.png) no-repeat center center !important;}&#13;
.yoko-btn-delete:hover {background-color: #eaeaea;}&#13;
.yoko-btn-info-fill {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_info_fill.png) no-repeat center center !important;}&#13;
.yoko-btn-info-fill:hover {background-color: #eaeaea;}&#13;
.yoko-btn-attach {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_attach.png) no-repeat center center !important;}&#13;
.yoko-btn-attach:hover {background-color: #eaeaea;}&#13;
.yoko-btn-load {border: 1px solid #4193E2; font-weight: 400; padding: 0; min-width: 58px; width: 28px; height: 28px; color: #fff; background-color: #68B3FC;}&#13;
.yoko-btn-load:hover {background-color: #4193E2; border: 1px solid #4193E2;}&#13;
.yoko-btn-fold {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_arrow_fold.png) no-repeat center center !important;}&#13;
.yoko-btn-fold:hover {background-color: #eaeaea;}&#13;
.yoko-btn-fold.active {background:#fff url(icon_arrow_unfold.png) no-repeat center center !important;}&#13;
&#13;
&#13;
.yoko-search-form {display: flex; gap: 30px; padding: 16px 30px; max-width: 1600px;  background-color: #F7F7F7; border: 1px solid #B2B2B2; border-radius: 4px;}&#13;
&#13;
.yoko-fold-btn-wrap {display: flex; align-items: center; gap: 10px;}&#13;
&#13;
.yoko-form-group .yoko-btn {padding: 5px 10px 5px 10px;}&#13;
.yoko-search-form .yoko-form-group {display: flex; align-items: center; gap: 20px; /*width: 100%; min-width: 240px;*/}&#13;
.yoko-search-form .yoko-form-group label {width:130px; min-width: 130px; text-align: right;}&#13;
.yoko-search-form label {color: #1F3B55; font-family: 'Pretendard'; font-size: 14px; font-style: normal; font-weight: 500; line-height: normal;}&#13;
.yoko-search-form label.yoko-short {width: 80px; min-width: 80px;}&#13;
.yoko-search-form label.yoko-short-90 {width: 90px; min-width: 100px;}&#13;
.yoko-search-form label.yoko-short-100 {width: 100px; min-width: 100px;}&#13;
.yoko-search-form label.yoko-short-110 {width: 110px; min-width: 110px;}&#13;
.yoko-search-form label.yoko-short-120 {width: 120px; min-width: 120px;}&#13;
.yoko-search-form label.yoko-short-130 {width: 130px; min-width: 130px;}&#13;
.yoko-search-form label.yoko-short-135 {width: 135px; min-width: 130px;}&#13;
.yoko-search-form label.yoko-short-142 {width: 142px; min-width: 130px;}&#13;
.yoko-search-form label.yoko-middle {width: 170px; min-width: 170px;}&#13;
.yoko-search-form label.yoko-long {width: 200px; min-width: 200px;}&#13;
.yoko-search-form label.yoko-btn-fill {background-color: #68B3FC;text-align: center; color: #fff; font-weight: 400;  padding: 5px 10px 6px 10px; border-radius: 4px;}&#13;
.yoko-search-form label.yoko-long.yoko-btn-fill {width: calc(200px - 10px);}&#13;
.yoko-search-form label.yoko-middle.yoko-btn-fill {width: calc(170px - 10px);}&#13;
&#13;
.yoko-search-form input,&#13;
.yoko-search-form select,&#13;
.yoko-search-form textarea {font-family: "Pretendard"; font-size: 14px; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); border-radius: 4px; border: 1px solid #B2B2B2; color: #7A8692;}&#13;
.yoko-search-form textarea {max-height: none; width: 100%; padding: 10px 10px 10px 10px; }&#13;
/* .yoko-search-form input[type=date] {width: 140px; } */&#13;
.yoko-search-form input[type=date]::-webkit-calendar-picker-indicator,&#13;
.yoko-search-form input[type=date]::-webkit-inner-spin-button {background: url('icon_calendar.png') no-repeat right center; }&#13;
&#13;
.yoko-search-form select {&#13;
  -moz-appearance:none; /* Firefox */&#13;
  -webkit-appearance:none; /* Safari and Chrome */&#13;
  appearance:none;&#13;
  background-image: url(icon_arrow_down.png);&#13;
  background-repeat: no-repeat;&#13;
  background-position-x: 100%;&#13;
  background-position-y: 1px;&#13;
  line-height: 15px;&#13;
  padding: 6px 30px 5px 10px;&#13;
&#13;
}&#13;
&#13;
.yoko-form-inline {display: flex;gap: 4px; width: calc(100% - 4px); align-items: center;}&#13;
.yoko-form-group-title {padding: 4px 0 8px 0; color: #1C3956; font-family: "Pretendard"; font-size: 14px;font-style: normal;font-weight: 700; line-height: normal;}&#13;
.yoko-form-group-hori  {display: flex;gap: 0; /*width:100%;*/}&#13;
.yoko-flex-responsive {display: flex; gap: 30px;}&#13;
.yoko-form-col {/*width: 100%;*/ display: flex; gap: 8px; flex-direction: column;}&#13;
.yoko-form-col.yoko-gap7 {gap:7px ;}&#13;
.yoko-col100 {width: 100%;}&#13;
.yoko-col60 {width: 60%;}&#13;
.yoko-col50 {width: 50%;}&#13;
.yoko-col40 {width: 40%}&#13;
.yoko-col35 {width: 35%}&#13;
.yoko-col30 {width: 30%}&#13;
.yoko-col20 {width: 20%} &#13;
.yoko-col15 {width: 15%} &#13;
.yoko-col10 {width: 10%} &#13;
&#13;
.yoko-search-form label.checkbox-label {text-align: left;width: auto; min-width: auto; cursor: pointer; display: flex; gap: 10px; align-items: flex-start; justify-content: flex-start; color: #1F3B55; font-family: "Pretendard";  font-size: 14px; font-style: normal; font-weight: 400; line-height: normal;}&#13;
.custom-checkbox {position: relative;}&#13;
.custom-checkbox input { position: absolute;  opacity: 0;  cursor: pointer;  width: 18px; height: 18px; z-index: 1;}&#13;
.custom-checkbox .checkmark {position: relative;  top: 0;  left: 0;  display: block;  height: 18px;  width: 18px;  border-radius: 2px;border: 1px solid #DCE3EB;background: #FFF; overflow: hidden;}&#13;
.custom-checkbox:hover input ~ .checkmark {background-color: #FFF;}&#13;
.custom-checkbox input:checked ~ .checkmark {  background-color: #68B3FC;  border-radius: 2px;  border: 1px solid #68B3FC;}&#13;
.custom-checkbox .checkmark:after {  content: "";  position: absolute;  display: none;}&#13;
.custom-checkbox input:checked ~ .checkmark:after {  display: block;  left: 50%; top: 50%;  height: 16px;  width: 18px;  transform: translate(-50%, -50%);  background: url(images/icon_checkbox.png) no-repeat center center;}&#13;
&#13;
.custom-checkbox input:disabled ~ .checkmark {border: 1px solid #D1D1D1; background: #E2E2E2; cursor: not-allowed; }&#13;
.custom-checkbox input:checked:disabled ~ .checkmark {background:#E2E2E2 url(icon_checkbox_dis.png) no-repeat center center; }&#13;
.custom-checkbox input:disabled ~ .checkmark:after {background: url(icon_checkbox_dis.png) no-repeat center center;}&#13;
&#13;
.yoko-wid100 {width: 100px !important;}&#13;
.yoko-wid103 {width: 103px !important;}&#13;
.yoko-wid127 {width: 127px !important;}&#13;
.yoko-wid134 {width: 134px !important;}&#13;
.yoko-wid140 {width: 140px !important;}&#13;
.yoko-wid147 {width: 147px !important;}&#13;
.yoko-wid154 {width: 154px !important;}&#13;
.yoko-wid158 {width: 158px !important;}&#13;
.yoko-wid172 {width: 172px !important;}&#13;
.yoko-wid247 {width: 247px !important;}&#13;
.yoko-wid308 {width: 308px !important;}&#13;
.yoko-wid425 {width: 425px !important;}&#13;
.yoko-wid559 {width: 559px !important;}&#13;
.yoko-wid717 {width: 717px !important;}&#13;
&#13;
.yoko-ht100 {height: 100px !important;}&#13;
.yoko-ht200 {height: 200px !important;}&#13;
&#13;
.yoko-mt-20 {margin-top: 20px;}&#13;
.yoko-mb-80 {margin-bottom: 80px;}&#13;
&#13;
.yoko-padding-r20 {padding: 16px 20px 16px 30px;}&#13;
.yoko-scroll {padding-right: 15px;}&#13;
/* .yoko-form-inline select {width: calc(100% - 28px);} */&#13;
.yoko-btn-spacing {width: calc(100% - 32px);}&#13;
.yoko-text-right {text-align: right;}&#13;
&#13;
.yoko-search-form-wrapper {display: flex; gap: 20px; }&#13;
.yoko-search-form-wrap .yoko-search-form-heading {margin-top: 10px; margin-bottom: 5px; font-size: 16px; font-weight: 600; color: #1F3B55;}&#13;
&#13;
.yoko-governance-wrap .yoko-search-form button {width: 100%; min-width: 140px;}&#13;
.yoko-project-wrap .yoko-search-form input[type=text] {width: 100%;}&#13;
&#13;
.yoko-form-group-heading-wrap {display: flex; gap: 9px; justify-content: space-between; align-items: center;}&#13;
.yoko-form-group-heading {font-size: 14px; font-weight: 700; color: #1F3B55;}&#13;
.yoko-form-group-line {flex-grow: 1; height: 1px; background-color: #E1E1E1;}&#13;
.yoko-padding24 {padding: 24px;}&#13;
.yoko-grid-btn-wrap {display: flex; gap: 7px; justify-content: right;}&#13;
&#13;
.yoko-project-wrap {height: 255px;}&#13;
.yoko-project-wrap .yoko-search-form {height: 100%;}&#13;
.yoko-middle-text {width: 10px; text-align: center; color: #4B5E70;}&#13;
&#13;
/* 헤더 */&#13;
.yoko-header-container {width: 100%; height: 59px; background-color: #00488D;}&#13;
.yoko-header-inner {margin: 0 auto; padding: 8px 30px 8px 16px; max-width: 1920px; min-width: 1280px;}&#13;
.yoko-nav-wrap {display: flex; align-items: center; gap: 97px;}&#13;
.yoko-nav ul {display: flex; gap: 60px;}&#13;
.yoko-menu a {display: block; height: 43px; line-height: 43px; font-size: 14px; font-weight: 600; color: #fff;}&#13;
.yoko-depth-arrow {position: relative;}&#13;
.yoko-depth-arrow::after {content: ''; display: block; width: 7px; height: 4px; background: url(icon_header_arrow.svg) no-repeat center center; background-size: contain; position: absolute; top: 50%; right: -12px; transform: translateY(-50%);}&#13;
.yoko-header-right {display: flex; margin-left: auto; align-items: center; gap: 24px;}&#13;
.yoko-header-icon-wrap {display: flex; align-items: center; gap: 15px;}&#13;
.yoko-header-user {display: flex; justify-content: center; align-items: center; width: 35px; height: 35px; border-radius: 50%; background-color: #fff; overflow: hidden;}&#13;
.yoko-header-search {display: flex; align-items: center;}&#13;
.yoko-header-search input {padding: 8px 10px; width: 156px; font-size: 14px; border: none; border-radius: 4px 0 0 4px; outline: none;}&#13;
.yoko-header-search input::placeholder {color: #A7B9CA;}&#13;
.yoko-header-search .yoko-arrow button {border: none; background-color: none; display: flex; align-items: center; width: 34px; height: 32px; background-color: #fff; border-radius: 0 4px 4px 0; cursor: pointer;}&#13;
&#13;
&#13;
.yoko-nav ul.yoko-depth {display: none; position: absolute; background-color: #fff; padding: 20px 16px; width: 267px; height: auto; border-radius: 4px; border: 1px solid #00488D; box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.05);}&#13;
.yoko-nav ul.yoko-depth a {font-size: 14px; font-weight: 500; color: #425D78;}&#13;
.yoko-nav ul.yoko-dep-2-wrap {display: none; flex-direction: column; padding: 14px 12px; gap: 0; background-color: #F6F6F6;}&#13;
.yoko-nav .yoko-dep-1 &gt; a {position: relative; padding: 0 12px;}&#13;
.yoko-nav .yoko-dep-1 &gt; a::after {content: ''; display: block; width: 24px; height: 24px; background: url(icon_arrow_search.svg) no-repeat center center; background-size: contain; position: absolute; top: 50%; right: 5px; transform: translateY(-50%);}&#13;
.yoko-nav .yoko-dep-1 &gt; a.rotate::after {transform: rotate(180deg) translateY(50%);}&#13;
.yoko-nav .yoko-dep-1 &gt; a:hover {background-color: #ececec;}&#13;
.yoko-nav .yoko-dep-2 &gt; a {padding: 0 12px;}&#13;
.yoko-nav .yoko-dep-2 &gt; a:hover {background-color: #fff;}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/* 모달창 */&#13;
.yoko-modal-normal {padding: 32px 30px; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 768px; height: 240px; background-color: #fff; box-shadow: 0px 2px 30px rgba(0, 0, 0, 0.1); z-index: 100;}&#13;
.yoko-modal-content {position: relative; width: 100%; height: 100%;}&#13;
.yoko-modal-content .yoko-btn-wrap {position: absolute; top: 0; right: 0;}&#13;
.yoko-modal-content .yoko-btn-group {margin-top: 32px;}&#13;
.yoko-modal-content .yoko-btn-group button {padding: 8px 20px;}&#13;
.yoko-modal-content .yoko-btn-wrap button {padding: 6px 10px;}&#13;
&#13;
/* 테이블 형식 */&#13;
.yoko-search-table input,&#13;
.yoko-search-table select,&#13;
.yoko-search-table textarea {font-family: "Pretendard"; font-size: 13px; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); border-radius: 4px; border: 1px solid #E1E8F0; color: #7A8692;}&#13;
.yoko-search-table textarea {max-height: none; width: 100%; padding: 10px 10px 10px 10px; }&#13;
.yoko-search-table input[type=date]::-webkit-calendar-picker-indicator,&#13;
.yoko-search-table input[type=date]::-webkit-inner-spin-button {background: url(icon_calendar.png') no-repeat right center; }&#13;
&#13;
.yoko-search-table select {&#13;
  -moz-appearance:none; /* Firefox */&#13;
  -webkit-appearance:none; /* Safari and Chrome */&#13;
  appearance:none;&#13;
  background-image: url(icon_arrow_down.png);&#13;
  background-repeat: no-repeat;&#13;
  background-position-x: 100%;&#13;
  background-position-y: 1px;&#13;
  line-height: 15px;&#13;
  padding: 6px 30px 5px 10px;&#13;
}&#13;
&#13;
.yoko-search-table-wrap {display: flex; gap: 0;}&#13;
.yoko-search-table tr.yoko-height-short {height: 39px;} &#13;
.yoko-search-table {border-spacing: 0; border-collapse: collapse;}&#13;
.yoko-search-table tr th {padding-right: 16px; text-align: right; background-color: #F7F7F7; border-top: 1px solid #EDEDED; border-bottom: 1px solid #EDEDED;}&#13;
.yoko-search-table tr th.yoko-bg-none {background-color: #fff;}&#13;
.yoko-search-table tr th label {color: #4B5E70; font-family: 'Pretendard'; font-size: 13px; font-style: normal; font-weight: 500; line-height: normal;}&#13;
.yoko-search-table tr td {padding: 5px 10px; border-top: 1px solid #EDEDED; border-bottom: 1px solid #EDEDED;}&#13;
.yoko-search-table tr td input {padding: 5px 10px; width: 100%; height: 100%;}&#13;
.yoko-search-table tr td input:disabled {border: 1px solid #E1E8F0; background: #F1F1F1;}&#13;
.yoko-search-table .yoko-form-inline {width: 100%;}&#13;
&#13;
.yoko-search-table-wrapper {display: flex; gap: 30px;}&#13;
.yoko-search-table-heading {margin-top: 12px; margin-bottom: 5px; font-size: 16px; font-weight: 600; color: #1F3B55;}&#13;
.yoko-table-heading {text-align: left !important; font-size: 14px; font-weight: 700; color: #1F3B55;}&#13;
.yoko-search-table.yoko-empty-col {flex: 1;}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
@media (max-width: 1719px) {&#13;
  .yoko-container {width: 1280px; min-width: 1280px;}&#13;
  .yoko-search-form {gap: 15px;}&#13;
  .yoko-flex-responsive {flex-direction: column; gap: 8px;}&#13;
  .yoko-flex-responsive-row {flex-direction: row; gap: 20px;}&#13;
  .yoko-search-form-company.yoko-col60 {width: 888px;}&#13;
  .yoko-search-form-company .yoko-padding24 {padding: 14px;}&#13;
  .yoko-search-form-company .yoko-search-form {gap: 7px;}&#13;
  .yoko-search-form-governance.yoko-col40 {width: 381px;}&#13;
  .yoko-project-wrap.yoko-col60 {width: 888px;}&#13;
  .yoko-project-wrap.yoko-col40 {width: 381px;}&#13;
  .yoko-project-wrap .yoko-search-form {padding: 18px;}&#13;
&#13;
  .yoko-form-amount-wrap label.yoko-short {width: 130px;}&#13;
  .quotation-responsive label.yoko-short-110 {width: 142px;}&#13;
  .yoko-flag-wrap {margin-top: 15px; height: 100px !important;}&#13;
  .yoko-flag-wrap.yoko-search-form .yoko-form-group {gap: 40px;}&#13;
  .yoko-flag-wrap .yoko-flex-responsive-row {flex-direction: row; gap: 40px;}&#13;
&#13;
  .yoko-nav-wrap {gap: 30px;}&#13;
  .yoko-nav ul {gap: 55px;}&#13;
}&#13;
&#13;
&#13;
.yoko-btn-quotation {&#13;
&#13;
  border: 1px solid #E1E8F0;&#13;
&#13;
  padding: 0 10px; /* 좌우 패딩 추가 */&#13;
&#13;
  width : 140px;&#13;
&#13;
  min-width: 30px;&#13;
&#13;
  height: 28px;&#13;
&#13;
  background-color: #fff;&#13;
&#13;
  color: #000;&#13;
&#13;
  font-size: 14px;&#13;
&#13;
  display: inline-flex; /* 중앙 배치를 위한 플렉스박스 사용 */&#13;
&#13;
  align-items: center; /* 수직 중앙 배치 */&#13;
&#13;
  justify-content: center; /* 수평 중앙 배치 */&#13;
&#13;
  cursor: pointer;&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
/*리얼그리드 수정*/&#13;
.rg-root {color: #4B5966 !important;  font-family: "Pretendard" !important;   font-size: 14px !important;  font-style: normal !important;  font-weight: 500 !important;  line-height: normal !important;}&#13;
.rg-grid {border: 1px solid #EAEEF3 !important;}&#13;
&#13;
.rg-header {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}&#13;
.rg-header .rg-table tr td {border-right: 1px solid #EAEEF3 !important; border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;} &#13;
.rg-head {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}&#13;
.rg-head .rg-table tr td { border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;}&#13;
&#13;
.rg-body,&#13;
.rg-fixed-body {color: #4B5966 !important;}&#13;
.rg-body .rg-table tr td, &#13;
.rg-fixed-body .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important;}&#13;
.rg-rowbarcontainer .rg-table tr td {background-color: transparent !important;    border-right: 1px solid #EAEEF3 !important;    border-bottom: 1px solid #EAEEF3 !important;}&#13;
.rg-alternate-row {background: #fff !important;}&#13;
.rg-footer {color: #606060 !important; background: #FBFCFF  !important;}&#13;
.rg-footer .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}&#13;
.rg-foot {color: #606060 !important; background: #FBFCFF  !important;}&#13;
.rg-foot .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}&#13;
.rg-focus {border:  2px solid #68B3FC !important;}&#13;
.rg-header-focus {background: #E5F2FF !important; color: #6F7479 !important;}&#13;
.rg-header .rg-table tr td:hover {background: #68B3FC !important; color: #fff !important;}&#13;
.rg-header-select {background: rgb(232 248 240 / 50%) !important;}&#13;
.rg-selection { background: rgb(232 248 240 / 35%) !important; border: 1px solid #15BD66!important;}&#13;
.rg-editor-container { border: 2px solid #27C382 !important; }&#13;
&#13;
&#13;
&#13;
&#13;
.modal {&#13;
  display: none;&#13;
  position: fixed;&#13;
  z-index: 1;&#13;
  padding-top: 60px;&#13;
  left: 0;&#13;
  top: 0;&#13;
  width: 100%;&#13;
  height: 100%;&#13;
  overflow: auto;&#13;
  background-color: rgb(0,0,0);&#13;
  background-color: rgba(0,0,0,0.4);&#13;
}&#13;
&#13;
.modal-content {&#13;
  background-color: #fefefe;&#13;
  margin: 5% auto;&#13;
  padding: 20px;&#13;
  border: 1px solid #888;&#13;
  width: 80%;&#13;
}&#13;
&#13;
.close {&#13;
  color: #aaa;&#13;
  float: right;&#13;
  font-size: 28px;&#13;
  font-weight: bold;&#13;
}&#13;
&#13;
.close:hover,&#13;
.close:focus {&#13;
  color: black;&#13;
  text-decoration: none;&#13;
  cursor: pointer;&#13;
}&#13;
&#13;
&#13;
/*  &#13;
TEST Modal CSS&#13;
*/&#13;
.modal {&#13;
display: none; /* Hidden by default */&#13;
position: fixed; /* Stay in place */&#13;
z-index: 3; /* Sit on top */&#13;
left: 0;&#13;
top: 0;&#13;
width: 100%; /* Full width */&#13;
height: 100%; /* Full height */&#13;
overflow: auto; /* Enable scroll if needed */&#13;
background-color: rgb(0,0,0); /* Fallback color */&#13;
background-color: rgba(0,0,0,0.4); /* Black w/ opacity */&#13;
}&#13;
.modal-content {&#13;
background-color: #fefefe;&#13;
//margin: 5% auto; /* 15% from the top and centered */&#13;
padding: 20px;&#13;
border: 1px solid #888;&#13;
width: 50%; /* Reduced width to 60% */&#13;
}&#13;
.close {&#13;
color: #aaa;&#13;
float: right;&#13;
font-size: 28px;&#13;
font-weight: bold;&#13;
}&#13;
.close:hover,&#13;
.close:focus {&#13;
color: black;&#13;
text-decoration: none;&#13;
cursor: pointer;&#13;
}&#13;
.container {&#13;
list-style-type: none;&#13;
padding: 0;&#13;
}&#13;
.container li {&#13;
padding: 8px 0;&#13;
border-bottom: 1px solid #ddd;&#13;
display: flex;&#13;
justify-content: space-between;&#13;
margin-bottom: 10px;&#13;
box-sizing: border-box; /* Include padding and border in element's total width and height */&#13;
width: 100%; /* Ensure the list items take the full width of the container */&#13;
}&#13;
.highlight-form {&#13;
border: 2px solid red;&#13;
}&#13;
&#13;
&#13;
&#13;
.popover {&#13;
    position: absolute;&#13;
    top: 50px;&#13;
    left: 50px;&#13;
    z-index: 1060;&#13;
    display: none;&#13;
    max-width: 276px;&#13;
    padding: 1px;&#13;
    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;&#13;
    font-size: 14px;&#13;
    font-weight: 400;&#13;
    line-height: 1.42857143;&#13;
    color: #333;&#13;
    text-align: left;&#13;
    background-color: #fff;&#13;
    border: 1px solid #ccc;&#13;
    border-radius: 3px;&#13;
    box-shadow: 0 5px 10px rgba(0,0,0,.2);&#13;
}&#13;
&#13;
.popover.show {&#13;
    display: block;&#13;
}&#13;
&#13;
.popover .popover-header {&#13;
    padding: 8px 14px;&#13;
    margin: 0;&#13;
    font-size: 14px;&#13;
    background-color: #f7f7f7;&#13;
    border-bottom: 1px solid #ebebeb;&#13;
    border-radius: 3px 3px 0 0;&#13;
}&#13;
&#13;
.popover .popover-body {&#13;
    padding: 9px 14px;&#13;
}&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>rfqentrywd1st</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>rfqEntryWd1st</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	var userLanguage =  gs.getSession().getLanguage() 
	//gs.addInfoMessage('User Language: ' + userLanguage);

	    data.popoverContent = "Server-side generated content here";

var grLabel = new GlideRecord('sys_documentation');
grLabel.addQuery('name', 'x_yergb_bpm_rfq_entry');

if(userLanguage == 'en') {
    grLabel.addQuery('language', 'en');
} else if(userLanguage == 'zh') {
    grLabel.addQuery('language', 'zh');
}  else if(userLanguage == 'ko') {
    grLabel.addQuery('language', 'ko');
} else {
    //alert("what have you done");
    return;
}

grLabel.query();



while(grLabel.next()) {
    if(grLabel.element == 'number') {		
       data.labelNumber = grLabel.label.toString(); // assuming 'value' contains the needed data
    } else if(grLabel.element == 'requestor') {
        data.labelRequestor  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'request_due') {
        data.labelRequestDue  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'yoda_opportunity_no') {
        data.labelYodaOpportunityNo  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'code') {
        data.labelCode  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'risk_management') {
        data.labelRiskManagement = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'state') {
        data.labelState  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 't_cas') {
        data.labelTCAS = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'quotation_state') {
        data.labelQuotationState  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'territory_review') {
        data.labelTerritoryReview  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'remark') {
        data.labelRemark  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'estimated_delivery_date') {
        data.labelEstimatedDeliveryDate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'quotation') {
        data.labelQuotation  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'request_date') {
        data.labelRequestDate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'quotation_due_date') {
        data.labelQuotationDueDate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'estimated_order_date') {
        data.labelEstimatedOrderDate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'quotation_type') {
        data.labelQuotationType  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'end_user') {
        data.labelEndUser  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'project_detail') {
        data.labelProjectDetail  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'reason_code') {
        data.labelReasonCode  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'estimated_oi_amount') {
        data.labelEstimatedOIAmount  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'project_title') {
        data.labelProjectTitle  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'assignment_group') {
        data.labelAssignmentGroup  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'credit_assessment') {
        data.labelCreditAssessment  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'contract_address') {
        data.labelContractAddress  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'assigned_to') {
        data.labelAssignedTo  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'caution') {
        data.labelCaution  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'currency') {
        data.labelCurrency  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'contractor_country') {
        data.labelContractorCountry  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'complete_date') {
        data.labelCompleteDate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'contract_name') {
        data.labelContractName  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'contract') {
        data.labelContract  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'sales_manager') {
        data.labelSalesManager  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'customer_rfq') {
        data.labelCustomerRFQ  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'exchange_rate') {
        data.labelExchangeRate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'total_quote_price_lc') {
        data.labelTotalQuotePriceLC  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'total_quote_price') {
        data.labelTotalQuotePrice  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'submitted_date') {
        data.labelSubmittedDate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'currency_lc') {
        data.labelCurrencyLC  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'exchange_rate') {
        data.labelExchangeRate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'estimated_oi_amount_lc') {
        data.labelEstimatedOIAmountLC  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'project_status') {
        data.labelProjectStatus  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'profit_company') {
        data.labelProfitCompany  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else{
        //gs.addErrorMessage("WHAT ARE YOPU DONG")
    }
}

    /* populate the 'data' object */
    /* e.g., data.table = $sp.getValue('table'); */
        //gs.addErrorMessage("야 정신차려봐")

    // 현재 접속한 유저의 sysid 를 가져옴
    var userName = gs.getUser().getDisplayName()
    var userNameSysId = gs.getUser().getID();



    var grU = new GlideRecord('sys_user');
    grU.get(userNameSysId)
    grUCompany = grU.company
    var grC = new GlideRecord('core_company')
    if (grC.get(grUCompany)) {
        var currency = grC.u_currency.code
       // gs.addInfoMessage(currency)
        data.currency = grC.u_currency.code.toString()
        data.currency_sys_id = grC.u_currency.toString()
       // gs.addInfoMessage( data.currency)
       // gs.addInfoMessage(data.currency_sys_id)

    }

	var urlSysId = $sp.getParameter('sys_id');

    // client script를 통해서 넣어준 유저의 이름, sysid 를 server단으로 가져옴
    data.requestor = userName;
    data.requestor_sys_id = userNameSysId;
	   
		if(!urlSysId){
			data.sales_manager = userName;
	    data.sales_manager_sys_id = userNameSysId;
		}
		
    // 버튼, 요소 노출
    data.showUpdate = false;
    data.showSave = true
    data.showCopy = true
    data.showQuotationTypeSelect = true;

    // server단에서 파라미터로 sys_id를 가져오기
    data.sys_id = $sp.getParameter("sys_id");

    // Select 가져올건데
    var grS = new GlideRecord('x_yergb_bpm_rfq_entry'); // Replace with your table name
    grS.initialize();
    var choices = grS.getElement('quotation_type').getChoices(); // Replace with your field name
    var choicesValue = grS.getElement('quotation_type').getChoiceValue(); // Replace with your field name
    var choiceList = [];
    for (var i = 0; i < choices.length; i++) {
        var choice = choices[i];
        console.log(choice)
        choiceList.push(choice)

    }
    data.choices = choiceList;
    // Select 가져올건데

    if (input && input.isCopy) { //기존 레코드를 읽어와서 업데이트 할거임
			//gs.addErrorMessage("이게 맞나?")
		}
    if (data.sys_id && input && input.isRead) { //기존 레코드를 읽어와서 업데이트 할거임
      	//gs.addErrorMessage("159753")  
		var grI = new GlideRecord('x_yergb_bpm_rfq_entry');
        var requestor
        var requestor_sys_id
        var number
        var request_date
        var complete_date
        var estimated_oi_amount
        var currency
        var currency_sys_id
        var estimated_order_date
        var estimated_delivery_date
        var quotation
        var quotation_sys_id
        var quotation_type
		var quotation_type_label
        var quotation_due_date
        var yoda_opportunity_no
        var assignment_group
        var assigned_to
        var end_user
        var end_user_sys_id
        var end_user_code
        var contract
        var contract_sys_id
        var contract_code
        var contract_name
        var contract_address
        var contract_country
        var project_title
        var project_detail
        var caution
        var reason_code
        var request_due_date
        var remark
        var sales_manager
        var sales_manager_sys_id
        var currency_lc
        var exchange_rate
        var estimated_oi_amount_lc
        var project_status
        var profit_company

        ///////////// 여기서는 아마 뿌려주는 로직을 할듯
        grI.addQuery('sys_id', data.sys_id);
        grI.query();
        while (grI.next()) {
            requestor = grI.requestor.name.toString();
            requestor_sys_id = grI.requestor.toString();
            number = grI.number.toString()
            request_date = grI.request_date.toString()
            complete_date = grI.complete_date.toString()
            estimated_oi_amount = grI.estimated_oi_amount.toString()
            currency = grI.currency.code.toString();
            currency_sys_id = grI.currency.sys_id.toString()
            estimated_order_date = grI.estimated_order_date.toString()
            estimated_delivery_date = grI.estimated_delivery_date.toString()
            quotation_type = grI.quotation_type.toString()
            quotation_due_date = grI.quotation_due_date.toString()
            yoda_opportunity_no = grI.yoda_opportunity_no.toString()
            assignment_group = grI.assignment_group.name.toString()
            assigned_to = grI.assigned_to.name.toString()
            end_user = grI.end_user.name.toString();
            end_user_sys_id = grI.end_user.toString()
            end_user_code = grI.end_user.u_company_code.toString()
            contract = grI.contract.name.toString()
            contract_sys_id = grI.contract.toString()
            contract_code = grI.contract.u_company_code.toString()
            contract_name = grI.contract_name.toString()
            contract_address = grI.contract_address.toString()
            project_title = grI.project_title.toString()
            project_detail = grI.project_detail.toString()
            caution = grI.caution.toString()
            reason_code = grI.reason_code.toString()
            request_due_date = grI.request_due_date.toString()
            remark = grI.remark.toString()
			sales_manager = grI.sales_manager.name.toString()
			sales_manager_sys_id = grI.sales_manager.toString();
            currency_lc = grI.currency_lc.toString()
            exchange_rate = grI.exchange_rate.toString()
            estimated_oi_amount_lc = grI.estimated_oi_amount_lc.toString()
            project_status = grI.project_status.toString()
            profit_company = grI.profit_company.toString()

					//gs.addErrorMessage(currency_sys_id)
            // quotation의 라벨을 가져오는 함수 (하단에 작성 되어있음)
            quotation_type_label = getChoiceLabel('x_yergb_bpm_rfq_entry', 'quotation_type', quotation_type);
        }
        // data 로 html 로 보내줌
        data.requestor_sys_id = requestor_sys_id
        data.requestor = requestor
        data.number = number
        data.request_date = request_date
        data.complete_date = complete_date
        data.estimated_oi_amount = estimated_oi_amount
        data.currency_sys_id = currency_sys_id
        data.currency = currency
        data.estimated_order_date = estimated_order_date
        data.estimated_delivery_date = estimated_delivery_date
        data.quotation_type = quotation_type
        data.quotation_type_label = quotation_type_label
        data.quotation_due_date = quotation_due_date
        data.yoda_opportunity_no = yoda_opportunity_no
        data.assignment_group = assignment_group
        data.assigned_to = assigned_to
        data.end_user = end_user
        data.end_user_code = end_user_code
        data.end_user_sys_id = end_user_sys_id
        data.contract = contract
        data.contract_code = contract_code
        data.contract_sys_id = contract_sys_id
        data.contract_name = contract_name
        data.contract_address = contract_address
        data.contract_country = contract_country
        data.project_title = project_title
        data.project_detail = project_detail
        data.caution = caution
        data.reason_code = reason_code
        data.request_due_date = request_due_date
        data.remark = remark
        data.sales_manager = sales_manager
        data.sales_manager_sys_id = sales_manager_sys_id
        data.currency_lc = currency_lc
        data.exchange_rate = exchange_rate
        data.estimated_oi_amount_lc = estimated_oi_amount_lc
        data.project_status = project_status
        data.profit_company = profit_company

        // Quotation 을 가져오기 위해 , 현재 sys id 를 quotation 테이블에 넣어서 가져옴
        var grQ = new GlideRecord('x_yergb_bpm_quotation');
        var quotation
        var quotation_sys_id
        var quotation_state

        var exchange_rate
        var total_quote_price
        var total_quote_price_lc
        grQ.addQuery('rfq_entry', data.sys_id);
        grQ.query();
        while (grQ.next()) {
            quotation = grQ.number.toString();
            quotation_sys_id = grQ.sys_id.toString();
            quotation_state = grQ.state.getDisplayValue().toString();
            //exchange_rate = grQ.exchange_rate.toString();
            total_quote_price = grQ.total_quote_price.toString();
            total_quote_price_lc = grQ.total_quote_price_lc.toString();
        } 
        data.quotation = quotation
        data.quotation_sys_id = quotation_sys_id
        data.quotation_state = quotation_state

        //data.exchange_rate = exchange_rate
        data.total_quote_price = total_quote_price
        data.total_quote_price_lc = total_quote_price_lc
        //user 의 company를 찾고
        //그 컴패니의 currency의 display value를 가져와야 하는군
        /*
        var grU = new GlideRecord('sys_user');
        grU.get(data.requestor_sys_id)
        grUCompany = grU.company
        var grC = new GlideRecord('core_company')
        if (grC.get(grUCompany)) {
            var currency = grC.u_currency.code
            gs.addInfoMessage(currency)
            data.currency = grC.u_currency.code.toString()

        }
            */
    }
		else if (input && input.isCopy) { //기존 레코드를 읽어와서 업데이트 할거임
      	//gs.addErrorMessage("miraclufaiewhglweahg")  
			  var grI = new GlideRecord('x_yergb_bpm_rfq_entry');
        var requestor
        var requestor_sys_id
        var number
        var request_date
        var complete_date
        var estimated_oi_amount
        var currency
        var currency_sys_id
        var estimated_order_date
        var estimated_delivery_date
        var quotation
        var quotation_sys_id
        var quotation_type
				var quotation_type_label
        var quotation_due_date
        var yoda_opportunity_no
        var assignment_group
        var assigned_to
        var end_user
        var end_user_sys_id
				var end_user_code
        var contract
        var contract_sys_id

        var contract_code
        var contract_name
        var contract_address
        var contract_country
        var project_title
        var project_detail
        var caution
        var reason_code
        var request_due_date
        var remark
        var sales_manager
        var submitted_date
        var customer_rfq
        var currency_lc
        var exchange_rate
        var estimated_oi_amount_lc
        var project_status
        var profit_company


        ///////////// 여기서는 아마 뿌려주는 로직을 할듯
        grI.addQuery('sys_id', input.copy_sys_id);
        grI.query();
        while (grI.next()) {
            requestor = grI.requestor.name.toString();
            requestor_sys_id = grI.requestor.toString();
			sales_manager = grI.sales_manager.name.toString();
			sales_manager_sys_id = grI.sales_manager.toString();
			customer_rfq = grI.customer_rfq.toString();
            //number = grI.number.toString()
            request_date = grI.request_date.toString()
            complete_date = grI.complete_date.toString()
            estimated_oi_amount = grI.estimated_oi_amount.toString()
            currency = grI.currency.code.toString();
            currency_sys_id = grI.currency.sys_id.toString()
            estimated_order_date = grI.estimated_order_date.toString()
            estimated_delivery_date = grI.estimated_delivery_date.toString()
            submitted_date = grI.submitted_date.toString();
            quotation_type = grI.quotation_type.toString()
            quotation_due_date = grI.quotation_due_date.toString()
            yoda_opportunity_no = grI.yoda_opportunity_no.toString()
            assignment_group = grI.assignment_group.name.toString()
            assigned_to = grI.assigned_to.name.toString()
            end_user = grI.end_user.name.toString();
            end_user_sys_id = grI.end_user.toString()
            end_user_code = grI.end_user.u_company_code.toString()
            contract = grI.contract.name.toString()
            contract_sys_id = grI.contract.toString()
            contract_code = grI.contract.u_company_code.toString()
            contract_name = grI.contract_name.toString()
            contract_address = grI.contract_address.toString()
            project_title = grI.project_title.toString()
            project_detail = grI.project_detail.toString()
            caution = grI.caution.toString()
            reason_code = grI.reason_code.toString()
            request_due_date = grI.request_due_date.toString()
            remark = grI.remark.toString()
            currency_lc = grI.currency_lc.toString()
            exchange_rate = grI.exchange_rate.toString()
            estimated_oi_amount_lc = grI.estimated_oi_amount_lc.toString()
            project_status = grI.project_status.toString()
            profit_company = grI.profit_company.toString()

					//gs.addErrorMessage(currency_sys_id)
            // quotation의 라벨을 가져오는 함수 (하단에 작성 되어있음)
            quotation_type_label = getChoiceLabel('x_yergb_bpm_rfq_entry', 'quotation_type', quotation_type);
        }
        // data 로 html 로 보내줌
        data.requestor_sys_id = requestor_sys_id
        data.requestor = requestor
		data.sales_manager_sys_id = sales_manager_sys_id
        data.sales_manager = sales_manager
        data.customer_rfq = customer_rfq
              //data.number = number
        data.request_date = request_date
        data.complete_date = complete_date
        data.estimated_oi_amount = estimated_oi_amount
        data.currency_sys_id = currency_sys_id
        data.currency = currency
        data.estimated_order_date = estimated_order_date
        data.estimated_delivery_date = estimated_delivery_date
        data.submitted_date = submitted_date
        data.quotation_type = quotation_type
        data.quotation_type_label = quotation_type_label
        data.quotation_due_date = quotation_due_date
        data.yoda_opportunity_no = yoda_opportunity_no
        data.assignment_group = assignment_group
        data.assigned_to = assigned_to
        data.end_user = end_user
        data.end_user_code = end_user_code
        data.end_user_sys_id = end_user_sys_id
        data.contract = contract
        data.contract_code = contract_code
        data.contract_sys_id = contract_sys_id
        data.contract_name = contract_name
        data.contract_address = contract_address
        data.contract_country = contract_country
        data.project_title = project_title
        data.project_detail = project_detail
        data.caution = caution
        data.reason_code = reason_code
        data.request_due_date = request_due_date
        data.remark = remark
        data.currency_lc = currency_lc
        data.exchange_rate = exchange_rate
        data.estimated_oi_amount_lc = estimated_oi_amount_lc
        data.project_status = project_status
        data.profit_company = profit_company

        // Quotation 을 가져오기 위해 , 현재 sys id 를 quotation 테이블에 넣어서 가져옴
       /*
			  var grQ = new GlideRecord('x_yergb_bpm_quotation');
        var quotation
        var quotation_sys_id
        var quotation_state
        grQ.addQuery('rfq_entry', data.sys_id);
        grQ.query();
        while (grQ.next()) {
            quotation = grQ.number.toString();
            quotation_sys_id = grQ.sys_id.toString();
            quotation_state = grQ.state.getDisplayValue().toString();
        }
        data.quotation = quotation
        data.quotation_sys_id = quotation_sys_id
        data.quotation_state = quotation_state
				*/
        //user 의 company를 찾고
        //그 컴패니의 currency의 display value를 가져와야 하는군
        /*
        var grU = new GlideRecord('sys_user');
        grU.get(data.requestor_sys_id)
        grUCompany = grU.company
        var grC = new GlideRecord('core_company')
        if (grC.get(grUCompany)) {
            var currency = grC.u_currency.code
            gs.addInfoMessage(currency)
            data.currency = grC.u_currency.code.toString()

        }
            */
    }
	
	

    //////////////// 파라미터에 SYS_ID가 있는지 체크 하는거다. 
    if (input && input.urlSysId) {
        var urlSysId = input.urlSysId;
        var gr = new GlideRecord('x_yergb_bpm_rfq_entry');
        gr.get(input.urlSysId);
        data.state = gr.state.getDisplayValue();
        // 현재 STATE 에 따라서, 버튼들의 노출도를 전부 조절한다 여기서
        if (gr.state.getDisplayValue() == "New" &&    (   gs.getUser().isMemberOf('YCN Sales Group') ||  gs.getUser().isMemberOf('YKO Sales Group')   ) ) {
            data.showAssess = true;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true
            data.showOIReport = false;
            data.showQuotationTypeSelect = true;
            data.showQuotationType = false;
        } else if (gr.state.getDisplayValue() == "Assess" && (gs.getUser().isMemberOf('YCN Sales Group') ||gs.getUser().isMemberOf('YKO Sales Group') )) {
            data.showAssess = false;
            data.showRequest = true;
            data.showSubmit = false;
            data.showInProgress = true;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true
            data.showCopy = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        } else if (gr.state.getDisplayValue() == "Requested" && ( gs.getUser().isMemberOf('YCN_Sales_Engineer_Group') || gs.getUser().isMemberOf('YKO_Sales_Engineer_Group') ) ) {
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = true;
            data.showReturn = true;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true
            data.showCopy = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        } else if (gr.state.getDisplayValue() == "Returned" && (gs.getUser().isMemberOf('YCN Sales Group') ||gs.getUser().isMemberOf('YKO Sales Group') )) {
            data.showAssess = true;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = true;
            data.showUpdate = true;
            data.showSave = true
            data.showCopy = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        } else if (gr.state.getDisplayValue() == "In Progress") {
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = true;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true
            data.showCopy = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        } else if (gr.state.getDisplayValue() == "Submitted" ) {
            data.showAssess = false;
            //data.showRequest = false;
            data.showSubmit = false;
            //data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true;
            data.showCopy = false
            data.showOIReport = true;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
            if(data.quotation_type_label == "Budgetary"){
                data.showInProgress = true;
            }
            else if(data.quotation_type_label == "Submission to Customers"){
                data.showRequest = true;
            }
            else{
                gs.addInfoMessage("how creative")
            }
        } else if (gr.state.getDisplayValue() == "Completed" ||(gs.getUser().isMemberOf('YCN_Sales_Engineer_Group') || gs.getUser().isMemberOf('YKO_Sales_Engineer_Group') ) ) {
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = false;
            data.showSave = false;
            data.showCopy = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        }else {
          //  gs.addErrorMessage("who are you")
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = false;
            data.showSave = false;
            data.showCopy = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        }

        // 이거는 완전히 새로운 상태일때  완전 INSERT
/*
			if (gr.requestor != gs.getUser().getID()) {

            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = false;
            data.showSave = false
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        }
*/
		if((gs.getUser().isMemberOf('YCN Sales Group') ||gs.getUser().isMemberOf('YKO Sales Group') ) &&  gr.state.getDisplayValue() == "In Progress" && data.quotation_state != 'Completed'){ // 세일즈 그룹이고, in progress 이고, q type 이 complete 가 아니면 버튼들 
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = false;
            data.showSave = false;
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        }  
        
        if((gs.getUser().isMemberOf('YCN_Sales_Engineer_Group') || gs.getUser().isMemberOf('YKO_Sales_Engineer_Group') ) &&  gr.state.getDisplayValue() == "In Progress"){  //엔지니어 그룹이고, in progress 이고 
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = false;
            data.showSave = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        }


        /////////// 버튼을 누르면 STATE가 바뀐다. 
        if (input.isButton) {
            var grA = new GlideRecord('x_yergb_bpm_rfq_entry');
            grA.get(input.urlSysId);
            grA.setValue('state', input.newState)
            grA.update()
        }


    }


    //////////////////////// SAVE 버튼을 눌렀을때 ---- INSERT거나 UPDATE거나의 분기점
    if (input && input.isInsert) { // 없으면 오류 뜸, 둘다 있어야 함.
      //gs.addErrorMessage("야 정신차려봐 isInsert") 
		   	var requestor = input.requestor_sys_id
		   	var sales_manager = input.sales_manager_sys_id
		   	var customer_rfq = input.customer_rfq
        var request_date = input.request_date
        var complete_date = input.complete_date
        var estimated_oi_amount = getValueOrEmptyString(input.estimated_oi_amount)
        var currency = input.currency_sys_id
				//gs.addErrorMessage(currency)
        var estimated_order_date = input.estimated_order_date
        var estimated_delivery_date = input.estimated_delivery_date
        var quotation_due_date = input.quotation_due_date
        var submitted_date = input.submitted_date;
        var quotation_type = input.quotation_type
        var yoda_opportunity_no = getValueOrEmptyString(input.yoda_opportunity_no)
        var assignment_group = input.assignment_group_sys_id
        var assigned_to = input.assigned_to_sys_id
        var end_user = input.end_user_sys_id
        var contract = input.contract_sys_id
        var contract_name = getValueOrEmptyString(input.contract_name)
        var contract_address = getValueOrEmptyString(input.contract_address)
        var contract_country = input.contract_country
        var project_title = getValueOrEmptyString(input.project_title)
        var project_detail = getValueOrEmptyString(input.project_detail);
        var caution = getValueOrEmptyString(input.caution)
        var reason_code = getValueOrEmptyString(input.reason_code)
        var request_due_date = input.request_due_date
        var remark = getValueOrEmptyString(input.remark)
        var currency_lc = input.currency_lc
        var exchange_rate = input.exchange_rate
        var estimated_oi_amount_lc = input.estimated_oi_amount_lc
        var project_status = input.project_status
        var profit_company = input.profit_company

        var gr = new GlideRecord('x_yergb_bpm_rfq_entry');
        gr.initialize();
        gr.setValue('requestor', requestor)
        gr.setValue('sales_manager', sales_manager)
        gr.setValue('customer_rfq', customer_rfq)
        gr.setValue('request_date', request_date)
        gr.setValue('complete_date', complete_date)
        gr.setValue('currency', currency)
        gr.setValue('estimated_oi_amount', estimated_oi_amount)
        gr.setValue('estimated_order_date', estimated_order_date)
        gr.setValue('estimated_delivery_date', estimated_delivery_date)
        gr.setValue('submitted_date', submitted_date)
        gr.setValue('quotation_due_date', quotation_due_date)
        gr.setValue('yoda_opportunity_no', yoda_opportunity_no)
        gr.setValue('quotation_type', quotation_type)
        gr.setValue('assignment_group', assignment_group)
        gr.setValue('assigned_to', assigned_to)
        gr.setValue('end_user', end_user)
        gr.setValue('contract', contract)
        gr.setValue('contract_name', contract_name)
        gr.setValue('contract_address', contract_address)
        gr.setValue('contract_country', contract_country)
        gr.setValue('project_title', project_title)
        gr.setValue('project_detail', project_detail)
        gr.setValue('caution', caution)
        gr.setValue('reason_code', reason_code)
        gr.setValue('request_due_date', request_due_date)
        gr.setValue('remark', remark)
        gr.setValue('currency_lc', currency_lc)
        gr.setValue('exchange_rate', exchange_rate)
        gr.setValue('estimated_oi_amount_lc', estimated_oi_amount_lc)

        gr.setVAlue('project_status',project_status)
        gr.setVAlue('profit_company',profit_company)

        
        gr.insert();
        data.redirect_sys_id = gr.getUniqueValue();;
       // gs.addErrorMessage("quotation_type")
       // gs.addErrorMessage(quotation_type)

    } else if (input && input.isUpdate) {
     //gs.addErrorMessage("야 정신차려봐 isUpdate")
			var requestor = input.requestor_sys_id
            var sales_manager = input.sales_manager_sys_id
            var customer_rfq = input.customer_rfq

        var request_date = input.request_date
        var complete_date = input.complete_date
        var estimated_oi_amount = getValueOrEmptyString(input.estimated_oi_amount)
        var currency = input.currency_sys_id

        var estimated_order_date = input.estimated_order_date
        var estimated_delivery_date = input.estimated_delivery_date
        var submitted_date = input.submitted_date;

        var quotation_due_date = input.quotation_due_date
        var quotation_type = input.quotation_type
        var yoda_opportunity_no = getValueOrEmptyString(input.yoda_opportunity_no)
        var assignment_group = input.assignment_group_sys_id
        var assigned_to = input.assigned_to_sys_id
        var end_user = input.end_user_sys_id
        var contract = input.contract_sys_id
        var contract_name = getValueOrEmptyString(input.contract_name)
        var contract_address = getValueOrEmptyString(input.contract_address)
        var contract_country = input.contract_country
        var project_title = getValueOrEmptyString(input.project_title)
        var project_detail = getValueOrEmptyString(input.project_detail);
        var caution = getValueOrEmptyString(input.caution)
        var reason_code = getValueOrEmptyString(input.reason_code)
        var request_due_date = input.request_due_date
        var remark = getValueOrEmptyString(input.remark)
        var currency_lc = input.currency_lc
        var exchange_rate = input.exchange_rate
        var estimated_oi_amount_lc = input.estimated_oi_amount_lc
        
        var project_status = input.project_status
        var profit_company = input.profit_company

        var grU = new GlideRecord('x_yergb_bpm_rfq_entry');

        ///////////// 여기서는 아마 뿌려주는 로직을 할듯
        grU.get(input.urlSysId);
        grU.setValue('requestor', requestor)
        grU.setValue('sales_manager', sales_manager)
        grU.setValue('customer_rfq', customer_rfq)
			
        grU.setValue('request_date', request_date)
        grU.setValue('complete_date', complete_date)
        grU.setValue('estimated_oi_amount', estimated_oi_amount)
        grU.setValue('currency', currency)

        grU.setValue('estimated_order_date', estimated_order_date)
        grU.setValue('estimated_delivery_date', estimated_delivery_date)
        grU.setValue('submitted_date', submitted_date)
        grU.setValue('quotation_due_date', quotation_due_date)
        grU.setValue('quotation_type', quotation_type)

        grU.setValue('yoda_opportunity_no', yoda_opportunity_no)
        grU.setValue('assignment_group', assignment_group)
        grU.setValue('assigned_to', assigned_to)
        grU.setValue('end_user', end_user)
        grU.setValue('contract', contract)
        grU.setValue('contract_name', contract_name)
        grU.setValue('contract_address', contract_address)
        grU.setValue('contract_country', contract_country)
        grU.setValue('project_title', project_title)
        grU.setValue('project_detail', project_detail)
        grU.setValue('caution', caution)
        grU.setValue('reason_code', reason_code)
        grU.setValue('request_due_date', request_due_date)
        grU.setValue('remark', remark)
        grU.setValue('currency_lc', currency_lc)
        grU.setValue('exchange_rate', exchange_rate)
        grU.setValue('estimated_oi_amount_lc', estimated_oi_amount_lc)

        grU.setValue('project_status', project_status)
        grU.setValue('profit_company', profit_company)


        grU.update()
       // gs.addErrorMessage("quotation_type")
       // gs.addErrorMessage(quotation_type)

    }



    if (input && input.isOIReport) {
        //gs.addErrorMessage("야 정신차려봐 isUpdate")
        gs.addInfoMessage("원하는 곳에 옴")
        gs.addInfoMessage(input.number.toString())
        var inputRawNumber = input.number.toString()
				inputRawNumber = inputRawNumber.substring(3)
        var oi = new GlideRecord('x_yergb_bpm_oi_report');
        oi.addQuery('number', 'OI' + inputRawNumber );
				oi.query();
        while(oi.next()) {
			   data.io_sys_id = oi.sys_id.toString()
					gs.addInfoMessage(oi.sys_id)
					gs.addInfoMessage(data.io_sys_id)
				}
				 
       }


    // 여기서는 전부 REFERENCE 버튼과 관련된 로직
    if (input && input.refer_sales_manager_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('sys_user');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                //column3: gr.getValue('sys_id')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "Sales Manager"
    }

    if (input && input.refer_quotation_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('x_yergb_bpm_quotation');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('sys_id')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "QUOTATION"

    }

    if (input && input.refer_assignment_group_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('sys_user_group');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('description')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "ASSIGNMENT GROUP"

    }

    if (input && input.refer_assigned_to_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('sys_user');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('email')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "ASSIGNED TO"

    }
    if (input && input.refer_end_user_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('core_company');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('u_company_code'),
                column4: gr.getValue('city')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "END USER"
    }

    if (input && input.refer_contract_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('core_company');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('u_company_code'),
                column4: gr.getValue('city')

            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "CONTRACT COMPANY"

    }

    if (input && input.refer_contract_country_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('core_country');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('sys_id')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "COUNTRY"

    }


    if (input && input.refer_currency_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('fx_currency');
        gr.addQuery('active', true);
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('code'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('name')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "CURRENCY"

    }

	if (input && input.refer_copy_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('x_yergb_bpm_rfq_entry');
        gr.addQuery('active', true);
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('number'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('quotation_type'),
                column4: gr.getValue('project_title')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "COPY"

    }
	
    function getValueOrEmptyString(value) {
        return typeof value === 'undefined' ? '' : value;
    }

    function getChoiceLabel(table, element, value) {
        var gr = new GlideRecord('sys_choice');
        gr.addQuery('name', table); // 테이블 이름
        gr.addQuery('element', element); // 필드 이름
        gr.addQuery('value', value); // 선택 값
        gr.query();

        if (gr.next()) {
            return gr.getValue('label'); // 선택 필드의 보이는 값 반환
        } else {
            return 'none';
        }
    }




    var gr = new GlideRecord("x_yergb_bpm_quotation");
        gr.orderBy("version");
        gr.addEncodedQuery('rfq_entry=' + urlSysId);
        gr.query();
        var gridDetailData = [];
        while (gr.next()) {
            gridDetailData.push({
                'sys_id': gr.sys_id.getDisplayValue(),
                'number': gr.number.getDisplayValue(),
                'version': gr.version.getDisplayValue(),
                'currency_lc': gr.currency_lc.getDisplayValue(),
                'total_quote_price': gr.total_quote_price.getDisplayValue(),
                'total_quote_cost': gr.total_quote_cost.getDisplayValue(),
                'gp_percent': gr.gp_percent.getDisplayValue(),
                'mp_amount': gr.mp_amount.getDisplayValue(),
                'mp_gap_percent': gr.mp_gap_percent.getDisplayValue()
    
            });
				data.gridDetailData = gridDetailData;
        }



})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>sungsoo@sorin.co.kr</sys_created_by>
        <sys_created_on>2024-06-29 15:07:54</sys_created_on>
        <sys_id>938ae5d247c7c6106cce1ce4316d43af</sys_id>
        <sys_mod_count>17</sys_mod_count>
        <sys_name>rfqEntryWd1st</sys_name>
        <sys_package display_value="BPM" source="x_yergb_bpm">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_package>
        <sys_policy/>
        <sys_scope display_value="BPM">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_scope>
        <sys_update_name>sp_widget_938ae5d247c7c6106cce1ce4316d43af</sys_update_name>
        <sys_updated_by>sungsoo@sorin.co.kr</sys_updated_by>
        <sys_updated_on>2024-06-29 15:45:31</sys_updated_on>
        <template><![CDATA[<link id="style-link" href="https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid-style.css" rel="stylesheet"/>
<script defer type="text/javascript" src="https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid.2.7.2.min.js"> </script>
<script defer>
  var realGrid2Lic = 'upVcPE+wPOmtLjqyBIh9RkM/nBOseBrflwxYpzGZyYkkSQt0t0CTeCSk1qaDqTRZ5JoV9H143uMO5+/xJSE3Lj4YewEIhlh/';
</script>

<div ng-controller="PopoverController as c">
    <div class="yoko-container">
        <div class="yoko-breadcrumb">Home > Quotation Request</div>
        <div class="yoko-title-btn-wrap">
            <h1 class="yoko-title">Quotation Request</h1>
            <div class="yoko-btn-wrap">
                <button class="yoko-btn yoko-btn-fill-red" ng-if="data.showCancel" ng-click="btnCancel()">Cancel</button>
                <button class="yoko-btn yoko-btn-fill-red" ng-if="data.showReturn" ng-click="btnReturn()">Return</button>
                <button class="yoko-btn yoko-btn-fill-accept" ng-if="data.showAccept" ng-click="btnAccept()">Accept</button>
                <button class="yoko-btn yoko-btn-outline" ng-if="data.showOIReport" ng-click="btnOIReport()">OI Report</button>
                <button class="yoko-btn yoko-btn-outline" ng-if="data.showCopy" ng-click="btnCopy()">Copy</button>
                <button class="yoko-btn yoko-btn-outline" ng-if="data.showInProgress" ng-click="btnInProgress()">In Progress</button>
                <button class="yoko-btn yoko-btn-outline" ng-if="data.showSubmit" ng-click="btnSubmit()">Submit Quote</button>
                <button class="yoko-btn yoko-btn-outline" ng-if="data.showRequest" ng-click="btnRequest()">Request Quote</button>
                <button class="yoko-btn yoko-btn-outline" id="AssessButton" ng-if="data.showAssess" ng-click="btnAssess()">Assess</button>
                <!--button class="yoko-btn yoko-btn-outline" ng-click="btnUpdate()">Update</button-->
                <button class="yoko-btn yoko-btn-fill" ng-if="data.showSave" id="saveButton" ng-click="btnSave()">Save</button>
            </div>
        </div>

        <div class="yoko-content">
            <div class="yoko-search-form-wrap">
                <div class="yoko-search-form">
                    <div class="yoko-flex-responsive">
                        <div class="yoko-form-col">

                            <div class="yoko-form-group">
                                <label for="request_no" class="yoko-short">{{data.labelNumber}}</label>
                                <input type="text" name="request_no" value="" placeholder="" ng-model="c.data.number" disabled>
                            </div>

                            <div class="yoko-form-group">
                                <label for="requester_no" class="yoko-short">{{data.labelRequestor}}</label>
                                <div class="yoko-form-inline">
                                    <input type="text" name="requester_no" ng-model="c.data.requestor" disabled>
                                    <input type="text" name="requestor_no_sys_id" value="" disabled ng-model="c.data.requestor_sys_id" ng-style="{'display': 'none'}">
                                    <button id="button2" type="button" class="yoko-btn yoko-btn-search" ng-click="c.togglePopover($event, 2)"></button>
                                </div>
                            </div>

                            <div class="yoko-form-group">
                                <label for="sales_manager" class="yoko-short">{{data.labelSalesManager}}</label>
                                <input type="text" name="request_no" value="" placeholder="" ng-model="c.data.sales_manager" readonly>
                                <input type="text" name="requestor_no_sys_id" value="" ng-model="c.data.sales_manager_sys_id" ng-style="{'display': 'none'}" readonly>
                                <button id="button1" type="button" class="yoko-btn yoko-btn-search" ng-click="c.togglePopover($event, 1)" ng-style="{'display': 'none'}"></button>
                                <button type="button" class="yoko-btn yoko-btn-search" ng-click="btnRefSalesManager()" ng-disabled="isCancelledDisabled"></button>
                            </div>

                            <div class="yoko-form-group">
                                <label for="customer_rfq" class="yoko-short">{{data.labelCustomerRFQ}}</label>
                                <input type="text" name="request_no" value="" placeholder="" ng-model="c.data.customer_rfq" ng-disabled="isCancelledDisabled">
                            </div>

                            

                        </div>

                        <div class="yoko-form-col">

                            <div class="yoko-form-group">
                                <label for="req_date" class="yoko-short-120">{{data.labelRequestDate}}</label>
                                <input type="date" value={{data.request_date}} name="req_date" ng-model="c.data.request_date" disabled>
                            </div>

                            <div class="yoko-form-group">
                                <label for="orderdate" class="yoko-short-120">{{data.labelEstimatedOrderDate}}</label>
                                <input type="date" name="orderdate" id="orderdate" value={{data.estimated_order_date}} ng-model="c.data.estimated_order_date" ng-disabled="isCancelledDisabled">
                            </div>

                            <div class="yoko-form-group">
                                <label for="deliverydate" class="yoko-short-120">{{data.labelEstimatedDeliveryDate}}</label>
                                <input type="date" name="deliverydate" id="deliverydate" value={{data.estimated_delivery_date}} ng-model="c.data.estimated_delivery_date" ng-disabled="isCancelledDisabled">
                            </div>

                            <div class="yoko-form-group">
                                <label for="quotationdate" class="yoko-short-120">{{data.labelQuotationDueDate}}</label>
                                <input type="date" name="quotationdate" id="quotationdate" value={{data.quotation_due_date}} ng-model="c.data.quotation_due_date" ng-disabled="isCancelledDisabled">
                            </div>

                            <div class="yoko-form-group">
                                <label for="req_date" class="yoko-short-120">{{data.labelSubmittedDate}}</label>
                                <input type="date" value={{data.request_date}} name="submitted_date" ng-model="c.data.submitted_date" disabled>
                            </div>

                            <div class="yoko-form-group">
                                <label for="comp_date" class="yoko-short-120">{{data.labelCompleteDate}}</label>
                                <input type="date" value={{data.request_date}} name="complete_date" ng-model="c.data.complete_date" disabled>
                            </div>

                        </div>
                    </div>


                    <div class="yoko-form-col">

                        <div class="yoko-form-group">
                            <label for="type" class="yoko-short-120">
                                <h5 name="mandatoryCurrency" style="display: inline; margin: 0;  color: red" ng-if="c.data.currencyMandatory">✻</h5> {{data.labelCurrency}}
                            </label>
                            <div class="yoko-form-inline">
                                <input type="text" name="currency" ng-model="c.data.currency" class="yoko-wid140" readonly>
                                <input type="text" name="currency_sys_id" ng-model="c.data.currency_sys_id" placeholder="" ng-style="{'display': 'none'}" readonly>
                                <button type="button" class="yoko-btn yoko-btn-search" ng-click="btnRefCurrency()" ng-disabled="isCancelledDisabled"></button>
                            </div>
                        </div>

                        <div class="yoko-form-group">
                            <label for="exchange_rate" class="yoko-short-120">{{data.labelCurrencyLC}}</label>
                            <input type="text" name="est_oi_amount" value="" placeholder="" ng-model="c.data.currency_lc" disabled>
                        </div>

                        <div class="yoko-form-group">
                            <label for="exchange_rate" class="yoko-short-120">{{data.labelExchangeRate}}</label>
                            <input type="text" name="est_oi_amount" value="" placeholder="" ng-model="c.data.exchange_rate" disabled>
                        </div>

                        <div class="yoko-form-group">
                            <label for="exchange_rate" class="yoko-short-120">{{data.labelEstimatedOIAmount}}</label>
                            <input type="text" name="est_oi_amount" value="" placeholder="" ng-model="c.data.estimated_oi_amount" ng-disabled="isCancelledDisabled">
                        </div>

                        <div class="yoko-form-group">
                            <label for="exchange_rate" class="yoko-short-120">{{data.labelEstimatedOIAmountLC}}</label>
                            <input type="text" name="est_oi_amount" value="" placeholder="" ng-model="c.data.estimated_oi_amount_lc" disabled>
                        </div>

                        <div class="yoko-form-group">
                            <label for="exchange_rate" class="yoko-short-120">{{data.labelTotalQuotePrice}}</label>
                            <input type="text" name="est_oi_amount" value="" placeholder="" ng-model="c.data.total_quote_price" disabled>
                        </div>

                        <div class="yoko-form-group">
                            <label for="exchange_rate" class="yoko-short-120">{{data.labelTotalQuotePriceLC}}</label>
                            <input type="text" name="est_oi_amount" value="" placeholder="" ng-model="c.data.total_quote_price_lc" disabled>
                        </div>


                    </div>
                    <div class="yoko-form-col">

                        <div class="yoko-form-group">
                            <label for="quotation">{{data.labelQuotation}}</label>
                            <div class="yoko-form-inline">
                                <button class="yoko-btn-quotation" ng-click="btnQuotation()" style="background-color: #f0f0f0; border: 1px solid #ccc; box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.3); padding: 10px 20px; border-radius: 5px; text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);">
                                    {{c.data.quotation}}
                                </button>
                                <input type="text" name="quotation_sysId" ng-model="c.data.quotation_sys_id" placeholder="" class="yoko-wid140" ng-click="handleClick()" ng-style="{'display': 'none'}" readonly>
                            </div>
                        </div>

                        <div class="yoko-form-group">
                            <label for="type">
                                <h5 name="mandatoryQ" style="display: inline; margin: 0;  color: red" ng-if="c.data.quotationTypeSelectMandatory">✻</h5> {{data.labelQuotationType}}
                            </label>
                            <div class="yoko-form-inline">
                                <select id="type" name="quotation_type_select" class="yoko-wid140" ng-model="c.data.quotation_type" ng-class="{'highlight-form': !c.data.quotation_type}" ng-options="option as option for option in c.data.choices" ng-if="data.showQuotationTypeSelect">
                                    <option value="">Select Type</option>
                                </select>
                                <input type="text" name="quotation_type" ng-model="c.data.quotation_type_label" class="yoko-wid140" style="font-size:12px" ng-if="data.showQuotationType" ng-disabled="isCancelledDisabled">
                            </div>
                        </div>

                        <div class="yoko-form-group">
                            <label for="quotation_state">{{data.labelQuotationState}}</label>
                            <input type="text" name="quotation_state" class="yoko-wid140" ng-model="c.data.quotation_state" disabled>
                        </div>

                        <div class="yoko-form-group">
                            <label for="quotation_state">{{data.labelProfitCompany}}</label>
                            <input type="text" name="quotation_state" class="yoko-wid140" ng-model="c.data.quotation_state" disabled>
                        </div>

                        

                    </div>
                    <div class="yoko-form-col">

                        <div class="yoko-form-group">
                            <label for="status" class="yoko-short-110">{{data.labelState}}</label>
                            <input type="text" name="status" value={{data.state}} placeholder="New" class="yoko-wid172" disabled>
                        </div>

                        <div class="yoko-form-group">
                            <label for="oppt_no" class="yoko-short-110">{{data.labelYodaOpportunityNo}}</label>
                            <input type="text" name="oppt_no" value="" placeholder="" class="yoko-wid172" ng-model="c.data.yoda_opportunity_no" ng-disabled="isCancelledDisabled">
                        </div>
                        
                        <div class="yoko-form-group">
                            <label for="oppt_no" class="yoko-short-110">{{data.labelProjectStatus}}</label>
                            <input type="text" name="oppt_no" value="" placeholder="" class="yoko-wid172" ng-model="c.data.yoda_opportunity_no" ng-disabled="isCancelledDisabled">
                        </div>


                        <div class="yoko-form-group">
                            <label for="assignment_group" class="yoko-short-110">{{data.labelAssignmentGroup}}</label>
                            <div class="yoko-form-inline">
                                <input type="text" name="assignment_group" value="" placeholder="" readonly class="yoko-wid140" ng-model="c.data.assignment_group" disabled>
                                <input type="text" name="assignment_group_sys_id" value="" placeholder="" disabled class="yoko-wid140" ng-model="c.data.assignment_group_sys_id" ng-style="{'display': 'none'}">
                                <button type="button" class="yoko-btn yoko-btn-search" ng-click="btnRefAssignmentGroup()" ></button>
                            </div>
                        </div>

                        <div class="yoko-form-group">
                            <label for="assigned_to" class="yoko-short-110">{{data.labelAssignedTo}}</label>
                            <div class="yoko-form-inline">
                                <input type="text" name="assigned_to" value="" placeholder="" readonly class="yoko-wid140" ng-model="c.data.assigned_to" disabled>
                                <input type="text" name="assigned_to_sys_id" value="" placeholder="" disabled class="yoko-wid140" ng-model="c.data.assigned_to_sys_id" ng-style="{'display': 'none'}">
                                <button type="button" class="yoko-btn yoko-btn-search" ng-click="btnRefAssignedTo()" ></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            
        </div>
        <div class="yoko-grid-area-wrapper"></div>
            
    </div>
    <div class="yoko-grid-area">
        <br>
        <br>
        <br>
        
        <div class="out" id='gridContainer' style="width:100%; height: 200px;"></div>

    </div>

    <!-- Modal Test Structure -->
    <div id="modalTest" class="modal" style="display:none;">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close">&times;</span>
                <h2>{{data.modalTitle}}</h2>
            </div>
            <div class="modal-body">

                <ul id="container" class="container">
                    <li ng-repeat="item in c.data.items">
                        <span ng-click="c.logSysId(item.column1, item.column2, item.column3) ">{{ item.column1 }}</span>
                        <span ng-if="false">{{ item.column2 }}</span>
                        <span>{{ item.column3 }}</span>
                        <span>{{ item.column4 }}</span>
                    </li>
                </ul>

                <div class="pagination" id="pagination"></div>

            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" id="closeModalButton">Close</button>
            </div>
        </div>
    </div>

    <div id="popover1" class="popover" ng-class="{'show': c.popovers[0].visible}" ng-style="c.popovers[0].style">
        <div class="popover-header">Company</div>
        <div class="popover-body">
            <div class="form-group">
                <label for="company-name">Name</label>
                <input type="text" id="company-name" class="form-control" value="NVIDIA" readonly>
            </div>
            <div class="form-group">
                <label for="company-phone">Phone</label>
                <input type="text" id="company-phone" class="form-control" value="(408) 486-2000" readonly>
            </div>
            <div class="form-group">
                <label for="company-street">Street</label>
                <input type="text" id="company-street" class="form-control" value="2701 San Tomas Expressway" readonly>
            </div>
            <button type="button" class="btn btn-secondary" ng-click="c.hidePopover(1)">Close</button>
        </div>
    </div>

    <div id="popover2" class="popover" ng-class="{'show': c.popovers[1].visible}" ng-style="c.popovers[1].style">
        <div class="popover-header">Group</div>
        <div class="popover-body">
            <div class="form-group">
                <label for="group-name">Name</label>
                <input type="text" id="group-name" class="form-control" value="Sales Engineers" readonly>
            </div>
            <div class="form-group">
                <label for="group-manager">Manager</label>
                <input type="text" id="group-manager" class="form-control" value="John Doe" readonly>
            </div>
            <div class="form-group">
                <label for="group-email">Group Email</label>
                <input type="text" id="group-email" class="form-control" value="sales@company.com" readonly>
            </div>
            <button type="button" class="btn btn-secondary" ng-click="c.hidePopover(2)">Close</button>
        </div>
    </div>




</div>


<script>
    const buttons = document.querySelectorAll('.yoko-title-btn-wrap .yoko-btn-wrap button');

    buttons.forEach(button => {
        button.addEventListener('click', function() {
            buttons.forEach(btn => {
                btn.classList.remove('active');
            });
            this.classList.add('active');
        });
    });

    window.onload = function() {
        var wrapper = document.querySelector('.yoko-search-form-wrapper');
        if (wrapper) {
            var forms = wrapper.querySelectorAll('.yoko-search-form-wrap > .yoko-search-form');
            var maxHeight = 0;
            // 모든 .yoko-search-form 요소의 높이를 확인하여 최대 높이를 찾습니다.
            forms.forEach(function(form) {
                if (form.offsetHeight > maxHeight) {
                    maxHeight = form.offsetHeight;
                }
            });
            // 최대 높이로 모든 .yoko-search-form 요소의 높이를 설정합니다.
            forms.forEach(function(form) {
                form.style.height = maxHeight + 'px';
            });
        }
    };
</script>]]></template>
    </sp_widget>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="BPM">41c8a9e73b1e4a10ec3cbf2a85e45ab7</application>
        <file_path/>
        <instance_id>3b497336dbdab5944162684e139619db</instance_id>
        <instance_name>dev208377</instance_name>
        <name>sp_widget_938ae5d247c7c6106cce1ce4316d43af</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_widget"&gt;&lt;sp_widget action="INSERT_OR_UPDATE"&gt;&lt;category&gt;custom&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[api.controller = function($scope, $location, $rootScope, $timeout) {

    /* widget controller */
    var c = this;
    c.data.isRead = true;
    c.data.reasonCodeMandatory = false
    c.data.reasonCodeRequestDueDateMandatory = false
    c.data.reasonRemarkMandatory = false
    c.data.quotationTypeSelectMandatory = false
    //c.data.copy_sys_id = false	
  
	///팝오버
    
    c.popovers = [
        { id: 1, visible: false, style: {}, width: 500, height: 500 },
        { id: 2, visible: false, style: {}, width: 500, height: 500 }
    ];

    function setPopoverStyle(mouseX, mouseY, width, height) {
        return {
            top: (mouseY - 100) + 'px',  // 마우스 클릭 위치의 Y 좌표 설정 (100px 위)
            left: mouseX + 'px',        // 마우스 클릭 위치의 X 좌표 설정
            zIndex: 9999,               // 항상 다른 창들 위에 존재하도록 z-index 설정
            width: width + 'px',        // 팝오버의 너비 설정
            height: height + 'px',      // 팝오버의 높이 설정
            position: 'absolute',       // 팝오버의 위치를 절대 위치로 설정
            background: '#fff',         // 팝오버의 배경색 설정
            border: '1px solid #ccc',   // 팝오버의 테두리 설정
            borderRadius: '5px',        // 팝오버의 테두리 둥글게 설정
            boxShadow: '0 5px 10px rgba(0,0,0,0.2)' // 팝오버의 그림자 설정
        };
    }

    c.togglePopover = function($event, popoverId) {
        var mouseX = $event.clientX; // 마우스 클릭 위치의 X 좌표
        var mouseY = $event.clientY; // 마우스 클릭 위치의 Y 좌표
        
        c.popovers.forEach(function(popover) {
            if (popover.id === popoverId) {
                popover.visible = !popover.visible;
                if (popover.visible) {
                    popover.style = setPopoverStyle(mouseX, mouseY, popover.width, popover.height);
                }
            } else {
                popover.visible = false;
            }
        });
    };

    c.hidePopover = function(popoverId) {
        c.popovers.forEach(function(popover) {
            if (popover.id === popoverId) {
                popover.visible = false;
            }
        });
    };

    // 외부 클릭 이벤트 처리
    angular.element(document).on('click', function(event) {
        var popover1 = document.getElementById("popover1");
        var popover2 = document.getElementById("popover2");
        var button1 = document.getElementById("button1");
        var button2 = document.getElementById("button2");

        var clickedInsidePopover1 = popover1 &amp;&amp; (popover1.contains(event.target) || button1.contains(event.target));
        var clickedInsidePopover2 = popover2 &amp;&amp; (popover2.contains(event.target) || button2.contains(event.target));

        if (!clickedInsidePopover1 &amp;&amp; !clickedInsidePopover2) {
            $scope.$apply(function() {
                c.popovers.forEach(function(popover) {
                    popover.visible = false;
                });
            });
        }
    });

	
	
	///팝오버
		
		
    /////////////////////////////////////// 파라메터 체크
    c.getUrlParameter = function(param) {
        return $location.search()[param];
    };
    // Function to handle click event
    $scope.btnQuotation = function() {
        if (c.data.quotation) {
            window.location.href = "/ybpm?id=quotation&amp;table=x_yergb_bpm_quotation&amp;sys_id=" + c.data.quotation_sys_id; // Redirect to the URL
        }
    };
    // url 에서 sys_id 가져온다. 
    var urlSysId = c.getUrlParameter('sys_id');
    console.log('Value of yourParameterName:', urlSysId);
    c.data.urlSysId = urlSysId;
    // Call the server script


    var data = {
        message: "Hello from Sender Widget",
        timestamp: new Date(),
        table: "x_yergb_bpm_rfq_entry",
        sys_id: urlSysId
    };

    // 이벤트를 발생시켜 데이터를 전송
    $rootScope.$broadcast('dataFromSenderWidget', data);




    // 오늘 날짜를 변수에 저장
    var currentDate = getCurrentDate();

    c.data.request_date = currentDate
    // 예제: 콘솔에 오늘 날짜를 출력
    //alert('Today is: ' + currentDate);
    // Function to get URL parameters


    //////////////////////////////////// 세이브 클릭하고 데이터 넘기기
    $scope.btnSave = function() {
        // Get the value from the input field using ng-model
			var inputCurrency = document.getElementsByName('currency')[0];

			if (c.data.currency == 'undefined' || !c.data.currency) {
            alert("Mandatory is empty");
            //asterik.style.color = "red";
            c.data.currencyMandatory = true

            inputCurrency.style.border = "2px solid red";
        }
			else{
				if (urlSysId) { //이거(=) 업데이트임 url 에 sysid가 존재하니까
           //alert("UPDTATETE")
            c.data.isUpdate = true;
            c.server.update().then(function(response) {
                location.reload();
                if (response.data &amp;&amp; response.data.result) {
                    //location.reload();
                }
            });
        } else { // 이거 새로 넣는거임
           // alert("INSERT")
            c.data.isInsert = true;
            c.server.update().then(function(response) {
                window.location.href = "/ybpm?id=rfqentry&amp;sys_id=" + c.data.redirect_sys_id;
                // Optionally handle the server response if needed
                if (response.data &amp;&amp; response.data.result) {
                    //alert(response.data.result);
                }
            });
        }
			}
			
			
			
			
        


    };

    /////////////////////////////////   Assess 버튼 클릭
    $scope.btnAssess = function() {
        //alert("ASSESS?")
        // Call the server script to update the state
        //var asterik = document.getElementsByName('mandatoryQ')[0];
        var quotationTypeSelect = document.getElementsByName('quotation_type_select')[0];

        if (c.data.quotation_type == 'undefined' || !c.data.quotation_type) {
            alert("Mandatory is empty");
            //asterik.style.color = "red";
            c.data.quotationTypeSelectMandatory = true

            quotationTypeSelect.style.border = "2px solid red";
        } else {
            c.data.isUpdate = true;
            c.data.newState = 2;
            c.data.isButton = true;
            c.server.update().then(function(response) {
                // Handle the server response if needed
                console.log('Server response:', response);
                location.reload();
            });
        }
    };

    $scope.btnRequest = function() {
        var reasonCode = document.getElementsByName('reason_code')[0];
        var requestDueDate = document.getElementsByName('request_due_date')[0];
        var remark = document.getElementsByName('remark')[0];
        //var asterik = document.getElementsByName('mandatory')[0];
        //var asterik1 = document.getElementsByName('mandatory')[1];
        //var asterik2 = document.getElementsByName('mandatory')[2];

        // Reset previous highlights
        reasonCode.classList.remove('highlight-form');
        requestDueDate.classList.remove('highlight-form');
        remark.classList.remove('highlight-form');




        // Check for mandatory fields
        if (!c.data.reason_code || !c.data.request_due_date || !c.data.remark) {
            alert("Mandatory is empty");
            c.data.reasonCodeMandatory = true
            c.data.reasonCodeRequestDueDateMandatory = true
            c.data.reasonRemarkMandatory = true
            if (!c.data.reason_code) {
                reasonCode.style.border = "2px solid red";
                //asterik.style.color = "red";
            }

            if (!c.data.request_due_date) {
                requestDueDate.style.border = "2px solid red";
                //asterik1.style.color = "red";

            }

            if (!c.data.remark) {
                remark.style.border = "2px solid red";
                //asterik2.style.color = "red";

            }
        } else {
            c.data.isUpdate = true;
            c.data.newState = 3;
            c.data.isButton = true;
            c.server.update().then(function(response) {
                // Handle the server response if needed
                console.log('Server response:', response);
                location.reload();
            });
        }
    }

    $scope.btnSubmit = function() {
        //alert("SUBMIT?")
        // Call the server script to update the state
        if (c.data.quotation_state != "Completed") {
            alert("Quotation is Not Completed");
        } else {
            c.data.newState = 5;
            c.data.isButton = true;
            c.server.update().then(function(response) {
                // Handle the server response if needed
                console.log('Server response:', response);
                location.reload();
            });
        }
    };
    $scope.btnInProgress = function() {
        //alert("IN PROGRESS?")
        // Get the value from the input field using ng-model
        c.data.newState = 4;
        c.data.isButton = true;

        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            location.reload();
        });

        location.reload();
    };

    $scope.btnAccept = function() {
        //alert("ACCEPT?")
        c.data.newState = 4;
        c.data.isButton = true;
        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            location.reload();
        });

    };
    $scope.btnOIReport = function() {
        //alert("OI Report?")
        c.data.newState = 9;
        c.data.isButton = true;
        c.data.isOIReport = true;
        // Call the server script to update the state
        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
					  console.log(c.data.io_sys_id)
            window.location.href = "/ybpm?id=orderintakereport&amp;sys_id=" + c.data.io_sys_id; // Redirect to the URL

            //location.reload();
        });

    };

    $scope.btnReturn = function() {
        //alert("RETURN?")
        c.data.newState = -5;
        c.data.isButton = true;
			
			
					 var confirmed = confirm("Do you really want to reject?");
        if (confirmed) {
            // 사용자가 확인을 클릭했을 때 수행할 작업
            alert("Returned.");
					// Call the server script to update the state
        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            location.reload();
        });
            // 여기서 서버에 요청을 보내거나 다른 작업을 수행할 수 있습니다.
        } else {
            // 사용자가 취소를 클릭했을 때 수행할 작업
        }
			
			
			
        

    };
    $scope.btnCancel = function() {
        //alert("CANCEL?")
        c.data.newState = -8;
        c.data.isButton = true;
        // Call the server script to update the state
        c.server.update().then(function(response) {
            // Handle the server response if needed
            console.log('Server response:', response);
            location.reload();

        });

    };


    //////////////////////////////////  모달창 관련한 로직

    // Get the modal
    var modal = document.getElementById("modalTest");

    // Get the button that opens the modal
    var btn = document.getElementById("openModalButton");

    // Get the &lt;span&gt; element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // Get the close button
    var closeButton = document.getElementById("closeModalButton");

    // When the user clicks the button, open the modal

    // When the user clicks on &lt;span&gt; (x), close the modal
    span.onclick = function() {
        modal.style.display = "none";
        c.data.refer_end_user_modal = false
        c.data.refer_requester_modal = false
        c.data.refer_quotation_modal = false
        c.data.refer_assignment_group_modal = false
        c.data.refer_assigned_to_modal = false
        c.data.refer_contract_modal = false
        c.data.refer_contract_country_modal = false
			c.data.refer_copy_modal = false;
        c.data.items = ""
        c.data.modalTitle = ""
    }

    // When the user clicks on close button, close the modal
    closeButton.onclick = function() {
        modal.style.display = "none";
        c.data.refer_end_user_modal = false
        c.data.refer_requester_modal = false
        c.data.refer_quotation_modal = false
        c.data.refer_assignment_group_modal = false
        c.data.refer_assigned_to_modal = false
        c.data.refer_contract_modal = false
        c.data.refer_contract_country_modal = false
			c.data.refer_copy_modal = false;
        c.data.items = ""
        c.data.modalTitle = ""
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
            c.data.refer_end_user_modal = false
            c.data.refer_requester_modal = false
            c.data.refer_quotation_modal = false
            c.data.refer_assignment_group_modal = false
            c.data.refer_assigned_to_modal = false
            c.data.refer_contract_modal = false
            c.data.refer_contract_country_modal = false
					c.data.refer_copy_modal = false;
            c.data.items = ""
            c.data.modalTitle = ""
        }
    }
 c.isModalVisible = false;

    c.openModal = function() {
        c.isModalVisible = true;
    };

    c.closeModal = function() {
        c.isModalVisible = false;
    };
	
$scope.btnUpdate = function() {
        //alert("CANCEL?")
       var modalElement = document.querySelector('.yoko-modal-content');
        if (c.isModalVisible &amp;&amp; !modalElement.contains(event.target)) {
            $scope.$apply(function() {
                c.closeModal();
            });
        }

    };


    $scope.btnRefSalesManager = function(sys_id) {
        c.data.refer_sales_manager_modal = true;
        c.data.isRead = false;
        c.server.update().then(function(response) {
            console.log('Server response:', response);
            c.logSysId = function(number, sys_id, code) {
                c.data.sales_manager = number
                c.data.sales_manager_sys_id = sys_id
                
							
							  modal.style.display = "none";
								c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""
            };
        });
        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };


    $scope.btnRefAssignmentGroup = function(sys_id) {
        c.data.refer_assignment_group_modal = true;
        c.data.isRead = false;

        c.server.update().then(function(response) {
            c.logSysId = function(number, sys_id) {
                //alert('Selected sys_id: ' + sys_id + ' ' + number);
                c.data.assignment_group = number
                c.data.assignment_group_sys_id = sys_id


                modal.style.display = "none";
                c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""


            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };

    $scope.btnRefAssignedTo = function(sys_id) {
        c.data.refer_assigned_to_modal = true;
        c.data.isRead = false;

        c.server.update().then(function(response) {
            console.log('Server response:', response);
            c.logSysId = function(number, sys_id) {
                c.data.assigned_to = number
                c.data.assigned_to_sys_id = sys_id


                modal.style.display = "none";
                c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""
            };
        });
        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };
    $scope.btnRefEndUser = function() {
        c.data.refer_end_user_modal = true;
        c.data.isRead = false;
        c.server.update().then(function(response) {
            console.log('Server response:', response);
        });
        c.logSysId = function(number, sys_id, code) {
            c.data.end_user = number
            c.data.end_user_sys_id = sys_id
            c.data.end_user_code = code


            modal.style.display = "none";
            c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""





        };
        var modal = document.getElementById("modalTest");
        modal.style.display = "block";
    };

    $scope.btnRefContract = function() {
        c.data.refer_contract_modal = true;
        c.data.isRead = false;
        c.server.update().then(function(response) {
            console.log('Server response:', response);
            c.logSysId = function(number, sys_id, code) {
                c.data.contract = number
                c.data.contract_sys_id = sys_id
                c.data.contract_code = code


                modal.style.display = "none";
               c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""
            };

        });
        //debugger
        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };

    $scope.btnRefContractCountry = function(sys_id) {
        c.data.refer_contract_country_modal = true;
        c.data.isRead = false;
        c.server.update().then(function(response) {
            console.log('Server response:', response);
            c.logSysId = function(number, sys_id) {
                c.data.contract_country = number
                c.data.contract_country_sys_id = sys_id


                modal.style.display = "none";
                 c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""
            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };

    $scope.btnRefCurrency = function(sys_id) {
        c.data.refer_currency_modal = true;
        c.data.isRead = false;
        c.server.update().then(function(response) {
            console.log('Server response:', response);
            c.logSysId = function(number, sys_id) {
                c.data.currency = number
                c.data.currency_sys_id = sys_id


                modal.style.display = "none";
                c.data.refer_sales_manager_modal = false
                c.data.refer_end_user_modal = false
                c.data.refer_requester_modal = false
                c.data.refer_quotation_modal = false
                c.data.refer_assignment_group_modal = false
                c.data.refer_assigned_to_modal = false
                c.data.refer_contract_modal = false
                c.data.refer_contract_country_modal = false
							  c.data.refer_copy_modal = false;
                c.data.items = ""
                c.data.modalTitle = ""
            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };


    $scope.btnCopy = function() {
        //alert(c.data.isRead)
        c.data.refer_copy_modal = true;
        c.data.isCopy = true;
        c.data.isRead = false;

        c.server.update().then(function(response) {
           // alert("we start copying now")
            console.log('Server response:', response);
            c.logSysId = function(number, sys_id) {
                c.data.isRead = false;
                c.data.copy_sys_id = sys_id




                c.server.update().then(function(response) {
                    alert("we are copying now")
                    c.data.isCopy = false;



                    modal.style.display = "none";
                    c.data.refer_end_user_modal = false
                    c.data.refer_requester_modal = false
                    c.data.refer_quotation_modal = false
                    c.data.refer_assignment_group_modal = false
                    c.data.refer_assigned_to_modal = false
                    c.data.refer_contract_modal = false
                    c.data.refer_contract_country_modal = false
						        c.data.refer_copy_modal = false;

                    c.data.items = ""
                    c.data.modalTitle = ""

                });

            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";


    };


	
    $scope.btnRefQuotation = function(sys_id) {
        c.data.refer_quotation_modal = true;
        c.data.isRead = false;
        c.server.update().then(function(response) {
            // Handle the server response if needed
            // Function to log the sys_id
            c.logSysId = function(number, sys_id) {
                c.data.end_user = number
                c.data.end_user_code = sys_id
            };

        });

        var modal = document.getElementById("modalTest");
        modal.style.display = "block";

    };
    // In your controller
    // 이거는 어딘가 바뀌는거 감시하는거 
    $scope.$watch('c.data.contract', function(newVal, oldVal) {
        $scope.isContractDummyDisabled = !!newVal; // Set to true if contract has a value, otherwise false
    });
    // Initialize the variable when the controller is first loaded.
    $scope.isContractDummyDisabled = !!$scope.c.data.contract;
    // In your controller
    $scope.$watch('c.data.end_user', function(newVal, oldVal) {
        if (!newVal) {
            $scope.c.data.end_user_code = '';
        }
    });
    // In your controller
    $scope.$watch('c.data.contract', function(newVal, oldVal) {
        if (!newVal) {
            $scope.c.data.contract_code = '';
        }
    });


    // $watchGroup을 사용하여 contract_name, contract_address, contract_country 중 하나라도 값이 들어오면 체크
    $scope.$watchGroup(['c.data.contract_name', 'c.data.contract_address', 'c.data.contract_country'], function(newValues) {
        var hasValue = newValues.some(function(value) {
            return !!value; // 값이 있는지 확인
        });

        // 값이 있으면 isContractDisabled를 true로 설정하여 입력 필드를 비활성화
        $scope.isContractDisabled = hasValue;
    });

    // 초기화 시 체크
    $scope.isContractDisabled = !!(c.data.contract_name || c.data.contract_address || c.data.contract_country);


    // Initialize the variable when the controller is first loaded.
    $scope.isContractDisabled = !!(c.data.contract_name || c.data.contract_address || c.data.contract_country);
    // In your controller
    $scope.$watch(['c.data.contract_name', 'c.data.contract_address', 'c.data.contract_country'], function(newVal, oldVal) {
        if (!newVal) {
            $scope.c.data.end_user = '';
            $scope.c.data.end_user_code = '';
        }
    });



    c.server.update().then(function(response) {
        //c.data.isRead = false;
        //alert(c.data.state)
        if(c.data.state == "Cancelled"){
            $scope.isCancelledDisabled = true;
            $scope.isContractDisabled = true;
            $scope.isContractDummyDisabled = true;
			$scope.popoverContent = $sp.getUser().displayName + ": " + data.popoverContent;

        }
        var loopCnt = 0;
        var timerid = setInterval(function() {
            loopCnt = loopCnt + 1;
            if (loopCnt &gt; 30) {
                clearTimeout(timerid);
                alert('Can not load REALGRID');
            }
  
            if (checkRealGrid()) {
                clearTimeout(timerid);
                drawRealGrid();
            }
        }, 300);
    });








    function checkRealGrid() {
        if (RealGrid) {
            return true;
        }
  
        return false;
    }
  
    function drawRealGrid() {
        containerDetail = document.getElementById('gridContainer');
        dpDetail = new RealGrid.LocalDataProvider(false);
        gvDetail = new RealGrid.GridView(containerDetail);
        gvDetail.setDataSource(dpDetail);

        dpDetail.setFields([
            {fieldName: 'sys_id',             dataType:  'text'},
            {fieldName: 'number',             dataType:  'text'},
            {fieldName: 'version',            dataType:  'text'},
            {fieldName: 'currency_lc',        dataType:  'text'},
            {fieldName: 'total_quote_price',  dataType:  'text'},
            {fieldName: 'total_quote_cost',   dataType:  'text'},
            {fieldName: 'gp_percent',         dataType:  'text'},
            {fieldName: 'mp_amount',          dataType:  'text'},
            {fieldName: 'mp_gap_percent',     dataType:  'text'},
        ]);
  
        gvDetail.setColumns([{
                "name": "sys_id",
                "fieldName": "sys_id",
                "type": "data",
                "width": 0,
                "header": {
                    "text": "sysid",
                },
                "visible" : false,
                  "styleName" : "left-column"
  
            },
            {
                "name": "number",
                "fieldName": "number",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Quotation Number"
                },
                  "styleName" : "left-column"
  
            },
            {
                "name": "version",
                "fieldName": "version",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Version"
                },
                          "styleName" : "left-column"
            },
            {
                "name": "currency_lc",
                "fieldName": "currency_lc",
                "type": "data",
                "width": 100,
                "header": {
                    "text": "Currency"
                },
                          "styleName" : "left-column"
            },
            {
                "name": "total_quote_price",
                "fieldName": "total_quote_price",
                "type": "data",
                "width": 120,
                "header": {
                    "text": "Total Quote Price"
                },
                          "styleName" : "left-column"
            },
            {
                "name": "total_quote_cost",
                "fieldName": "total_quote_cost",
                "type": "data",
                "width": 120,
                "header": {
                    "text": "Total Quote Cost"
                },
                          "styleName" : "right-column"
            },
            {
                "name": "gp_percent",
                "fieldName": "gp_percent",
                "type": "data",
                "width": 120,
                "header": {
                    "text": "GP %"
                },
                          "styleName" : "right-column"
            },
            {
                "name": "mp_amount",
                "fieldName": "mp_amount",
                "type": "data",
                "width": 120,
                "header": {
                    "text": "MP Price"
                },
                          "styleName" : "right-column"
            },
            {
                "name": "mp_gap_percent",
                "fieldName": "mp_gap_percent",
                "type": "data",
                "width": 120,
                "header": {
                    "text": "MP Gap %"
                },
                          "styleName" : "right-column"
            },
        ]);
  
        gvDetail.setColumnLayout([
            'sys_id',           
            'number',           
            'version',          
            'currency_lc',      
            'total_quote_price',
            'total_quote_cost', 
            'gp_percent',       
            'mp_amount',        
            'mp_gap_percent',   
        ]);
  
        gvDetail.footers.visible = false;
        gvDetail.commitEditor();
        gvDetail.undoable = true;
        gvDetail.editOptions.commitByCell = true;		
        gvDetail.editOptions.insertable = true;
        dpDetail.softDeleting = true;
        gvDetail.displayOptions.fitStyle = "evenFill";
        gvDetail.setPasteOptions({enabled: true , enableAppend:true, eventEachRow	:true, commitEdit	:true});
        gvDetail.header.height = 40;
        gvDetail.displayOptions.rowHeight = 30;
        
        gvDetail.displayOptions.columnMovable = false;
   
        gvDetail.onCellClicked = function(grid, clickData) {
            var fieldName = clickData.column
            console.log("----*-*-*-*-*");
                console.log(grid);
                console.log(clickData);
            if (fieldName === 'number') {
                //alert('Quotation Number column clicked!');
                
                console.log(c.data.gridDetailData) 
                console.log(c.data.gridDetailData[clickData.dataRow].sys_id);
                window.location.href = "/ybpm?id=quotation&amp;table=x_yergb_bpm_quotation&amp;sys_id=" + c.data.gridDetailData[clickData.dataRow].sys_id

            }
                
        };
        
        //gvDetail.checkBar.visible = false;
        //gvDetail.stateBar.visible = false;
        dpDetail.setRows(c.data.gridDetailData);

    }
  
    $scope.gridDetailBtnClick = function(idx) {
        var v = {
            'rowStat': '',
            'sys_id': '',
            'number': '',
            'wbs_6': '',
            'ms_code': '',
            'description': '',
            'quantity': '',
            'unit_price': '',
            'extended_price': '',
            'unit_cost': '',
            'extended_cost': '',
            'unit_mp': '',
            'mp_amount': '',
            'vendor': '',
            'quotation': paramValue
        }
  
        c.data.gridBtnType = '';
        if (idx == 1) {
            c.data.gridBtnType = 'add';
            //alert("1")
            dpDetail.addRow(v);
        } else if (idx == 2) {
           var curr = gvDetail.getCurrent();
          dpDetail.removeRow(curr.dataRow);
          
  
        } else if (idx == 3) {
            alert("3")
  
            c.data.gridBtnTransact = 'T';
            c.data.gridDetailData = dpDetail.getJsonRows();
            for (var x = 0; x &lt; c.data.gridDetailData.length; x++) {
                c.data.gridDetailData[x].rowStat = dpDetail.getRowState(x);
            }
        }
  
  
  
        console.log(dpDetail.getRowCount());
  
  
        c.server.update().then(function(response) {
            console.log('Server response:', response);
        });
    }
  
       // Create New
    $scope.btnClickNew = function(fieldName, fieldValue) {
  
        c.data.operation = 'createNew';
        c.server.update().then(function(response) {
              window.location.href = "/ybpm?id=quotation&amp;table=x_yergb_bpm_quotation&amp;sys_id=" + c.data.redirect_sys_id;
        }).catch(function(error) {
            console.error('Error saving field:', error);
            alert('Error saving field');
        });
    };
  








}

function getCurrentDate() {
    var today = new Date();
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0'); // January is 0!
    var yyyy = today.getFullYear();

    return yyyy + '-' + mm + '-' + dd;
}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;@charset "UTF-8";&amp;#13;
&amp;#13;
&amp;#13;
body {margin: 0; font-family: "Pretendard"; font-size: 14px; font-weight: 400; line-height: normal;}&amp;#13;
&amp;#13;
ul {margin: 0; padding: 0;}&amp;#13;
ul li {list-style: none; margin: 0; padding: 0;}&amp;#13;
a {text-decoration: none;}&amp;#13;
.blank {width: 100%; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); }&amp;#13;
.yoko-container {margin: 40px auto 100px; min-width: 1400px; max-width: 1600px; font-family: "Pretendard"; font-size: 14px; font-weight: 400; letter-spacing: 0;}&amp;#13;
.yoko-container * {box-sizing: border-box;}&amp;#13;
.yoko-container .yoko-content {display: flex; gap: 0px; flex-direction: column;}&amp;#13;
.yoko-breadcrumb {color: #425D78;}&amp;#13;
.yoko-title-btn-wrap {display: flex; justify-content: space-between; align-items: center; margin: 8px 0 25px 0;}&amp;#13;
.yoko-title-btn-wrap .yoko-title {margin:0; color: #1C3956; font-family: "Pretendard";font-size: 24px;  font-style: normal;  font-weight: 700; line-height: normal;}&amp;#13;
.yoko-title-btn-wrap .yoko-btn-wrap {display: flex; gap: 4px; margin-bottom: 0;}&amp;#13;
&amp;#13;
.yoko-btn-wrap {display: flex; justify-content: space-between; margin-bottom: 8px;}&amp;#13;
.yoko-btn-wrap &amp;gt; div {display: flex; gap: 4px;}&amp;#13;
&amp;#13;
.yoko-btn {cursor: pointer; border-radius: 4px; text-align: center; font-family: "Pretendard";font-size: 14px;  font-style: normal; font-weight: 400;  padding: 8px 20px 8px 20px;}&amp;#13;
.yoko-btn:disabled  {border: 1px solid #AABBD1; color: #C8CED4;}&amp;#13;
&amp;#13;
.yoko-btn.yoko-btn-outline {background: #fff; border: 1px solid #B2B2B2;  color: #4B5E70; }&amp;#13;
.yoko-btn.yoko-btn-outline:hover  {border: 1px solid #AABBD1;}&amp;#13;
&amp;#13;
.yoko-btn.yoko-btn-fill {background-color: #68B3FC; border: 1px solid #4193E2; color: #fff;}&amp;#13;
.yoko-btn.yoko-btn-fill:hover  {background-color: #4193E2; border: 1px solid #4193E2;}&amp;#13;
&amp;#13;
.yoko-btn.yoko-btn-fill-red {background-color: #FF6D6D; border: 1px solid #E35050; color: #fff;}&amp;#13;
.yoko-btn.yoko-btn-fill-red:hover  {background-color: #E35050; border: 1px solid #E35050;}&amp;#13;
&amp;#13;
.yoko-btn.yoko-btn-fill-accept {&amp;#13;
    background-color: #7DBEFF; /* Slightly more saturated pastel blue background color */&amp;#13;
    border: 1px solid #5C9DD8; /* Slightly darker blue border */&amp;#13;
    color: #fff; /* White text color */&amp;#13;
}&amp;#13;
.yoko-btn.yoko-btn-fill-accept:hover {&amp;#13;
    background-color: #5C9DD8; /* Darker blue on hover */&amp;#13;
    border: 1px solid #5C9DD8; /* Same border color as the hover background */&amp;#13;
}&amp;#13;
&amp;#13;
.yoko-btn.yoko-btn-fill-cancel {&amp;#13;
    background-color: #FF9999; /* Slightly more saturated pastel red background color */&amp;#13;
    border: 1px solid #D47878; /* Slightly darker red border */&amp;#13;
    color: #fff; /* White text color */&amp;#13;
}&amp;#13;
.yoko-btn.yoko-btn-fill-cancel:hover {&amp;#13;
    background-color: #D47878; /* Darker red on hover */&amp;#13;
    border: 1px solid #D47878; /* Same border color as the hover background */&amp;#13;
}&amp;#13;
&amp;#13;
&amp;#13;
.yoko-btn-search {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_search.png) no-repeat center center !important;}&amp;#13;
.yoko-btn-search:hover {background-color: #eaeaea;}&amp;#13;
.yoko-btn-add {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_add.png) no-repeat center center !important;}&amp;#13;
.yoko-btn-add:hover {background-color: #eaeaea;}&amp;#13;
.yoko-btn-delete {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_delete.png) no-repeat center center !important;}&amp;#13;
.yoko-btn-delete:hover {background-color: #eaeaea;}&amp;#13;
.yoko-btn-info-fill {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_info_fill.png) no-repeat center center !important;}&amp;#13;
.yoko-btn-info-fill:hover {background-color: #eaeaea;}&amp;#13;
.yoko-btn-attach {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_attach.png) no-repeat center center !important;}&amp;#13;
.yoko-btn-attach:hover {background-color: #eaeaea;}&amp;#13;
.yoko-btn-load {border: 1px solid #4193E2; font-weight: 400; padding: 0; min-width: 58px; width: 28px; height: 28px; color: #fff; background-color: #68B3FC;}&amp;#13;
.yoko-btn-load:hover {background-color: #4193E2; border: 1px solid #4193E2;}&amp;#13;
.yoko-btn-fold {border: 1px solid #B2B2B2; padding: 0; min-width: 28px; width: 28px; height: 28px; background:#fff url(icon_arrow_fold.png) no-repeat center center !important;}&amp;#13;
.yoko-btn-fold:hover {background-color: #eaeaea;}&amp;#13;
.yoko-btn-fold.active {background:#fff url(icon_arrow_unfold.png) no-repeat center center !important;}&amp;#13;
&amp;#13;
&amp;#13;
.yoko-search-form {display: flex; gap: 30px; padding: 16px 30px; max-width: 1600px;  background-color: #F7F7F7; border: 1px solid #B2B2B2; border-radius: 4px;}&amp;#13;
&amp;#13;
.yoko-fold-btn-wrap {display: flex; align-items: center; gap: 10px;}&amp;#13;
&amp;#13;
.yoko-form-group .yoko-btn {padding: 5px 10px 5px 10px;}&amp;#13;
.yoko-search-form .yoko-form-group {display: flex; align-items: center; gap: 20px; /*width: 100%; min-width: 240px;*/}&amp;#13;
.yoko-search-form .yoko-form-group label {width:130px; min-width: 130px; text-align: right;}&amp;#13;
.yoko-search-form label {color: #1F3B55; font-family: 'Pretendard'; font-size: 14px; font-style: normal; font-weight: 500; line-height: normal;}&amp;#13;
.yoko-search-form label.yoko-short {width: 80px; min-width: 80px;}&amp;#13;
.yoko-search-form label.yoko-short-90 {width: 90px; min-width: 100px;}&amp;#13;
.yoko-search-form label.yoko-short-100 {width: 100px; min-width: 100px;}&amp;#13;
.yoko-search-form label.yoko-short-110 {width: 110px; min-width: 110px;}&amp;#13;
.yoko-search-form label.yoko-short-120 {width: 120px; min-width: 120px;}&amp;#13;
.yoko-search-form label.yoko-short-130 {width: 130px; min-width: 130px;}&amp;#13;
.yoko-search-form label.yoko-short-135 {width: 135px; min-width: 130px;}&amp;#13;
.yoko-search-form label.yoko-short-142 {width: 142px; min-width: 130px;}&amp;#13;
.yoko-search-form label.yoko-middle {width: 170px; min-width: 170px;}&amp;#13;
.yoko-search-form label.yoko-long {width: 200px; min-width: 200px;}&amp;#13;
.yoko-search-form label.yoko-btn-fill {background-color: #68B3FC;text-align: center; color: #fff; font-weight: 400;  padding: 5px 10px 6px 10px; border-radius: 4px;}&amp;#13;
.yoko-search-form label.yoko-long.yoko-btn-fill {width: calc(200px - 10px);}&amp;#13;
.yoko-search-form label.yoko-middle.yoko-btn-fill {width: calc(170px - 10px);}&amp;#13;
&amp;#13;
.yoko-search-form input,&amp;#13;
.yoko-search-form select,&amp;#13;
.yoko-search-form textarea {font-family: "Pretendard"; font-size: 14px; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); border-radius: 4px; border: 1px solid #B2B2B2; color: #7A8692;}&amp;#13;
.yoko-search-form textarea {max-height: none; width: 100%; padding: 10px 10px 10px 10px; }&amp;#13;
/* .yoko-search-form input[type=date] {width: 140px; } */&amp;#13;
.yoko-search-form input[type=date]::-webkit-calendar-picker-indicator,&amp;#13;
.yoko-search-form input[type=date]::-webkit-inner-spin-button {background: url('icon_calendar.png') no-repeat right center; }&amp;#13;
&amp;#13;
.yoko-search-form select {&amp;#13;
  -moz-appearance:none; /* Firefox */&amp;#13;
  -webkit-appearance:none; /* Safari and Chrome */&amp;#13;
  appearance:none;&amp;#13;
  background-image: url(icon_arrow_down.png);&amp;#13;
  background-repeat: no-repeat;&amp;#13;
  background-position-x: 100%;&amp;#13;
  background-position-y: 1px;&amp;#13;
  line-height: 15px;&amp;#13;
  padding: 6px 30px 5px 10px;&amp;#13;
&amp;#13;
}&amp;#13;
&amp;#13;
.yoko-form-inline {display: flex;gap: 4px; width: calc(100% - 4px); align-items: center;}&amp;#13;
.yoko-form-group-title {padding: 4px 0 8px 0; color: #1C3956; font-family: "Pretendard"; font-size: 14px;font-style: normal;font-weight: 700; line-height: normal;}&amp;#13;
.yoko-form-group-hori  {display: flex;gap: 0; /*width:100%;*/}&amp;#13;
.yoko-flex-responsive {display: flex; gap: 30px;}&amp;#13;
.yoko-form-col {/*width: 100%;*/ display: flex; gap: 8px; flex-direction: column;}&amp;#13;
.yoko-form-col.yoko-gap7 {gap:7px ;}&amp;#13;
.yoko-col100 {width: 100%;}&amp;#13;
.yoko-col60 {width: 60%;}&amp;#13;
.yoko-col50 {width: 50%;}&amp;#13;
.yoko-col40 {width: 40%}&amp;#13;
.yoko-col35 {width: 35%}&amp;#13;
.yoko-col30 {width: 30%}&amp;#13;
.yoko-col20 {width: 20%} &amp;#13;
.yoko-col15 {width: 15%} &amp;#13;
.yoko-col10 {width: 10%} &amp;#13;
&amp;#13;
.yoko-search-form label.checkbox-label {text-align: left;width: auto; min-width: auto; cursor: pointer; display: flex; gap: 10px; align-items: flex-start; justify-content: flex-start; color: #1F3B55; font-family: "Pretendard";  font-size: 14px; font-style: normal; font-weight: 400; line-height: normal;}&amp;#13;
.custom-checkbox {position: relative;}&amp;#13;
.custom-checkbox input { position: absolute;  opacity: 0;  cursor: pointer;  width: 18px; height: 18px; z-index: 1;}&amp;#13;
.custom-checkbox .checkmark {position: relative;  top: 0;  left: 0;  display: block;  height: 18px;  width: 18px;  border-radius: 2px;border: 1px solid #DCE3EB;background: #FFF; overflow: hidden;}&amp;#13;
.custom-checkbox:hover input ~ .checkmark {background-color: #FFF;}&amp;#13;
.custom-checkbox input:checked ~ .checkmark {  background-color: #68B3FC;  border-radius: 2px;  border: 1px solid #68B3FC;}&amp;#13;
.custom-checkbox .checkmark:after {  content: "";  position: absolute;  display: none;}&amp;#13;
.custom-checkbox input:checked ~ .checkmark:after {  display: block;  left: 50%; top: 50%;  height: 16px;  width: 18px;  transform: translate(-50%, -50%);  background: url(images/icon_checkbox.png) no-repeat center center;}&amp;#13;
&amp;#13;
.custom-checkbox input:disabled ~ .checkmark {border: 1px solid #D1D1D1; background: #E2E2E2; cursor: not-allowed; }&amp;#13;
.custom-checkbox input:checked:disabled ~ .checkmark {background:#E2E2E2 url(icon_checkbox_dis.png) no-repeat center center; }&amp;#13;
.custom-checkbox input:disabled ~ .checkmark:after {background: url(icon_checkbox_dis.png) no-repeat center center;}&amp;#13;
&amp;#13;
.yoko-wid100 {width: 100px !important;}&amp;#13;
.yoko-wid103 {width: 103px !important;}&amp;#13;
.yoko-wid127 {width: 127px !important;}&amp;#13;
.yoko-wid134 {width: 134px !important;}&amp;#13;
.yoko-wid140 {width: 140px !important;}&amp;#13;
.yoko-wid147 {width: 147px !important;}&amp;#13;
.yoko-wid154 {width: 154px !important;}&amp;#13;
.yoko-wid158 {width: 158px !important;}&amp;#13;
.yoko-wid172 {width: 172px !important;}&amp;#13;
.yoko-wid247 {width: 247px !important;}&amp;#13;
.yoko-wid308 {width: 308px !important;}&amp;#13;
.yoko-wid425 {width: 425px !important;}&amp;#13;
.yoko-wid559 {width: 559px !important;}&amp;#13;
.yoko-wid717 {width: 717px !important;}&amp;#13;
&amp;#13;
.yoko-ht100 {height: 100px !important;}&amp;#13;
.yoko-ht200 {height: 200px !important;}&amp;#13;
&amp;#13;
.yoko-mt-20 {margin-top: 20px;}&amp;#13;
.yoko-mb-80 {margin-bottom: 80px;}&amp;#13;
&amp;#13;
.yoko-padding-r20 {padding: 16px 20px 16px 30px;}&amp;#13;
.yoko-scroll {padding-right: 15px;}&amp;#13;
/* .yoko-form-inline select {width: calc(100% - 28px);} */&amp;#13;
.yoko-btn-spacing {width: calc(100% - 32px);}&amp;#13;
.yoko-text-right {text-align: right;}&amp;#13;
&amp;#13;
.yoko-search-form-wrapper {display: flex; gap: 20px; }&amp;#13;
.yoko-search-form-wrap .yoko-search-form-heading {margin-top: 10px; margin-bottom: 5px; font-size: 16px; font-weight: 600; color: #1F3B55;}&amp;#13;
&amp;#13;
.yoko-governance-wrap .yoko-search-form button {width: 100%; min-width: 140px;}&amp;#13;
.yoko-project-wrap .yoko-search-form input[type=text] {width: 100%;}&amp;#13;
&amp;#13;
.yoko-form-group-heading-wrap {display: flex; gap: 9px; justify-content: space-between; align-items: center;}&amp;#13;
.yoko-form-group-heading {font-size: 14px; font-weight: 700; color: #1F3B55;}&amp;#13;
.yoko-form-group-line {flex-grow: 1; height: 1px; background-color: #E1E1E1;}&amp;#13;
.yoko-padding24 {padding: 24px;}&amp;#13;
.yoko-grid-btn-wrap {display: flex; gap: 7px; justify-content: right;}&amp;#13;
&amp;#13;
.yoko-project-wrap {height: 255px;}&amp;#13;
.yoko-project-wrap .yoko-search-form {height: 100%;}&amp;#13;
.yoko-middle-text {width: 10px; text-align: center; color: #4B5E70;}&amp;#13;
&amp;#13;
/* 헤더 */&amp;#13;
.yoko-header-container {width: 100%; height: 59px; background-color: #00488D;}&amp;#13;
.yoko-header-inner {margin: 0 auto; padding: 8px 30px 8px 16px; max-width: 1920px; min-width: 1280px;}&amp;#13;
.yoko-nav-wrap {display: flex; align-items: center; gap: 97px;}&amp;#13;
.yoko-nav ul {display: flex; gap: 60px;}&amp;#13;
.yoko-menu a {display: block; height: 43px; line-height: 43px; font-size: 14px; font-weight: 600; color: #fff;}&amp;#13;
.yoko-depth-arrow {position: relative;}&amp;#13;
.yoko-depth-arrow::after {content: ''; display: block; width: 7px; height: 4px; background: url(icon_header_arrow.svg) no-repeat center center; background-size: contain; position: absolute; top: 50%; right: -12px; transform: translateY(-50%);}&amp;#13;
.yoko-header-right {display: flex; margin-left: auto; align-items: center; gap: 24px;}&amp;#13;
.yoko-header-icon-wrap {display: flex; align-items: center; gap: 15px;}&amp;#13;
.yoko-header-user {display: flex; justify-content: center; align-items: center; width: 35px; height: 35px; border-radius: 50%; background-color: #fff; overflow: hidden;}&amp;#13;
.yoko-header-search {display: flex; align-items: center;}&amp;#13;
.yoko-header-search input {padding: 8px 10px; width: 156px; font-size: 14px; border: none; border-radius: 4px 0 0 4px; outline: none;}&amp;#13;
.yoko-header-search input::placeholder {color: #A7B9CA;}&amp;#13;
.yoko-header-search .yoko-arrow button {border: none; background-color: none; display: flex; align-items: center; width: 34px; height: 32px; background-color: #fff; border-radius: 0 4px 4px 0; cursor: pointer;}&amp;#13;
&amp;#13;
&amp;#13;
.yoko-nav ul.yoko-depth {display: none; position: absolute; background-color: #fff; padding: 20px 16px; width: 267px; height: auto; border-radius: 4px; border: 1px solid #00488D; box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.05);}&amp;#13;
.yoko-nav ul.yoko-depth a {font-size: 14px; font-weight: 500; color: #425D78;}&amp;#13;
.yoko-nav ul.yoko-dep-2-wrap {display: none; flex-direction: column; padding: 14px 12px; gap: 0; background-color: #F6F6F6;}&amp;#13;
.yoko-nav .yoko-dep-1 &amp;gt; a {position: relative; padding: 0 12px;}&amp;#13;
.yoko-nav .yoko-dep-1 &amp;gt; a::after {content: ''; display: block; width: 24px; height: 24px; background: url(icon_arrow_search.svg) no-repeat center center; background-size: contain; position: absolute; top: 50%; right: 5px; transform: translateY(-50%);}&amp;#13;
.yoko-nav .yoko-dep-1 &amp;gt; a.rotate::after {transform: rotate(180deg) translateY(50%);}&amp;#13;
.yoko-nav .yoko-dep-1 &amp;gt; a:hover {background-color: #ececec;}&amp;#13;
.yoko-nav .yoko-dep-2 &amp;gt; a {padding: 0 12px;}&amp;#13;
.yoko-nav .yoko-dep-2 &amp;gt; a:hover {background-color: #fff;}&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
/* 모달창 */&amp;#13;
.yoko-modal-normal {padding: 32px 30px; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 768px; height: 240px; background-color: #fff; box-shadow: 0px 2px 30px rgba(0, 0, 0, 0.1); z-index: 100;}&amp;#13;
.yoko-modal-content {position: relative; width: 100%; height: 100%;}&amp;#13;
.yoko-modal-content .yoko-btn-wrap {position: absolute; top: 0; right: 0;}&amp;#13;
.yoko-modal-content .yoko-btn-group {margin-top: 32px;}&amp;#13;
.yoko-modal-content .yoko-btn-group button {padding: 8px 20px;}&amp;#13;
.yoko-modal-content .yoko-btn-wrap button {padding: 6px 10px;}&amp;#13;
&amp;#13;
/* 테이블 형식 */&amp;#13;
.yoko-search-table input,&amp;#13;
.yoko-search-table select,&amp;#13;
.yoko-search-table textarea {font-family: "Pretendard"; font-size: 13px; padding: 6px 10px 5px 10px; max-height: 28px; width: calc(100%); border-radius: 4px; border: 1px solid #E1E8F0; color: #7A8692;}&amp;#13;
.yoko-search-table textarea {max-height: none; width: 100%; padding: 10px 10px 10px 10px; }&amp;#13;
.yoko-search-table input[type=date]::-webkit-calendar-picker-indicator,&amp;#13;
.yoko-search-table input[type=date]::-webkit-inner-spin-button {background: url(icon_calendar.png') no-repeat right center; }&amp;#13;
&amp;#13;
.yoko-search-table select {&amp;#13;
  -moz-appearance:none; /* Firefox */&amp;#13;
  -webkit-appearance:none; /* Safari and Chrome */&amp;#13;
  appearance:none;&amp;#13;
  background-image: url(icon_arrow_down.png);&amp;#13;
  background-repeat: no-repeat;&amp;#13;
  background-position-x: 100%;&amp;#13;
  background-position-y: 1px;&amp;#13;
  line-height: 15px;&amp;#13;
  padding: 6px 30px 5px 10px;&amp;#13;
}&amp;#13;
&amp;#13;
.yoko-search-table-wrap {display: flex; gap: 0;}&amp;#13;
.yoko-search-table tr.yoko-height-short {height: 39px;} &amp;#13;
.yoko-search-table {border-spacing: 0; border-collapse: collapse;}&amp;#13;
.yoko-search-table tr th {padding-right: 16px; text-align: right; background-color: #F7F7F7; border-top: 1px solid #EDEDED; border-bottom: 1px solid #EDEDED;}&amp;#13;
.yoko-search-table tr th.yoko-bg-none {background-color: #fff;}&amp;#13;
.yoko-search-table tr th label {color: #4B5E70; font-family: 'Pretendard'; font-size: 13px; font-style: normal; font-weight: 500; line-height: normal;}&amp;#13;
.yoko-search-table tr td {padding: 5px 10px; border-top: 1px solid #EDEDED; border-bottom: 1px solid #EDEDED;}&amp;#13;
.yoko-search-table tr td input {padding: 5px 10px; width: 100%; height: 100%;}&amp;#13;
.yoko-search-table tr td input:disabled {border: 1px solid #E1E8F0; background: #F1F1F1;}&amp;#13;
.yoko-search-table .yoko-form-inline {width: 100%;}&amp;#13;
&amp;#13;
.yoko-search-table-wrapper {display: flex; gap: 30px;}&amp;#13;
.yoko-search-table-heading {margin-top: 12px; margin-bottom: 5px; font-size: 16px; font-weight: 600; color: #1F3B55;}&amp;#13;
.yoko-table-heading {text-align: left !important; font-size: 14px; font-weight: 700; color: #1F3B55;}&amp;#13;
.yoko-search-table.yoko-empty-col {flex: 1;}&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
@media (max-width: 1719px) {&amp;#13;
  .yoko-container {width: 1280px; min-width: 1280px;}&amp;#13;
  .yoko-search-form {gap: 15px;}&amp;#13;
  .yoko-flex-responsive {flex-direction: column; gap: 8px;}&amp;#13;
  .yoko-flex-responsive-row {flex-direction: row; gap: 20px;}&amp;#13;
  .yoko-search-form-company.yoko-col60 {width: 888px;}&amp;#13;
  .yoko-search-form-company .yoko-padding24 {padding: 14px;}&amp;#13;
  .yoko-search-form-company .yoko-search-form {gap: 7px;}&amp;#13;
  .yoko-search-form-governance.yoko-col40 {width: 381px;}&amp;#13;
  .yoko-project-wrap.yoko-col60 {width: 888px;}&amp;#13;
  .yoko-project-wrap.yoko-col40 {width: 381px;}&amp;#13;
  .yoko-project-wrap .yoko-search-form {padding: 18px;}&amp;#13;
&amp;#13;
  .yoko-form-amount-wrap label.yoko-short {width: 130px;}&amp;#13;
  .quotation-responsive label.yoko-short-110 {width: 142px;}&amp;#13;
  .yoko-flag-wrap {margin-top: 15px; height: 100px !important;}&amp;#13;
  .yoko-flag-wrap.yoko-search-form .yoko-form-group {gap: 40px;}&amp;#13;
  .yoko-flag-wrap .yoko-flex-responsive-row {flex-direction: row; gap: 40px;}&amp;#13;
&amp;#13;
  .yoko-nav-wrap {gap: 30px;}&amp;#13;
  .yoko-nav ul {gap: 55px;}&amp;#13;
}&amp;#13;
&amp;#13;
&amp;#13;
.yoko-btn-quotation {&amp;#13;
&amp;#13;
  border: 1px solid #E1E8F0;&amp;#13;
&amp;#13;
  padding: 0 10px; /* 좌우 패딩 추가 */&amp;#13;
&amp;#13;
  width : 140px;&amp;#13;
&amp;#13;
  min-width: 30px;&amp;#13;
&amp;#13;
  height: 28px;&amp;#13;
&amp;#13;
  background-color: #fff;&amp;#13;
&amp;#13;
  color: #000;&amp;#13;
&amp;#13;
  font-size: 14px;&amp;#13;
&amp;#13;
  display: inline-flex; /* 중앙 배치를 위한 플렉스박스 사용 */&amp;#13;
&amp;#13;
  align-items: center; /* 수직 중앙 배치 */&amp;#13;
&amp;#13;
  justify-content: center; /* 수평 중앙 배치 */&amp;#13;
&amp;#13;
  cursor: pointer;&amp;#13;
&amp;#13;
}&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
/*리얼그리드 수정*/&amp;#13;
.rg-root {color: #4B5966 !important;  font-family: "Pretendard" !important;   font-size: 14px !important;  font-style: normal !important;  font-weight: 500 !important;  line-height: normal !important;}&amp;#13;
.rg-grid {border: 1px solid #EAEEF3 !important;}&amp;#13;
&amp;#13;
.rg-header {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}&amp;#13;
.rg-header .rg-table tr td {border-right: 1px solid #EAEEF3 !important; border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;} &amp;#13;
.rg-head {background: #FBFCFF  !important; color:#8B99A6 !important; font-weight: 600 !important; font-weight: 500 !important;}&amp;#13;
.rg-head .rg-table tr td { border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important; font-weight: 500 !important;}&amp;#13;
&amp;#13;
.rg-body,&amp;#13;
.rg-fixed-body {color: #4B5966 !important;}&amp;#13;
.rg-body .rg-table tr td, &amp;#13;
.rg-fixed-body .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-bottom: 1px solid #EAEEF3 !important;}&amp;#13;
.rg-rowbarcontainer .rg-table tr td {background-color: transparent !important;    border-right: 1px solid #EAEEF3 !important;    border-bottom: 1px solid #EAEEF3 !important;}&amp;#13;
.rg-alternate-row {background: #fff !important;}&amp;#13;
.rg-footer {color: #606060 !important; background: #FBFCFF  !important;}&amp;#13;
.rg-footer .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}&amp;#13;
.rg-foot {color: #606060 !important; background: #FBFCFF  !important;}&amp;#13;
.rg-foot .rg-table tr td {border-right: 1px solid #EAEEF3 !important;  border-top: 1px solid #EAEEF3 !important;}&amp;#13;
.rg-focus {border:  2px solid #68B3FC !important;}&amp;#13;
.rg-header-focus {background: #E5F2FF !important; color: #6F7479 !important;}&amp;#13;
.rg-header .rg-table tr td:hover {background: #68B3FC !important; color: #fff !important;}&amp;#13;
.rg-header-select {background: rgb(232 248 240 / 50%) !important;}&amp;#13;
.rg-selection { background: rgb(232 248 240 / 35%) !important; border: 1px solid #15BD66!important;}&amp;#13;
.rg-editor-container { border: 2px solid #27C382 !important; }&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
.modal {&amp;#13;
  display: none;&amp;#13;
  position: fixed;&amp;#13;
  z-index: 1;&amp;#13;
  padding-top: 60px;&amp;#13;
  left: 0;&amp;#13;
  top: 0;&amp;#13;
  width: 100%;&amp;#13;
  height: 100%;&amp;#13;
  overflow: auto;&amp;#13;
  background-color: rgb(0,0,0);&amp;#13;
  background-color: rgba(0,0,0,0.4);&amp;#13;
}&amp;#13;
&amp;#13;
.modal-content {&amp;#13;
  background-color: #fefefe;&amp;#13;
  margin: 5% auto;&amp;#13;
  padding: 20px;&amp;#13;
  border: 1px solid #888;&amp;#13;
  width: 80%;&amp;#13;
}&amp;#13;
&amp;#13;
.close {&amp;#13;
  color: #aaa;&amp;#13;
  float: right;&amp;#13;
  font-size: 28px;&amp;#13;
  font-weight: bold;&amp;#13;
}&amp;#13;
&amp;#13;
.close:hover,&amp;#13;
.close:focus {&amp;#13;
  color: black;&amp;#13;
  text-decoration: none;&amp;#13;
  cursor: pointer;&amp;#13;
}&amp;#13;
&amp;#13;
&amp;#13;
/*  &amp;#13;
TEST Modal CSS&amp;#13;
*/&amp;#13;
.modal {&amp;#13;
display: none; /* Hidden by default */&amp;#13;
position: fixed; /* Stay in place */&amp;#13;
z-index: 3; /* Sit on top */&amp;#13;
left: 0;&amp;#13;
top: 0;&amp;#13;
width: 100%; /* Full width */&amp;#13;
height: 100%; /* Full height */&amp;#13;
overflow: auto; /* Enable scroll if needed */&amp;#13;
background-color: rgb(0,0,0); /* Fallback color */&amp;#13;
background-color: rgba(0,0,0,0.4); /* Black w/ opacity */&amp;#13;
}&amp;#13;
.modal-content {&amp;#13;
background-color: #fefefe;&amp;#13;
//margin: 5% auto; /* 15% from the top and centered */&amp;#13;
padding: 20px;&amp;#13;
border: 1px solid #888;&amp;#13;
width: 50%; /* Reduced width to 60% */&amp;#13;
}&amp;#13;
.close {&amp;#13;
color: #aaa;&amp;#13;
float: right;&amp;#13;
font-size: 28px;&amp;#13;
font-weight: bold;&amp;#13;
}&amp;#13;
.close:hover,&amp;#13;
.close:focus {&amp;#13;
color: black;&amp;#13;
text-decoration: none;&amp;#13;
cursor: pointer;&amp;#13;
}&amp;#13;
.container {&amp;#13;
list-style-type: none;&amp;#13;
padding: 0;&amp;#13;
}&amp;#13;
.container li {&amp;#13;
padding: 8px 0;&amp;#13;
border-bottom: 1px solid #ddd;&amp;#13;
display: flex;&amp;#13;
justify-content: space-between;&amp;#13;
margin-bottom: 10px;&amp;#13;
box-sizing: border-box; /* Include padding and border in element's total width and height */&amp;#13;
width: 100%; /* Ensure the list items take the full width of the container */&amp;#13;
}&amp;#13;
.highlight-form {&amp;#13;
border: 2px solid red;&amp;#13;
}&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
.popover {&amp;#13;
    position: absolute;&amp;#13;
    top: 50px;&amp;#13;
    left: 50px;&amp;#13;
    z-index: 1060;&amp;#13;
    display: none;&amp;#13;
    max-width: 276px;&amp;#13;
    padding: 1px;&amp;#13;
    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;&amp;#13;
    font-size: 14px;&amp;#13;
    font-weight: 400;&amp;#13;
    line-height: 1.42857143;&amp;#13;
    color: #333;&amp;#13;
    text-align: left;&amp;#13;
    background-color: #fff;&amp;#13;
    border: 1px solid #ccc;&amp;#13;
    border-radius: 3px;&amp;#13;
    box-shadow: 0 5px 10px rgba(0,0,0,.2);&amp;#13;
}&amp;#13;
&amp;#13;
.popover.show {&amp;#13;
    display: block;&amp;#13;
}&amp;#13;
&amp;#13;
.popover .popover-header {&amp;#13;
    padding: 8px 14px;&amp;#13;
    margin: 0;&amp;#13;
    font-size: 14px;&amp;#13;
    background-color: #f7f7f7;&amp;#13;
    border-bottom: 1px solid #ebebeb;&amp;#13;
    border-radius: 3px 3px 0 0;&amp;#13;
}&amp;#13;
&amp;#13;
.popover .popover-body {&amp;#13;
    padding: 9px 14px;&amp;#13;
}&amp;#13;
&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;false&lt;/has_preview&gt;&lt;id&gt;rfqentrywd1st&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function link(scope, element, attrs, controller) {  }]]&gt;&lt;/link&gt;&lt;name&gt;rfqEntryWd1st&lt;/name&gt;&lt;option_schema/&gt;&lt;public&gt;false&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function() {
	var userLanguage =  gs.getSession().getLanguage() 
	//gs.addInfoMessage('User Language: ' + userLanguage);

	    data.popoverContent = "Server-side generated content here";

var grLabel = new GlideRecord('sys_documentation');
grLabel.addQuery('name', 'x_yergb_bpm_rfq_entry');

if(userLanguage == 'en') {
    grLabel.addQuery('language', 'en');
} else if(userLanguage == 'zh') {
    grLabel.addQuery('language', 'zh');
}  else if(userLanguage == 'ko') {
    grLabel.addQuery('language', 'ko');
} else {
    //alert("what have you done");
    return;
}

grLabel.query();



while(grLabel.next()) {
    if(grLabel.element == 'number') {		
       data.labelNumber = grLabel.label.toString(); // assuming 'value' contains the needed data
    } else if(grLabel.element == 'requestor') {
        data.labelRequestor  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'request_due') {
        data.labelRequestDue  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'yoda_opportunity_no') {
        data.labelYodaOpportunityNo  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'code') {
        data.labelCode  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'risk_management') {
        data.labelRiskManagement = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'state') {
        data.labelState  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 't_cas') {
        data.labelTCAS = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'quotation_state') {
        data.labelQuotationState  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'territory_review') {
        data.labelTerritoryReview  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'remark') {
        data.labelRemark  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'estimated_delivery_date') {
        data.labelEstimatedDeliveryDate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'quotation') {
        data.labelQuotation  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'request_date') {
        data.labelRequestDate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'quotation_due_date') {
        data.labelQuotationDueDate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'estimated_order_date') {
        data.labelEstimatedOrderDate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'quotation_type') {
        data.labelQuotationType  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'end_user') {
        data.labelEndUser  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'project_detail') {
        data.labelProjectDetail  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'reason_code') {
        data.labelReasonCode  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'estimated_oi_amount') {
        data.labelEstimatedOIAmount  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'project_title') {
        data.labelProjectTitle  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'assignment_group') {
        data.labelAssignmentGroup  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'credit_assessment') {
        data.labelCreditAssessment  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'contract_address') {
        data.labelContractAddress  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'assigned_to') {
        data.labelAssignedTo  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'caution') {
        data.labelCaution  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'currency') {
        data.labelCurrency  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'contractor_country') {
        data.labelContractorCountry  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'complete_date') {
        data.labelCompleteDate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'contract_name') {
        data.labelContractName  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'contract') {
        data.labelContract  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'sales_manager') {
        data.labelSalesManager  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'customer_rfq') {
        data.labelCustomerRFQ  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'exchange_rate') {
        data.labelExchangeRate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'total_quote_price_lc') {
        data.labelTotalQuotePriceLC  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'total_quote_price') {
        data.labelTotalQuotePrice  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'submitted_date') {
        data.labelSubmittedDate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'currency_lc') {
        data.labelCurrencyLC  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'exchange_rate') {
        data.labelExchangeRate  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'estimated_oi_amount_lc') {
        data.labelEstimatedOIAmountLC  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'project_status') {
        data.labelProjectStatus  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else if(grLabel.element == 'profit_company') {
        data.labelProfitCompany  = grLabel.label.toString(); // assuming 'value' contains the needed data
    }else{
        //gs.addErrorMessage("WHAT ARE YOPU DONG")
    }
}

    /* populate the 'data' object */
    /* e.g., data.table = $sp.getValue('table'); */
        //gs.addErrorMessage("야 정신차려봐")

    // 현재 접속한 유저의 sysid 를 가져옴
    var userName = gs.getUser().getDisplayName()
    var userNameSysId = gs.getUser().getID();



    var grU = new GlideRecord('sys_user');
    grU.get(userNameSysId)
    grUCompany = grU.company
    var grC = new GlideRecord('core_company')
    if (grC.get(grUCompany)) {
        var currency = grC.u_currency.code
       // gs.addInfoMessage(currency)
        data.currency = grC.u_currency.code.toString()
        data.currency_sys_id = grC.u_currency.toString()
       // gs.addInfoMessage( data.currency)
       // gs.addInfoMessage(data.currency_sys_id)

    }

	var urlSysId = $sp.getParameter('sys_id');

    // client script를 통해서 넣어준 유저의 이름, sysid 를 server단으로 가져옴
    data.requestor = userName;
    data.requestor_sys_id = userNameSysId;
	   
		if(!urlSysId){
			data.sales_manager = userName;
	    data.sales_manager_sys_id = userNameSysId;
		}
		
    // 버튼, 요소 노출
    data.showUpdate = false;
    data.showSave = true
    data.showCopy = true
    data.showQuotationTypeSelect = true;

    // server단에서 파라미터로 sys_id를 가져오기
    data.sys_id = $sp.getParameter("sys_id");

    // Select 가져올건데
    var grS = new GlideRecord('x_yergb_bpm_rfq_entry'); // Replace with your table name
    grS.initialize();
    var choices = grS.getElement('quotation_type').getChoices(); // Replace with your field name
    var choicesValue = grS.getElement('quotation_type').getChoiceValue(); // Replace with your field name
    var choiceList = [];
    for (var i = 0; i &lt; choices.length; i++) {
        var choice = choices[i];
        console.log(choice)
        choiceList.push(choice)

    }
    data.choices = choiceList;
    // Select 가져올건데

    if (input &amp;&amp; input.isCopy) { //기존 레코드를 읽어와서 업데이트 할거임
			//gs.addErrorMessage("이게 맞나?")
		}
    if (data.sys_id &amp;&amp; input &amp;&amp; input.isRead) { //기존 레코드를 읽어와서 업데이트 할거임
      	//gs.addErrorMessage("159753")  
		var grI = new GlideRecord('x_yergb_bpm_rfq_entry');
        var requestor
        var requestor_sys_id
        var number
        var request_date
        var complete_date
        var estimated_oi_amount
        var currency
        var currency_sys_id
        var estimated_order_date
        var estimated_delivery_date
        var quotation
        var quotation_sys_id
        var quotation_type
		var quotation_type_label
        var quotation_due_date
        var yoda_opportunity_no
        var assignment_group
        var assigned_to
        var end_user
        var end_user_sys_id
        var end_user_code
        var contract
        var contract_sys_id
        var contract_code
        var contract_name
        var contract_address
        var contract_country
        var project_title
        var project_detail
        var caution
        var reason_code
        var request_due_date
        var remark
        var sales_manager
        var sales_manager_sys_id
        var currency_lc
        var exchange_rate
        var estimated_oi_amount_lc
        var project_status
        var profit_company

        ///////////// 여기서는 아마 뿌려주는 로직을 할듯
        grI.addQuery('sys_id', data.sys_id);
        grI.query();
        while (grI.next()) {
            requestor = grI.requestor.name.toString();
            requestor_sys_id = grI.requestor.toString();
            number = grI.number.toString()
            request_date = grI.request_date.toString()
            complete_date = grI.complete_date.toString()
            estimated_oi_amount = grI.estimated_oi_amount.toString()
            currency = grI.currency.code.toString();
            currency_sys_id = grI.currency.sys_id.toString()
            estimated_order_date = grI.estimated_order_date.toString()
            estimated_delivery_date = grI.estimated_delivery_date.toString()
            quotation_type = grI.quotation_type.toString()
            quotation_due_date = grI.quotation_due_date.toString()
            yoda_opportunity_no = grI.yoda_opportunity_no.toString()
            assignment_group = grI.assignment_group.name.toString()
            assigned_to = grI.assigned_to.name.toString()
            end_user = grI.end_user.name.toString();
            end_user_sys_id = grI.end_user.toString()
            end_user_code = grI.end_user.u_company_code.toString()
            contract = grI.contract.name.toString()
            contract_sys_id = grI.contract.toString()
            contract_code = grI.contract.u_company_code.toString()
            contract_name = grI.contract_name.toString()
            contract_address = grI.contract_address.toString()
            project_title = grI.project_title.toString()
            project_detail = grI.project_detail.toString()
            caution = grI.caution.toString()
            reason_code = grI.reason_code.toString()
            request_due_date = grI.request_due_date.toString()
            remark = grI.remark.toString()
			sales_manager = grI.sales_manager.name.toString()
			sales_manager_sys_id = grI.sales_manager.toString();
            currency_lc = grI.currency_lc.toString()
            exchange_rate = grI.exchange_rate.toString()
            estimated_oi_amount_lc = grI.estimated_oi_amount_lc.toString()
            project_status = grI.project_status.toString()
            profit_company = grI.profit_company.toString()

					//gs.addErrorMessage(currency_sys_id)
            // quotation의 라벨을 가져오는 함수 (하단에 작성 되어있음)
            quotation_type_label = getChoiceLabel('x_yergb_bpm_rfq_entry', 'quotation_type', quotation_type);
        }
        // data 로 html 로 보내줌
        data.requestor_sys_id = requestor_sys_id
        data.requestor = requestor
        data.number = number
        data.request_date = request_date
        data.complete_date = complete_date
        data.estimated_oi_amount = estimated_oi_amount
        data.currency_sys_id = currency_sys_id
        data.currency = currency
        data.estimated_order_date = estimated_order_date
        data.estimated_delivery_date = estimated_delivery_date
        data.quotation_type = quotation_type
        data.quotation_type_label = quotation_type_label
        data.quotation_due_date = quotation_due_date
        data.yoda_opportunity_no = yoda_opportunity_no
        data.assignment_group = assignment_group
        data.assigned_to = assigned_to
        data.end_user = end_user
        data.end_user_code = end_user_code
        data.end_user_sys_id = end_user_sys_id
        data.contract = contract
        data.contract_code = contract_code
        data.contract_sys_id = contract_sys_id
        data.contract_name = contract_name
        data.contract_address = contract_address
        data.contract_country = contract_country
        data.project_title = project_title
        data.project_detail = project_detail
        data.caution = caution
        data.reason_code = reason_code
        data.request_due_date = request_due_date
        data.remark = remark
        data.sales_manager = sales_manager
        data.sales_manager_sys_id = sales_manager_sys_id
        data.currency_lc = currency_lc
        data.exchange_rate = exchange_rate
        data.estimated_oi_amount_lc = estimated_oi_amount_lc
        data.project_status = project_status
        data.profit_company = profit_company

        // Quotation 을 가져오기 위해 , 현재 sys id 를 quotation 테이블에 넣어서 가져옴
        var grQ = new GlideRecord('x_yergb_bpm_quotation');
        var quotation
        var quotation_sys_id
        var quotation_state

        var exchange_rate
        var total_quote_price
        var total_quote_price_lc
        grQ.addQuery('rfq_entry', data.sys_id);
        grQ.query();
        while (grQ.next()) {
            quotation = grQ.number.toString();
            quotation_sys_id = grQ.sys_id.toString();
            quotation_state = grQ.state.getDisplayValue().toString();
            //exchange_rate = grQ.exchange_rate.toString();
            total_quote_price = grQ.total_quote_price.toString();
            total_quote_price_lc = grQ.total_quote_price_lc.toString();
        } 
        data.quotation = quotation
        data.quotation_sys_id = quotation_sys_id
        data.quotation_state = quotation_state

        //data.exchange_rate = exchange_rate
        data.total_quote_price = total_quote_price
        data.total_quote_price_lc = total_quote_price_lc
        //user 의 company를 찾고
        //그 컴패니의 currency의 display value를 가져와야 하는군
        /*
        var grU = new GlideRecord('sys_user');
        grU.get(data.requestor_sys_id)
        grUCompany = grU.company
        var grC = new GlideRecord('core_company')
        if (grC.get(grUCompany)) {
            var currency = grC.u_currency.code
            gs.addInfoMessage(currency)
            data.currency = grC.u_currency.code.toString()

        }
            */
    }
		else if (input &amp;&amp; input.isCopy) { //기존 레코드를 읽어와서 업데이트 할거임
      	//gs.addErrorMessage("miraclufaiewhglweahg")  
			  var grI = new GlideRecord('x_yergb_bpm_rfq_entry');
        var requestor
        var requestor_sys_id
        var number
        var request_date
        var complete_date
        var estimated_oi_amount
        var currency
        var currency_sys_id
        var estimated_order_date
        var estimated_delivery_date
        var quotation
        var quotation_sys_id
        var quotation_type
				var quotation_type_label
        var quotation_due_date
        var yoda_opportunity_no
        var assignment_group
        var assigned_to
        var end_user
        var end_user_sys_id
				var end_user_code
        var contract
        var contract_sys_id

        var contract_code
        var contract_name
        var contract_address
        var contract_country
        var project_title
        var project_detail
        var caution
        var reason_code
        var request_due_date
        var remark
        var sales_manager
        var submitted_date
        var customer_rfq
        var currency_lc
        var exchange_rate
        var estimated_oi_amount_lc
        var project_status
        var profit_company


        ///////////// 여기서는 아마 뿌려주는 로직을 할듯
        grI.addQuery('sys_id', input.copy_sys_id);
        grI.query();
        while (grI.next()) {
            requestor = grI.requestor.name.toString();
            requestor_sys_id = grI.requestor.toString();
			sales_manager = grI.sales_manager.name.toString();
			sales_manager_sys_id = grI.sales_manager.toString();
			customer_rfq = grI.customer_rfq.toString();
            //number = grI.number.toString()
            request_date = grI.request_date.toString()
            complete_date = grI.complete_date.toString()
            estimated_oi_amount = grI.estimated_oi_amount.toString()
            currency = grI.currency.code.toString();
            currency_sys_id = grI.currency.sys_id.toString()
            estimated_order_date = grI.estimated_order_date.toString()
            estimated_delivery_date = grI.estimated_delivery_date.toString()
            submitted_date = grI.submitted_date.toString();
            quotation_type = grI.quotation_type.toString()
            quotation_due_date = grI.quotation_due_date.toString()
            yoda_opportunity_no = grI.yoda_opportunity_no.toString()
            assignment_group = grI.assignment_group.name.toString()
            assigned_to = grI.assigned_to.name.toString()
            end_user = grI.end_user.name.toString();
            end_user_sys_id = grI.end_user.toString()
            end_user_code = grI.end_user.u_company_code.toString()
            contract = grI.contract.name.toString()
            contract_sys_id = grI.contract.toString()
            contract_code = grI.contract.u_company_code.toString()
            contract_name = grI.contract_name.toString()
            contract_address = grI.contract_address.toString()
            project_title = grI.project_title.toString()
            project_detail = grI.project_detail.toString()
            caution = grI.caution.toString()
            reason_code = grI.reason_code.toString()
            request_due_date = grI.request_due_date.toString()
            remark = grI.remark.toString()
            currency_lc = grI.currency_lc.toString()
            exchange_rate = grI.exchange_rate.toString()
            estimated_oi_amount_lc = grI.estimated_oi_amount_lc.toString()
            project_status = grI.project_status.toString()
            profit_company = grI.profit_company.toString()

					//gs.addErrorMessage(currency_sys_id)
            // quotation의 라벨을 가져오는 함수 (하단에 작성 되어있음)
            quotation_type_label = getChoiceLabel('x_yergb_bpm_rfq_entry', 'quotation_type', quotation_type);
        }
        // data 로 html 로 보내줌
        data.requestor_sys_id = requestor_sys_id
        data.requestor = requestor
		data.sales_manager_sys_id = sales_manager_sys_id
        data.sales_manager = sales_manager
        data.customer_rfq = customer_rfq
              //data.number = number
        data.request_date = request_date
        data.complete_date = complete_date
        data.estimated_oi_amount = estimated_oi_amount
        data.currency_sys_id = currency_sys_id
        data.currency = currency
        data.estimated_order_date = estimated_order_date
        data.estimated_delivery_date = estimated_delivery_date
        data.submitted_date = submitted_date
        data.quotation_type = quotation_type
        data.quotation_type_label = quotation_type_label
        data.quotation_due_date = quotation_due_date
        data.yoda_opportunity_no = yoda_opportunity_no
        data.assignment_group = assignment_group
        data.assigned_to = assigned_to
        data.end_user = end_user
        data.end_user_code = end_user_code
        data.end_user_sys_id = end_user_sys_id
        data.contract = contract
        data.contract_code = contract_code
        data.contract_sys_id = contract_sys_id
        data.contract_name = contract_name
        data.contract_address = contract_address
        data.contract_country = contract_country
        data.project_title = project_title
        data.project_detail = project_detail
        data.caution = caution
        data.reason_code = reason_code
        data.request_due_date = request_due_date
        data.remark = remark
        data.currency_lc = currency_lc
        data.exchange_rate = exchange_rate
        data.estimated_oi_amount_lc = estimated_oi_amount_lc
        data.project_status = project_status
        data.profit_company = profit_company

        // Quotation 을 가져오기 위해 , 현재 sys id 를 quotation 테이블에 넣어서 가져옴
       /*
			  var grQ = new GlideRecord('x_yergb_bpm_quotation');
        var quotation
        var quotation_sys_id
        var quotation_state
        grQ.addQuery('rfq_entry', data.sys_id);
        grQ.query();
        while (grQ.next()) {
            quotation = grQ.number.toString();
            quotation_sys_id = grQ.sys_id.toString();
            quotation_state = grQ.state.getDisplayValue().toString();
        }
        data.quotation = quotation
        data.quotation_sys_id = quotation_sys_id
        data.quotation_state = quotation_state
				*/
        //user 의 company를 찾고
        //그 컴패니의 currency의 display value를 가져와야 하는군
        /*
        var grU = new GlideRecord('sys_user');
        grU.get(data.requestor_sys_id)
        grUCompany = grU.company
        var grC = new GlideRecord('core_company')
        if (grC.get(grUCompany)) {
            var currency = grC.u_currency.code
            gs.addInfoMessage(currency)
            data.currency = grC.u_currency.code.toString()

        }
            */
    }
	
	

    //////////////// 파라미터에 SYS_ID가 있는지 체크 하는거다. 
    if (input &amp;&amp; input.urlSysId) {
        var urlSysId = input.urlSysId;
        var gr = new GlideRecord('x_yergb_bpm_rfq_entry');
        gr.get(input.urlSysId);
        data.state = gr.state.getDisplayValue();
        // 현재 STATE 에 따라서, 버튼들의 노출도를 전부 조절한다 여기서
        if (gr.state.getDisplayValue() == "New" &amp;&amp;    (   gs.getUser().isMemberOf('YCN Sales Group') ||  gs.getUser().isMemberOf('YKO Sales Group')   ) ) {
            data.showAssess = true;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true
            data.showOIReport = false;
            data.showQuotationTypeSelect = true;
            data.showQuotationType = false;
        } else if (gr.state.getDisplayValue() == "Assess" &amp;&amp; (gs.getUser().isMemberOf('YCN Sales Group') ||gs.getUser().isMemberOf('YKO Sales Group') )) {
            data.showAssess = false;
            data.showRequest = true;
            data.showSubmit = false;
            data.showInProgress = true;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true
            data.showCopy = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        } else if (gr.state.getDisplayValue() == "Requested" &amp;&amp; ( gs.getUser().isMemberOf('YCN_Sales_Engineer_Group') || gs.getUser().isMemberOf('YKO_Sales_Engineer_Group') ) ) {
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = true;
            data.showReturn = true;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true
            data.showCopy = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        } else if (gr.state.getDisplayValue() == "Returned" &amp;&amp; (gs.getUser().isMemberOf('YCN Sales Group') ||gs.getUser().isMemberOf('YKO Sales Group') )) {
            data.showAssess = true;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = true;
            data.showUpdate = true;
            data.showSave = true
            data.showCopy = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        } else if (gr.state.getDisplayValue() == "In Progress") {
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = true;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true
            data.showCopy = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        } else if (gr.state.getDisplayValue() == "Submitted" ) {
            data.showAssess = false;
            //data.showRequest = false;
            data.showSubmit = false;
            //data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = true;
            data.showSave = true;
            data.showCopy = false
            data.showOIReport = true;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
            if(data.quotation_type_label == "Budgetary"){
                data.showInProgress = true;
            }
            else if(data.quotation_type_label == "Submission to Customers"){
                data.showRequest = true;
            }
            else{
                gs.addInfoMessage("how creative")
            }
        } else if (gr.state.getDisplayValue() == "Completed" ||(gs.getUser().isMemberOf('YCN_Sales_Engineer_Group') || gs.getUser().isMemberOf('YKO_Sales_Engineer_Group') ) ) {
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = false;
            data.showSave = false;
            data.showCopy = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        }else {
          //  gs.addErrorMessage("who are you")
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = false;
            data.showSave = false;
            data.showCopy = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        }

        // 이거는 완전히 새로운 상태일때  완전 INSERT
/*
			if (gr.requestor != gs.getUser().getID()) {

            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = false;
            data.showSave = false
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        }
*/
		if((gs.getUser().isMemberOf('YCN Sales Group') ||gs.getUser().isMemberOf('YKO Sales Group') ) &amp;&amp;  gr.state.getDisplayValue() == "In Progress" &amp;&amp; data.quotation_state != 'Completed'){ // 세일즈 그룹이고, in progress 이고, q type 이 complete 가 아니면 버튼들 
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = false;
            data.showSave = false;
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        }  
        
        if((gs.getUser().isMemberOf('YCN_Sales_Engineer_Group') || gs.getUser().isMemberOf('YKO_Sales_Engineer_Group') ) &amp;&amp;  gr.state.getDisplayValue() == "In Progress"){  //엔지니어 그룹이고, in progress 이고 
            data.showAssess = false;
            data.showRequest = false;
            data.showSubmit = false;
            data.showInProgress = false;
            data.showAccept = false;
            data.showReturn = false;
            data.showCancel = false;
            data.showUpdate = false;
            data.showSave = false
            data.showOIReport = false;
            data.showQuotationTypeSelect = false;
            data.showQuotationType = true;
        }


        /////////// 버튼을 누르면 STATE가 바뀐다. 
        if (input.isButton) {
            var grA = new GlideRecord('x_yergb_bpm_rfq_entry');
            grA.get(input.urlSysId);
            grA.setValue('state', input.newState)
            grA.update()
        }


    }


    //////////////////////// SAVE 버튼을 눌렀을때 ---- INSERT거나 UPDATE거나의 분기점
    if (input &amp;&amp; input.isInsert) { // 없으면 오류 뜸, 둘다 있어야 함.
      //gs.addErrorMessage("야 정신차려봐 isInsert") 
		   	var requestor = input.requestor_sys_id
		   	var sales_manager = input.sales_manager_sys_id
		   	var customer_rfq = input.customer_rfq
        var request_date = input.request_date
        var complete_date = input.complete_date
        var estimated_oi_amount = getValueOrEmptyString(input.estimated_oi_amount)
        var currency = input.currency_sys_id
				//gs.addErrorMessage(currency)
        var estimated_order_date = input.estimated_order_date
        var estimated_delivery_date = input.estimated_delivery_date
        var quotation_due_date = input.quotation_due_date
        var submitted_date = input.submitted_date;
        var quotation_type = input.quotation_type
        var yoda_opportunity_no = getValueOrEmptyString(input.yoda_opportunity_no)
        var assignment_group = input.assignment_group_sys_id
        var assigned_to = input.assigned_to_sys_id
        var end_user = input.end_user_sys_id
        var contract = input.contract_sys_id
        var contract_name = getValueOrEmptyString(input.contract_name)
        var contract_address = getValueOrEmptyString(input.contract_address)
        var contract_country = input.contract_country
        var project_title = getValueOrEmptyString(input.project_title)
        var project_detail = getValueOrEmptyString(input.project_detail);
        var caution = getValueOrEmptyString(input.caution)
        var reason_code = getValueOrEmptyString(input.reason_code)
        var request_due_date = input.request_due_date
        var remark = getValueOrEmptyString(input.remark)
        var currency_lc = input.currency_lc
        var exchange_rate = input.exchange_rate
        var estimated_oi_amount_lc = input.estimated_oi_amount_lc
        var project_status = input.project_status
        var profit_company = input.profit_company

        var gr = new GlideRecord('x_yergb_bpm_rfq_entry');
        gr.initialize();
        gr.setValue('requestor', requestor)
        gr.setValue('sales_manager', sales_manager)
        gr.setValue('customer_rfq', customer_rfq)
        gr.setValue('request_date', request_date)
        gr.setValue('complete_date', complete_date)
        gr.setValue('currency', currency)
        gr.setValue('estimated_oi_amount', estimated_oi_amount)
        gr.setValue('estimated_order_date', estimated_order_date)
        gr.setValue('estimated_delivery_date', estimated_delivery_date)
        gr.setValue('submitted_date', submitted_date)
        gr.setValue('quotation_due_date', quotation_due_date)
        gr.setValue('yoda_opportunity_no', yoda_opportunity_no)
        gr.setValue('quotation_type', quotation_type)
        gr.setValue('assignment_group', assignment_group)
        gr.setValue('assigned_to', assigned_to)
        gr.setValue('end_user', end_user)
        gr.setValue('contract', contract)
        gr.setValue('contract_name', contract_name)
        gr.setValue('contract_address', contract_address)
        gr.setValue('contract_country', contract_country)
        gr.setValue('project_title', project_title)
        gr.setValue('project_detail', project_detail)
        gr.setValue('caution', caution)
        gr.setValue('reason_code', reason_code)
        gr.setValue('request_due_date', request_due_date)
        gr.setValue('remark', remark)
        gr.setValue('currency_lc', currency_lc)
        gr.setValue('exchange_rate', exchange_rate)
        gr.setValue('estimated_oi_amount_lc', estimated_oi_amount_lc)

        gr.setVAlue('project_status',project_status)
        gr.setVAlue('profit_company',profit_company)

        
        gr.insert();
        data.redirect_sys_id = gr.getUniqueValue();;
       // gs.addErrorMessage("quotation_type")
       // gs.addErrorMessage(quotation_type)

    } else if (input &amp;&amp; input.isUpdate) {
     //gs.addErrorMessage("야 정신차려봐 isUpdate")
			var requestor = input.requestor_sys_id
            var sales_manager = input.sales_manager_sys_id
            var customer_rfq = input.customer_rfq

        var request_date = input.request_date
        var complete_date = input.complete_date
        var estimated_oi_amount = getValueOrEmptyString(input.estimated_oi_amount)
        var currency = input.currency_sys_id

        var estimated_order_date = input.estimated_order_date
        var estimated_delivery_date = input.estimated_delivery_date
        var submitted_date = input.submitted_date;

        var quotation_due_date = input.quotation_due_date
        var quotation_type = input.quotation_type
        var yoda_opportunity_no = getValueOrEmptyString(input.yoda_opportunity_no)
        var assignment_group = input.assignment_group_sys_id
        var assigned_to = input.assigned_to_sys_id
        var end_user = input.end_user_sys_id
        var contract = input.contract_sys_id
        var contract_name = getValueOrEmptyString(input.contract_name)
        var contract_address = getValueOrEmptyString(input.contract_address)
        var contract_country = input.contract_country
        var project_title = getValueOrEmptyString(input.project_title)
        var project_detail = getValueOrEmptyString(input.project_detail);
        var caution = getValueOrEmptyString(input.caution)
        var reason_code = getValueOrEmptyString(input.reason_code)
        var request_due_date = input.request_due_date
        var remark = getValueOrEmptyString(input.remark)
        var currency_lc = input.currency_lc
        var exchange_rate = input.exchange_rate
        var estimated_oi_amount_lc = input.estimated_oi_amount_lc
        
        var project_status = input.project_status
        var profit_company = input.profit_company

        var grU = new GlideRecord('x_yergb_bpm_rfq_entry');

        ///////////// 여기서는 아마 뿌려주는 로직을 할듯
        grU.get(input.urlSysId);
        grU.setValue('requestor', requestor)
        grU.setValue('sales_manager', sales_manager)
        grU.setValue('customer_rfq', customer_rfq)
			
        grU.setValue('request_date', request_date)
        grU.setValue('complete_date', complete_date)
        grU.setValue('estimated_oi_amount', estimated_oi_amount)
        grU.setValue('currency', currency)

        grU.setValue('estimated_order_date', estimated_order_date)
        grU.setValue('estimated_delivery_date', estimated_delivery_date)
        grU.setValue('submitted_date', submitted_date)
        grU.setValue('quotation_due_date', quotation_due_date)
        grU.setValue('quotation_type', quotation_type)

        grU.setValue('yoda_opportunity_no', yoda_opportunity_no)
        grU.setValue('assignment_group', assignment_group)
        grU.setValue('assigned_to', assigned_to)
        grU.setValue('end_user', end_user)
        grU.setValue('contract', contract)
        grU.setValue('contract_name', contract_name)
        grU.setValue('contract_address', contract_address)
        grU.setValue('contract_country', contract_country)
        grU.setValue('project_title', project_title)
        grU.setValue('project_detail', project_detail)
        grU.setValue('caution', caution)
        grU.setValue('reason_code', reason_code)
        grU.setValue('request_due_date', request_due_date)
        grU.setValue('remark', remark)
        grU.setValue('currency_lc', currency_lc)
        grU.setValue('exchange_rate', exchange_rate)
        grU.setValue('estimated_oi_amount_lc', estimated_oi_amount_lc)

        grU.setValue('project_status', project_status)
        grU.setValue('profit_company', profit_company)


        grU.update()
       // gs.addErrorMessage("quotation_type")
       // gs.addErrorMessage(quotation_type)

    }



    if (input &amp;&amp; input.isOIReport) {
        //gs.addErrorMessage("야 정신차려봐 isUpdate")
        gs.addInfoMessage("원하는 곳에 옴")
        gs.addInfoMessage(input.number.toString())
        var inputRawNumber = input.number.toString()
				inputRawNumber = inputRawNumber.substring(3)
        var oi = new GlideRecord('x_yergb_bpm_oi_report');
        oi.addQuery('number', 'OI' + inputRawNumber );
				oi.query();
        while(oi.next()) {
			   data.io_sys_id = oi.sys_id.toString()
					gs.addInfoMessage(oi.sys_id)
					gs.addInfoMessage(data.io_sys_id)
				}
				 
       }


    // 여기서는 전부 REFERENCE 버튼과 관련된 로직
    if (input &amp;&amp; input.refer_sales_manager_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('sys_user');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                //column3: gr.getValue('sys_id')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "Sales Manager"
    }

    if (input &amp;&amp; input.refer_quotation_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('x_yergb_bpm_quotation');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('sys_id')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "QUOTATION"

    }

    if (input &amp;&amp; input.refer_assignment_group_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('sys_user_group');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('description')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "ASSIGNMENT GROUP"

    }

    if (input &amp;&amp; input.refer_assigned_to_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('sys_user');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('email')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "ASSIGNED TO"

    }
    if (input &amp;&amp; input.refer_end_user_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('core_company');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('u_company_code'),
                column4: gr.getValue('city')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "END USER"
    }

    if (input &amp;&amp; input.refer_contract_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('core_company');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('u_company_code'),
                column4: gr.getValue('city')

            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "CONTRACT COMPANY"

    }

    if (input &amp;&amp; input.refer_contract_country_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('core_country');
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('name'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('sys_id')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "COUNTRY"

    }


    if (input &amp;&amp; input.refer_currency_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('fx_currency');
        gr.addQuery('active', true);
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('code'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('name')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "CURRENCY"

    }

	if (input &amp;&amp; input.refer_copy_modal) { // 없으면 오류 뜸, 둘다 있어야 함.

        var items = [];
        var gr = new GlideRecord('x_yergb_bpm_rfq_entry');
        gr.addQuery('active', true);
        gr.query();
        while (gr.next()) {
            items.push({
                column1: gr.getValue('number'),
                column2: gr.getValue('sys_id'),
                column3: gr.getValue('quotation_type'),
                column4: gr.getValue('project_title')
            });
        }

        // Pass data to the client script
        data.items = items;
        data.modalTitle = "COPY"

    }
	
    function getValueOrEmptyString(value) {
        return typeof value === 'undefined' ? '' : value;
    }

    function getChoiceLabel(table, element, value) {
        var gr = new GlideRecord('sys_choice');
        gr.addQuery('name', table); // 테이블 이름
        gr.addQuery('element', element); // 필드 이름
        gr.addQuery('value', value); // 선택 값
        gr.query();

        if (gr.next()) {
            return gr.getValue('label'); // 선택 필드의 보이는 값 반환
        } else {
            return 'none';
        }
    }




    var gr = new GlideRecord("x_yergb_bpm_quotation");
        gr.orderBy("version");
        gr.addEncodedQuery('rfq_entry=' + urlSysId);
        gr.query();
        var gridDetailData = [];
        while (gr.next()) {
            gridDetailData.push({
                'sys_id': gr.sys_id.getDisplayValue(),
                'number': gr.number.getDisplayValue(),
                'version': gr.version.getDisplayValue(),
                'currency_lc': gr.currency_lc.getDisplayValue(),
                'total_quote_price': gr.total_quote_price.getDisplayValue(),
                'total_quote_cost': gr.total_quote_cost.getDisplayValue(),
                'gp_percent': gr.gp_percent.getDisplayValue(),
                'mp_amount': gr.mp_amount.getDisplayValue(),
                'mp_gap_percent': gr.mp_gap_percent.getDisplayValue()
    
            });
				data.gridDetailData = gridDetailData;
        }



})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;sungsoo@sorin.co.kr&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-06-29 15:07:54&lt;/sys_created_on&gt;&lt;sys_id&gt;938ae5d247c7c6106cce1ce4316d43af&lt;/sys_id&gt;&lt;sys_mod_count&gt;17&lt;/sys_mod_count&gt;&lt;sys_name&gt;rfqEntryWd1st&lt;/sys_name&gt;&lt;sys_package display_value="BPM" source="x_yergb_bpm"&gt;41c8a9e73b1e4a10ec3cbf2a85e45ab7&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="BPM"&gt;41c8a9e73b1e4a10ec3cbf2a85e45ab7&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_938ae5d247c7c6106cce1ce4316d43af&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;sungsoo@sorin.co.kr&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-06-29 15:45:31&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;link id="style-link" href="https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid-style.css" rel="stylesheet"/&gt;
&lt;script defer type="text/javascript" src="https://cdn.jsdelivr.net/gh/flowmt/sample/dist/realgrid.2.7.2.min.js"&gt; &lt;/script&gt;
&lt;script defer&gt;
  var realGrid2Lic = 'upVcPE+wPOmtLjqyBIh9RkM/nBOseBrflwxYpzGZyYkkSQt0t0CTeCSk1qaDqTRZ5JoV9H143uMO5+/xJSE3Lj4YewEIhlh/';
&lt;/script&gt;

&lt;div ng-controller="PopoverController as c"&gt;
    &lt;div class="yoko-container"&gt;
        &lt;div class="yoko-breadcrumb"&gt;Home &gt; Quotation Request&lt;/div&gt;
        &lt;div class="yoko-title-btn-wrap"&gt;
            &lt;h1 class="yoko-title"&gt;Quotation Request&lt;/h1&gt;
            &lt;div class="yoko-btn-wrap"&gt;
                &lt;button class="yoko-btn yoko-btn-fill-red" ng-if="data.showCancel" ng-click="btnCancel()"&gt;Cancel&lt;/button&gt;
                &lt;button class="yoko-btn yoko-btn-fill-red" ng-if="data.showReturn" ng-click="btnReturn()"&gt;Return&lt;/button&gt;
                &lt;button class="yoko-btn yoko-btn-fill-accept" ng-if="data.showAccept" ng-click="btnAccept()"&gt;Accept&lt;/button&gt;
                &lt;button class="yoko-btn yoko-btn-outline" ng-if="data.showOIReport" ng-click="btnOIReport()"&gt;OI Report&lt;/button&gt;
                &lt;button class="yoko-btn yoko-btn-outline" ng-if="data.showCopy" ng-click="btnCopy()"&gt;Copy&lt;/button&gt;
                &lt;button class="yoko-btn yoko-btn-outline" ng-if="data.showInProgress" ng-click="btnInProgress()"&gt;In Progress&lt;/button&gt;
                &lt;button class="yoko-btn yoko-btn-outline" ng-if="data.showSubmit" ng-click="btnSubmit()"&gt;Submit Quote&lt;/button&gt;
                &lt;button class="yoko-btn yoko-btn-outline" ng-if="data.showRequest" ng-click="btnRequest()"&gt;Request Quote&lt;/button&gt;
                &lt;button class="yoko-btn yoko-btn-outline" id="AssessButton" ng-if="data.showAssess" ng-click="btnAssess()"&gt;Assess&lt;/button&gt;
                &lt;!--button class="yoko-btn yoko-btn-outline" ng-click="btnUpdate()"&gt;Update&lt;/button--&gt;
                &lt;button class="yoko-btn yoko-btn-fill" ng-if="data.showSave" id="saveButton" ng-click="btnSave()"&gt;Save&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class="yoko-content"&gt;
            &lt;div class="yoko-search-form-wrap"&gt;
                &lt;div class="yoko-search-form"&gt;
                    &lt;div class="yoko-flex-responsive"&gt;
                        &lt;div class="yoko-form-col"&gt;

                            &lt;div class="yoko-form-group"&gt;
                                &lt;label for="request_no" class="yoko-short"&gt;{{data.labelNumber}}&lt;/label&gt;
                                &lt;input type="text" name="request_no" value="" placeholder="" ng-model="c.data.number" disabled&gt;
                            &lt;/div&gt;

                            &lt;div class="yoko-form-group"&gt;
                                &lt;label for="requester_no" class="yoko-short"&gt;{{data.labelRequestor}}&lt;/label&gt;
                                &lt;div class="yoko-form-inline"&gt;
                                    &lt;input type="text" name="requester_no" ng-model="c.data.requestor" disabled&gt;
                                    &lt;input type="text" name="requestor_no_sys_id" value="" disabled ng-model="c.data.requestor_sys_id" ng-style="{'display': 'none'}"&gt;
                                    &lt;button id="button2" type="button" class="yoko-btn yoko-btn-search" ng-click="c.togglePopover($event, 2)"&gt;&lt;/button&gt;
                                &lt;/div&gt;
                            &lt;/div&gt;

                            &lt;div class="yoko-form-group"&gt;
                                &lt;label for="sales_manager" class="yoko-short"&gt;{{data.labelSalesManager}}&lt;/label&gt;
                                &lt;input type="text" name="request_no" value="" placeholder="" ng-model="c.data.sales_manager" readonly&gt;
                                &lt;input type="text" name="requestor_no_sys_id" value="" ng-model="c.data.sales_manager_sys_id" ng-style="{'display': 'none'}" readonly&gt;
                                &lt;button id="button1" type="button" class="yoko-btn yoko-btn-search" ng-click="c.togglePopover($event, 1)" ng-style="{'display': 'none'}"&gt;&lt;/button&gt;
                                &lt;button type="button" class="yoko-btn yoko-btn-search" ng-click="btnRefSalesManager()" ng-disabled="isCancelledDisabled"&gt;&lt;/button&gt;
                            &lt;/div&gt;

                            &lt;div class="yoko-form-group"&gt;
                                &lt;label for="customer_rfq" class="yoko-short"&gt;{{data.labelCustomerRFQ}}&lt;/label&gt;
                                &lt;input type="text" name="request_no" value="" placeholder="" ng-model="c.data.customer_rfq" ng-disabled="isCancelledDisabled"&gt;
                            &lt;/div&gt;

                            

                        &lt;/div&gt;

                        &lt;div class="yoko-form-col"&gt;

                            &lt;div class="yoko-form-group"&gt;
                                &lt;label for="req_date" class="yoko-short-120"&gt;{{data.labelRequestDate}}&lt;/label&gt;
                                &lt;input type="date" value={{data.request_date}} name="req_date" ng-model="c.data.request_date" disabled&gt;
                            &lt;/div&gt;

                            &lt;div class="yoko-form-group"&gt;
                                &lt;label for="orderdate" class="yoko-short-120"&gt;{{data.labelEstimatedOrderDate}}&lt;/label&gt;
                                &lt;input type="date" name="orderdate" id="orderdate" value={{data.estimated_order_date}} ng-model="c.data.estimated_order_date" ng-disabled="isCancelledDisabled"&gt;
                            &lt;/div&gt;

                            &lt;div class="yoko-form-group"&gt;
                                &lt;label for="deliverydate" class="yoko-short-120"&gt;{{data.labelEstimatedDeliveryDate}}&lt;/label&gt;
                                &lt;input type="date" name="deliverydate" id="deliverydate" value={{data.estimated_delivery_date}} ng-model="c.data.estimated_delivery_date" ng-disabled="isCancelledDisabled"&gt;
                            &lt;/div&gt;

                            &lt;div class="yoko-form-group"&gt;
                                &lt;label for="quotationdate" class="yoko-short-120"&gt;{{data.labelQuotationDueDate}}&lt;/label&gt;
                                &lt;input type="date" name="quotationdate" id="quotationdate" value={{data.quotation_due_date}} ng-model="c.data.quotation_due_date" ng-disabled="isCancelledDisabled"&gt;
                            &lt;/div&gt;

                            &lt;div class="yoko-form-group"&gt;
                                &lt;label for="req_date" class="yoko-short-120"&gt;{{data.labelSubmittedDate}}&lt;/label&gt;
                                &lt;input type="date" value={{data.request_date}} name="submitted_date" ng-model="c.data.submitted_date" disabled&gt;
                            &lt;/div&gt;

                            &lt;div class="yoko-form-group"&gt;
                                &lt;label for="comp_date" class="yoko-short-120"&gt;{{data.labelCompleteDate}}&lt;/label&gt;
                                &lt;input type="date" value={{data.request_date}} name="complete_date" ng-model="c.data.complete_date" disabled&gt;
                            &lt;/div&gt;

                        &lt;/div&gt;
                    &lt;/div&gt;


                    &lt;div class="yoko-form-col"&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="type" class="yoko-short-120"&gt;
                                &lt;h5 name="mandatoryCurrency" style="display: inline; margin: 0;  color: red" ng-if="c.data.currencyMandatory"&gt;✻&lt;/h5&gt; {{data.labelCurrency}}
                            &lt;/label&gt;
                            &lt;div class="yoko-form-inline"&gt;
                                &lt;input type="text" name="currency" ng-model="c.data.currency" class="yoko-wid140" readonly&gt;
                                &lt;input type="text" name="currency_sys_id" ng-model="c.data.currency_sys_id" placeholder="" ng-style="{'display': 'none'}" readonly&gt;
                                &lt;button type="button" class="yoko-btn yoko-btn-search" ng-click="btnRefCurrency()" ng-disabled="isCancelledDisabled"&gt;&lt;/button&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="exchange_rate" class="yoko-short-120"&gt;{{data.labelCurrencyLC}}&lt;/label&gt;
                            &lt;input type="text" name="est_oi_amount" value="" placeholder="" ng-model="c.data.currency_lc" disabled&gt;
                        &lt;/div&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="exchange_rate" class="yoko-short-120"&gt;{{data.labelExchangeRate}}&lt;/label&gt;
                            &lt;input type="text" name="est_oi_amount" value="" placeholder="" ng-model="c.data.exchange_rate" disabled&gt;
                        &lt;/div&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="exchange_rate" class="yoko-short-120"&gt;{{data.labelEstimatedOIAmount}}&lt;/label&gt;
                            &lt;input type="text" name="est_oi_amount" value="" placeholder="" ng-model="c.data.estimated_oi_amount" ng-disabled="isCancelledDisabled"&gt;
                        &lt;/div&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="exchange_rate" class="yoko-short-120"&gt;{{data.labelEstimatedOIAmountLC}}&lt;/label&gt;
                            &lt;input type="text" name="est_oi_amount" value="" placeholder="" ng-model="c.data.estimated_oi_amount_lc" disabled&gt;
                        &lt;/div&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="exchange_rate" class="yoko-short-120"&gt;{{data.labelTotalQuotePrice}}&lt;/label&gt;
                            &lt;input type="text" name="est_oi_amount" value="" placeholder="" ng-model="c.data.total_quote_price" disabled&gt;
                        &lt;/div&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="exchange_rate" class="yoko-short-120"&gt;{{data.labelTotalQuotePriceLC}}&lt;/label&gt;
                            &lt;input type="text" name="est_oi_amount" value="" placeholder="" ng-model="c.data.total_quote_price_lc" disabled&gt;
                        &lt;/div&gt;


                    &lt;/div&gt;
                    &lt;div class="yoko-form-col"&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="quotation"&gt;{{data.labelQuotation}}&lt;/label&gt;
                            &lt;div class="yoko-form-inline"&gt;
                                &lt;button class="yoko-btn-quotation" ng-click="btnQuotation()" style="background-color: #f0f0f0; border: 1px solid #ccc; box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.3); padding: 10px 20px; border-radius: 5px; text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);"&gt;
                                    {{c.data.quotation}}
                                &lt;/button&gt;
                                &lt;input type="text" name="quotation_sysId" ng-model="c.data.quotation_sys_id" placeholder="" class="yoko-wid140" ng-click="handleClick()" ng-style="{'display': 'none'}" readonly&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="type"&gt;
                                &lt;h5 name="mandatoryQ" style="display: inline; margin: 0;  color: red" ng-if="c.data.quotationTypeSelectMandatory"&gt;✻&lt;/h5&gt; {{data.labelQuotationType}}
                            &lt;/label&gt;
                            &lt;div class="yoko-form-inline"&gt;
                                &lt;select id="type" name="quotation_type_select" class="yoko-wid140" ng-model="c.data.quotation_type" ng-class="{'highlight-form': !c.data.quotation_type}" ng-options="option as option for option in c.data.choices" ng-if="data.showQuotationTypeSelect"&gt;
                                    &lt;option value=""&gt;Select Type&lt;/option&gt;
                                &lt;/select&gt;
                                &lt;input type="text" name="quotation_type" ng-model="c.data.quotation_type_label" class="yoko-wid140" style="font-size:12px" ng-if="data.showQuotationType" ng-disabled="isCancelledDisabled"&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="quotation_state"&gt;{{data.labelQuotationState}}&lt;/label&gt;
                            &lt;input type="text" name="quotation_state" class="yoko-wid140" ng-model="c.data.quotation_state" disabled&gt;
                        &lt;/div&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="quotation_state"&gt;{{data.labelProfitCompany}}&lt;/label&gt;
                            &lt;input type="text" name="quotation_state" class="yoko-wid140" ng-model="c.data.quotation_state" disabled&gt;
                        &lt;/div&gt;

                        

                    &lt;/div&gt;
                    &lt;div class="yoko-form-col"&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="status" class="yoko-short-110"&gt;{{data.labelState}}&lt;/label&gt;
                            &lt;input type="text" name="status" value={{data.state}} placeholder="New" class="yoko-wid172" disabled&gt;
                        &lt;/div&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="oppt_no" class="yoko-short-110"&gt;{{data.labelYodaOpportunityNo}}&lt;/label&gt;
                            &lt;input type="text" name="oppt_no" value="" placeholder="" class="yoko-wid172" ng-model="c.data.yoda_opportunity_no" ng-disabled="isCancelledDisabled"&gt;
                        &lt;/div&gt;
                        
                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="oppt_no" class="yoko-short-110"&gt;{{data.labelProjectStatus}}&lt;/label&gt;
                            &lt;input type="text" name="oppt_no" value="" placeholder="" class="yoko-wid172" ng-model="c.data.yoda_opportunity_no" ng-disabled="isCancelledDisabled"&gt;
                        &lt;/div&gt;


                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="assignment_group" class="yoko-short-110"&gt;{{data.labelAssignmentGroup}}&lt;/label&gt;
                            &lt;div class="yoko-form-inline"&gt;
                                &lt;input type="text" name="assignment_group" value="" placeholder="" readonly class="yoko-wid140" ng-model="c.data.assignment_group" disabled&gt;
                                &lt;input type="text" name="assignment_group_sys_id" value="" placeholder="" disabled class="yoko-wid140" ng-model="c.data.assignment_group_sys_id" ng-style="{'display': 'none'}"&gt;
                                &lt;button type="button" class="yoko-btn yoko-btn-search" ng-click="btnRefAssignmentGroup()" &gt;&lt;/button&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;

                        &lt;div class="yoko-form-group"&gt;
                            &lt;label for="assigned_to" class="yoko-short-110"&gt;{{data.labelAssignedTo}}&lt;/label&gt;
                            &lt;div class="yoko-form-inline"&gt;
                                &lt;input type="text" name="assigned_to" value="" placeholder="" readonly class="yoko-wid140" ng-model="c.data.assigned_to" disabled&gt;
                                &lt;input type="text" name="assigned_to_sys_id" value="" placeholder="" disabled class="yoko-wid140" ng-model="c.data.assigned_to_sys_id" ng-style="{'display': 'none'}"&gt;
                                &lt;button type="button" class="yoko-btn yoko-btn-search" ng-click="btnRefAssignedTo()" &gt;&lt;/button&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            
            
        &lt;/div&gt;
        &lt;div class="yoko-grid-area-wrapper"&gt;&lt;/div&gt;
            
    &lt;/div&gt;
    &lt;div class="yoko-grid-area"&gt;
        &lt;br&gt;
        &lt;br&gt;
        &lt;br&gt;
        
        &lt;div class="out" id='gridContainer' style="width:100%; height: 200px;"&gt;&lt;/div&gt;

    &lt;/div&gt;

    &lt;!-- Modal Test Structure --&gt;
    &lt;div id="modalTest" class="modal" style="display:none;"&gt;
        &lt;div class="modal-content"&gt;
            &lt;div class="modal-header"&gt;
                &lt;span class="close"&gt;&amp;times;&lt;/span&gt;
                &lt;h2&gt;{{data.modalTitle}}&lt;/h2&gt;
            &lt;/div&gt;
            &lt;div class="modal-body"&gt;

                &lt;ul id="container" class="container"&gt;
                    &lt;li ng-repeat="item in c.data.items"&gt;
                        &lt;span ng-click="c.logSysId(item.column1, item.column2, item.column3) "&gt;{{ item.column1 }}&lt;/span&gt;
                        &lt;span ng-if="false"&gt;{{ item.column2 }}&lt;/span&gt;
                        &lt;span&gt;{{ item.column3 }}&lt;/span&gt;
                        &lt;span&gt;{{ item.column4 }}&lt;/span&gt;
                    &lt;/li&gt;
                &lt;/ul&gt;

                &lt;div class="pagination" id="pagination"&gt;&lt;/div&gt;

            &lt;/div&gt;
            &lt;div class="modal-footer"&gt;
                &lt;button class="btn btn-primary" id="closeModalButton"&gt;Close&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div id="popover1" class="popover" ng-class="{'show': c.popovers[0].visible}" ng-style="c.popovers[0].style"&gt;
        &lt;div class="popover-header"&gt;Company&lt;/div&gt;
        &lt;div class="popover-body"&gt;
            &lt;div class="form-group"&gt;
                &lt;label for="company-name"&gt;Name&lt;/label&gt;
                &lt;input type="text" id="company-name" class="form-control" value="NVIDIA" readonly&gt;
            &lt;/div&gt;
            &lt;div class="form-group"&gt;
                &lt;label for="company-phone"&gt;Phone&lt;/label&gt;
                &lt;input type="text" id="company-phone" class="form-control" value="(408) 486-2000" readonly&gt;
            &lt;/div&gt;
            &lt;div class="form-group"&gt;
                &lt;label for="company-street"&gt;Street&lt;/label&gt;
                &lt;input type="text" id="company-street" class="form-control" value="2701 San Tomas Expressway" readonly&gt;
            &lt;/div&gt;
            &lt;button type="button" class="btn btn-secondary" ng-click="c.hidePopover(1)"&gt;Close&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div id="popover2" class="popover" ng-class="{'show': c.popovers[1].visible}" ng-style="c.popovers[1].style"&gt;
        &lt;div class="popover-header"&gt;Group&lt;/div&gt;
        &lt;div class="popover-body"&gt;
            &lt;div class="form-group"&gt;
                &lt;label for="group-name"&gt;Name&lt;/label&gt;
                &lt;input type="text" id="group-name" class="form-control" value="Sales Engineers" readonly&gt;
            &lt;/div&gt;
            &lt;div class="form-group"&gt;
                &lt;label for="group-manager"&gt;Manager&lt;/label&gt;
                &lt;input type="text" id="group-manager" class="form-control" value="John Doe" readonly&gt;
            &lt;/div&gt;
            &lt;div class="form-group"&gt;
                &lt;label for="group-email"&gt;Group Email&lt;/label&gt;
                &lt;input type="text" id="group-email" class="form-control" value="sales@company.com" readonly&gt;
            &lt;/div&gt;
            &lt;button type="button" class="btn btn-secondary" ng-click="c.hidePopover(2)"&gt;Close&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;




&lt;/div&gt;


&lt;script&gt;
    const buttons = document.querySelectorAll('.yoko-title-btn-wrap .yoko-btn-wrap button');

    buttons.forEach(button =&gt; {
        button.addEventListener('click', function() {
            buttons.forEach(btn =&gt; {
                btn.classList.remove('active');
            });
            this.classList.add('active');
        });
    });

    window.onload = function() {
        var wrapper = document.querySelector('.yoko-search-form-wrapper');
        if (wrapper) {
            var forms = wrapper.querySelectorAll('.yoko-search-form-wrap &gt; .yoko-search-form');
            var maxHeight = 0;
            // 모든 .yoko-search-form 요소의 높이를 확인하여 최대 높이를 찾습니다.
            forms.forEach(function(form) {
                if (form.offsetHeight &gt; maxHeight) {
                    maxHeight = form.offsetHeight;
                }
            });
            // 최대 높이로 모든 .yoko-search-form 요소의 높이를 설정합니다.
            forms.forEach(function(form) {
                form.style.height = maxHeight + 'px';
            });
        }
    };
&lt;/script&gt;]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;&lt;/record_update&gt;</payload>
        <payload_hash>451085605</payload_hash>
        <record_name>rfqEntryWd1st</record_name>
        <reverted_from/>
        <source>f8f40a2d470fc2106cce1ce4316d4342</source>
        <source_table>sys_update_set</source_table>
        <state>current</state>
        <sys_created_by>sungsoo@sorin.co.kr</sys_created_by>
        <sys_created_on>2024-06-29 15:45:31</sys_created_on>
        <sys_id>1a23f95e47c7c6106cce1ce4316d4367</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>19064ac4a070000001</sys_recorded_at>
        <sys_updated_by>sungsoo@sorin.co.kr</sys_updated_by>
        <sys_updated_on>2024-06-29 15:45:31</sys_updated_on>
        <type>Widget</type>
        <update_guid>9e23f95e26c7c61031a95604ac7e3366</update_guid>
        <update_guid_history>9e23f95e26c7c61031a95604ac7e3366:451085605,2482715ee0c7c610b3b489c7b6927f85:2123072647,c202715ee7c7c610f18196b355c4612a:-1739692437,aab1f55a61c7c61044c6208dc174ccf7:-1017972929,fd5171da51c7c6101024bbc245f5b9b1:1595766350,e701f55ac7c7c610a6633f2bdd4ea378:841327374,d07031daa0c7c6103208ff221b811faa:1154348078,9c10bdd65fc7c6106d906add806314f2:-1925471280,632fa55a73c7c610b64488babfddc5ab:1712108176,b6ee615a63c7c610f5bdc76cc7e0f045:2073076174,8abe6d1a9cc7c610aec4b3f4a515400b:-662219872,9f3e69d61bc7c610233b9cce0a1c7f7d:596098176,300eadd6e3c7c610faf0bbb635836361:458797920,f8cde1d687c7c610cf5383f162f06953:328188759,748de5d223c7c6103ad1ca088597b0ba:-975965079,541da916d1c7c6105cda386d50fb25d7:-1335105343,a95b65d28bc7c610a94d381ede0f7d2b:458797920,538ae5d206c7c610401dd52d18d3c3b1:-16587124</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="rfqEntryWd1st">a1f2ae9a47cbc6106cce1ce4316d43cc</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>sungsoo@sorin.co.kr</sys_created_by>
        <sys_created_on>2024-06-29 19:14:22</sys_created_on>
        <sys_db_object display_value="" name="sp_widget">sp_widget</sys_db_object>
        <sys_id>77b1a359cd4c44b488eb20e0eb506890</sys_id>
        <sys_metadata>938ae5d247c7c6106cce1ce4316d43af</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>rfqEntryWd1st</sys_name>
        <sys_package display_value="BPM" source="x_yergb_bpm">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="BPM">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_scope>
        <sys_scope_delete display_value="">9ff3e273935a476eab36e9bd65d24759</sys_scope_delete>
        <sys_update_name>sp_widget_938ae5d247c7c6106cce1ce4316d43af</sys_update_name>
        <sys_update_version display_value="sp_widget_938ae5d247c7c6106cce1ce4316d43af">1a23f95e47c7c6106cce1ce4316d4367</sys_update_version>
        <sys_updated_by>sungsoo@sorin.co.kr</sys_updated_by>
        <sys_updated_on>2024-06-29 19:14:22</sys_updated_on>
    </sys_metadata_delete>
</record_update>
