<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="DELETE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sysapproval_approver</collection>
        <condition>(current.source_table == 'x_yergb_bpm_budget_plan' &amp;&amp; new TableUtils(current.source_table).getAbsoluteBase() != 'task') &amp;&amp; current.state.changes()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Approval Events (Non-Task)</name>
        <order>1001</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[var isFD = isFlowDesigner(current);
sendEventsNonTask();

function getApproverUserName(approver) {
	var username = approver.getDisplayValue();
	if (!GlideDomainSupport.isDataSeparationEnabled()) 
		return username;
	if (GlideStringUtil.notNil(username))
		return username;
	return sn_fd.FlowAPI.getApproverUsername(approver.sys_id);
}

function isFlowDesigner(me) {
   if (!me.wf_activity.nil())
      return false;
   if (!me.group.nil() && (me.group.wait_for == "process_flow"))
      return true;

   var listenerGr = new GlideRecord('sys_flow_listener');
   listenerGr.addQuery('listening_to', me.document_id);
   listenerGr.addQuery('source_table', me.source_table);
   listenerGr.addQuery('name', 'Ask For Approval');
   listenerGr.addQuery('state', 'WAITING');
   listenerGr.query();
   return listenerGr.hasNext();
}

function getComment(isFlowDesigner, username, comment) {
	if (isFlowDesigner) {
		var myComment = "{0} " + comment;
		return gs.getMessage(myComment, username);
	}
	return username + " " + comment;
}

function getEventPrefix(sourceTable) {
	if (sourceTable!=null && sourceTable.startsWith('kb_template')) {
		return "kb_knowledge";
	}
	return sourceTable;
}

function sendEventsNonTask() {
   if (!current.state.changes()) 
      return;

   var event = getEventPrefix(current.source_table);
   var approvalComment = "";
   switch (current.state + "") {    
      case 'cancelled':
         event += ".approval.cancelled";
         gs.eventQueue(event, current, gs.getUserID(), gs.getUserName());
         break;
      case 'requested':
         event += ".approval.inserted";
         gs.eventQueue(event, current, gs.getUserID(), gs.getUserName());
         approvalComment = getComment(isFD, getApproverUserName(current.approver), "requested to approve task");
         updateRecord(current, approvalComment);
	 break;
      case 'rejected':
         event += ".approval.rejected";
         gs.eventQueue(event, current, current.state, previous.state);
         var isAuto = ((current.operation() == 'insert') && isFD)?"auto ":"";
         approvalComment = getComment(isFD, getApproverUserName(current.approver), isAuto + "rejected the task.");
         updateRecord(current, approvalComment, current.comments.getJournalEntry(-1));
         notifyMyFriends(current);
         break;
      case 'approved':
         var isAuto = ((current.operation() == 'insert') && isFD)?"auto ":"";
         approvalComment = getComment(isFD, getApproverUserName(current.approver), isAuto + "approved the task.");
         updateRecord(current, approvalComment, current.comments.getJournalEntry(-1));
         break;
      default: 
   }
         
 }

function notifyMyFriends(me) {
   var friends = new GlideRecord('sysapproval_approver');
   friends.addQuery('document_id', me.document_id);
   friends.query();
   while(friends.next()) {
      if (friends.approver.toString() != me.approver.toString()) {
         gs.eventQueue(me.source_table + ".approval.rej.other", me, friends.approver);
      }
   }
}

function updateRecord(me, journal, comments) {
   var isWorkflow = false;
   var isProcessGuide = false;
   if (isFD) {
      if (gs.getProperty("com.glide.hub.flow.approval.history_comment", "true") != "true")
         return;
   }
   else {
      // only log the user approval activity for workflows when specifically turned on
      // otherwise, we spam the approval history log when it is almost never desired to track via the approval history journal field
      var isWorkflow = !current.wf_activity.nil();
      // if this is for a group approval, don't log this user action since the Group Approval Activity will handle the logging
      if (!current.group.nil())
         return;
      // only log the user approval activity for workflows when specifically turned on
      // otherwise, we spam the approval history log when it is almost never desired to track via the approval history journal field
      isWorkflow = !current.wf_activity.nil();
      if (isWorkflow && (gs.getProperty("glide.workflow.user_approval_history") != "true"))
         return;
      isProcessGuide = !current.process_step.nil();

   }

	if (comments)
		journal += "\n\n" + gs.getMessage("Approval comments") + ":\n" + comments;
	
	var approvingRecord = new GlideRecord(me.source_table);
	if (approvingRecord.get(me.document_id)) {
		if (isWorkflow || isProcessGuide)
			approvingRecord.setUseEngines(false);
		
		if (!me.approval_journal_column.nil()) {
			if (typeof approvingRecord[me.approval_journal_column].setJournalEntry === 'function') {
				approvingRecord[me.approval_journal_column].setJournalEntry(journal);
				approvingRecord.update();
				return;
			}
		}
		
		if (typeof approvingRecord.approval_history.setJournalEntry === 'function') {
			approvingRecord.approval_history.setJournalEntry(journal);
			approvingRecord.update();
			return;
		}
	}
}
]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>kms@sorin.co.kr</sys_created_by>
        <sys_created_on>2024-06-29 05:34:03</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>4937ab8a83070210856ceec0deaad3b7</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Approval Events (Non-Task)</sys_name>
        <sys_overrides/>
        <sys_package display_value="BPM" source="x_yergb_bpm">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_package>
        <sys_policy/>
        <sys_scope display_value="BPM">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_scope>
        <sys_update_name>sys_script_4937ab8a83070210856ceec0deaad3b7</sys_update_name>
        <sys_updated_by>kms@sorin.co.kr</sys_updated_by>
        <sys_updated_on>2024-06-29 05:35:23</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="DELETE" query="documentkey=4937ab8a83070210856ceec0deaad3b7"/>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="BPM">41c8a9e73b1e4a10ec3cbf2a85e45ab7</application>
        <file_path/>
        <instance_id>a0ea7653db614e582f082a59139619b8</instance_id>
        <instance_name>dev260285</instance_name>
        <name>sys_script_4937ab8a83070210856ceec0deaad3b7</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;sysapproval_approver&lt;/collection&gt;&lt;condition&gt;(current.source_table == 'x_yergb_bpm_budget_plan' &amp;amp;&amp;amp; new TableUtils(current.source_table).getAbsoluteBase() != 'task') &amp;amp;&amp;amp; current.state.changes()&lt;/condition&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition/&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;Approval Events (Non-Task)&lt;/name&gt;&lt;order&gt;1001&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[var isFD = isFlowDesigner(current);
sendEventsNonTask();

function getApproverUserName(approver) {
	var username = approver.getDisplayValue();
	if (!GlideDomainSupport.isDataSeparationEnabled()) 
		return username;
	if (GlideStringUtil.notNil(username))
		return username;
	return sn_fd.FlowAPI.getApproverUsername(approver.sys_id);
}

function isFlowDesigner(me) {
   if (!me.wf_activity.nil())
      return false;
   if (!me.group.nil() &amp;&amp; (me.group.wait_for == "process_flow"))
      return true;

   var listenerGr = new GlideRecord('sys_flow_listener');
   listenerGr.addQuery('listening_to', me.document_id);
   listenerGr.addQuery('source_table', me.source_table);
   listenerGr.addQuery('name', 'Ask For Approval');
   listenerGr.addQuery('state', 'WAITING');
   listenerGr.query();
   return listenerGr.hasNext();
}

function getComment(isFlowDesigner, username, comment) {
	if (isFlowDesigner) {
		var myComment = "{0} " + comment;
		return gs.getMessage(myComment, username);
	}
	return username + " " + comment;
}

function getEventPrefix(sourceTable) {
	if (sourceTable!=null &amp;&amp; sourceTable.startsWith('kb_template')) {
		return "kb_knowledge";
	}
	return sourceTable;
}

function sendEventsNonTask() {
   if (!current.state.changes()) 
      return;

   var event = getEventPrefix(current.source_table);
   var approvalComment = "";
   switch (current.state + "") {    
      case 'cancelled':
         event += ".approval.cancelled";
         gs.eventQueue(event, current, gs.getUserID(), gs.getUserName());
         break;
      case 'requested':
         event += ".approval.inserted";
         gs.eventQueue(event, current, gs.getUserID(), gs.getUserName());
         approvalComment = getComment(isFD, getApproverUserName(current.approver), "requested to approve task");
         updateRecord(current, approvalComment);
	 break;
      case 'rejected':
         event += ".approval.rejected";
         gs.eventQueue(event, current, current.state, previous.state);
         var isAuto = ((current.operation() == 'insert') &amp;&amp; isFD)?"auto ":"";
         approvalComment = getComment(isFD, getApproverUserName(current.approver), isAuto + "rejected the task.");
         updateRecord(current, approvalComment, current.comments.getJournalEntry(-1));
         notifyMyFriends(current);
         break;
      case 'approved':
         var isAuto = ((current.operation() == 'insert') &amp;&amp; isFD)?"auto ":"";
         approvalComment = getComment(isFD, getApproverUserName(current.approver), isAuto + "approved the task.");
         updateRecord(current, approvalComment, current.comments.getJournalEntry(-1));
         break;
      default: 
   }
         
 }

function notifyMyFriends(me) {
   var friends = new GlideRecord('sysapproval_approver');
   friends.addQuery('document_id', me.document_id);
   friends.query();
   while(friends.next()) {
      if (friends.approver.toString() != me.approver.toString()) {
         gs.eventQueue(me.source_table + ".approval.rej.other", me, friends.approver);
      }
   }
}

function updateRecord(me, journal, comments) {
   var isWorkflow = false;
   var isProcessGuide = false;
   if (isFD) {
      if (gs.getProperty("com.glide.hub.flow.approval.history_comment", "true") != "true")
         return;
   }
   else {
      // only log the user approval activity for workflows when specifically turned on
      // otherwise, we spam the approval history log when it is almost never desired to track via the approval history journal field
      var isWorkflow = !current.wf_activity.nil();
      // if this is for a group approval, don't log this user action since the Group Approval Activity will handle the logging
      if (!current.group.nil())
         return;
      // only log the user approval activity for workflows when specifically turned on
      // otherwise, we spam the approval history log when it is almost never desired to track via the approval history journal field
      isWorkflow = !current.wf_activity.nil();
      if (isWorkflow &amp;&amp; (gs.getProperty("glide.workflow.user_approval_history") != "true"))
         return;
      isProcessGuide = !current.process_step.nil();

   }

	if (comments)
		journal += "\n\n" + gs.getMessage("Approval comments") + ":\n" + comments;
	
	var approvingRecord = new GlideRecord(me.source_table);
	if (approvingRecord.get(me.document_id)) {
		if (isWorkflow || isProcessGuide)
			approvingRecord.setUseEngines(false);
		
		if (!me.approval_journal_column.nil()) {
			if (typeof approvingRecord[me.approval_journal_column].setJournalEntry === 'function') {
				approvingRecord[me.approval_journal_column].setJournalEntry(journal);
				approvingRecord.update();
				return;
			}
		}
		
		if (typeof approvingRecord.approval_history.setJournalEntry === 'function') {
			approvingRecord.approval_history.setJournalEntry(journal);
			approvingRecord.update();
			return;
		}
	}
}
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;kms@sorin.co.kr&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-06-29 05:34:03&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;4937ab8a83070210856ceec0deaad3b7&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;Approval Events (Non-Task)&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="BPM" source="x_yergb_bpm"&gt;41c8a9e73b1e4a10ec3cbf2a85e45ab7&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="BPM"&gt;41c8a9e73b1e4a10ec3cbf2a85e45ab7&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_4937ab8a83070210856ceec0deaad3b7&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;kms@sorin.co.kr&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-06-29 05:35:23&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;after&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=4937ab8a83070210856ceec0deaad3b7"/&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1342561679</payload_hash>
        <record_name>Approval Events (Non-Task)</record_name>
        <reverted_from/>
        <source>5672b6c283030210856ceec0deaad3bc</source>
        <source_table>sys_update_set</source_table>
        <state>current</state>
        <sys_created_by>kms@sorin.co.kr</sys_created_by>
        <sys_created_on>2024-06-29 05:35:23</sys_created_on>
        <sys_id>ac87230e83070210856ceec0deaad3d7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>190627db24a0000001</sys_recorded_at>
        <sys_updated_by>kms@sorin.co.kr</sys_updated_by>
        <sys_updated_on>2024-06-29 05:35:23</sys_updated_on>
        <type>Business Rule</type>
        <update_guid>a087230ece070210ec15be26bf5ae9d7</update_guid>
        <update_guid_history>a087230ece070210ec15be26bf5ae9d7:-1342561679,8d37ab8af5070210fd2ce6cdad1e1db9:13140743</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>kms@sorin.co.kr</sys_created_by>
        <sys_created_on>2024-06-29 05:45:56</sys_created_on>
        <sys_db_object display_value="" name="sys_script">sys_script</sys_db_object>
        <sys_id>394f327ff7d94d7c9412e1e9df4a9110</sys_id>
        <sys_metadata>4937ab8a83070210856ceec0deaad3b7</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Approval Events (Non-Task)</sys_name>
        <sys_package display_value="BPM" source="x_yergb_bpm">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_package>
        <sys_parent display_value="Sysapproval Approver">21a77308e492021008dda4ccc40080ad</sys_parent>
        <sys_policy/>
        <sys_scope display_value="BPM">41c8a9e73b1e4a10ec3cbf2a85e45ab7</sys_scope>
        <sys_scope_delete display_value="">9ff3e273935a476eab36e9bd65d24759</sys_scope_delete>
        <sys_update_name>sys_script_4937ab8a83070210856ceec0deaad3b7</sys_update_name>
        <sys_update_version display_value="sys_script_4937ab8a83070210856ceec0deaad3b7">ac87230e83070210856ceec0deaad3d7</sys_update_version>
        <sys_updated_by>kms@sorin.co.kr</sys_updated_by>
        <sys_updated_on>2024-06-29 05:45:56</sys_updated_on>
    </sys_metadata_delete>
</record_update>
